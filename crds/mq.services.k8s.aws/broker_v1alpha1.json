{
  "description": "Broker is the Schema for the Brokers API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "BrokerSpec defines the desired state of Broker.",
      "properties": {
        "authenticationStrategy": {
          "type": "string"
        },
        "autoMinorVersionUpgrade": {
          "type": "boolean"
        },
        "configuration": {
          "description": "A list of information about the configuration. \n Does not apply to RabbitMQ brokers.",
          "properties": {
            "id": {
              "type": "string"
            },
            "revision": {
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "creatorRequestID": {
          "type": "string"
        },
        "deploymentMode": {
          "type": "string"
        },
        "encryptionOptions": {
          "description": "Does not apply to RabbitMQ brokers. \n Encryption options for the broker.",
          "properties": {
            "kmsKeyID": {
              "type": "string"
            },
            "useAWSOwnedKey": {
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "engineType": {
          "type": "string"
        },
        "engineVersion": {
          "type": "string"
        },
        "hostInstanceType": {
          "type": "string"
        },
        "ldapServerMetadata": {
          "description": "Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. \n Does not apply to RabbitMQ brokers.",
          "properties": {
            "hosts": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "roleBase": {
              "type": "string"
            },
            "roleName": {
              "type": "string"
            },
            "roleSearchMatching": {
              "type": "string"
            },
            "roleSearchSubtree": {
              "type": "boolean"
            },
            "serviceAccountPassword": {
              "type": "string"
            },
            "serviceAccountUsername": {
              "type": "string"
            },
            "userBase": {
              "type": "string"
            },
            "userRoleName": {
              "type": "string"
            },
            "userSearchMatching": {
              "type": "string"
            },
            "userSearchSubtree": {
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "logs": {
          "description": "The list of information about logs to be enabled for the specified broker.",
          "properties": {
            "audit": {
              "type": "boolean"
            },
            "general": {
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "maintenanceWindowStartTime": {
          "description": "The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.",
          "properties": {
            "dayOfWeek": {
              "type": "string"
            },
            "timeOfDay": {
              "type": "string"
            },
            "timeZone": {
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "name": {
          "type": "string"
        },
        "publiclyAccessible": {
          "type": "boolean"
        },
        "securityGroupRefs": {
          "items": {
            "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: \n from: name: my-api",
            "properties": {
              "from": {
                "description": "AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "securityGroups": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "storageType": {
          "type": "string"
        },
        "subnetIDs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "subnetRefs": {
          "items": {
            "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: \n from: name: my-api",
            "properties": {
              "from": {
                "description": "AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "users": {
          "items": {
            "description": "A user associated with the broker. For RabbitMQ brokers, one and only one administrative user is accepted and created when a broker is first provisioned. All subsequent broker users are created by making RabbitMQ API calls directly to brokers or via the RabbitMQ web console.",
            "properties": {
              "consoleAccess": {
                "type": "boolean"
              },
              "groups": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "password": {
                "description": "SecretKeyReference combines a k8s corev1.SecretReference with a specific key within the referred-to Secret",
                "properties": {
                  "key": {
                    "description": "Key is the key within the secret",
                    "type": "string"
                  },
                  "name": {
                    "description": "name is unique within a namespace to reference a secret resource.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace defines the space within which the secret name must be unique.",
                    "type": "string"
                  }
                },
                "required": [
                  "key"
                ],
                "type": "object",
                "x-kubernetes-map-type": "atomic",
                "additionalProperties": false
              },
              "username": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        }
      },
      "required": [
        "autoMinorVersionUpgrade",
        "deploymentMode",
        "engineType",
        "engineVersion",
        "hostInstanceType",
        "name",
        "publiclyAccessible",
        "users"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "BrokerStatus defines the observed state of Broker",
      "properties": {
        "ackResourceMetadata": {
          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member that is used to contain resource sync state, account ownership, constructed ARN for the resource",
          "properties": {
            "arn": {
              "description": "ARN is the Amazon Resource Name for the resource. This is a globally-unique identifier and is set only by the ACK service controller once the controller has orchestrated the creation of the resource OR when it has verified that an \"adopted\" resource (a resource where the ARN annotation was set by the Kubernetes user on the CR) exists and matches the supplied CR's Spec field values. TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse https://github.com/aws/aws-controllers-k8s/issues/270",
              "type": "string"
            },
            "ownerAccountID": {
              "description": "OwnerAccountID is the AWS Account ID of the account that owns the backend AWS service API resource.",
              "type": "string"
            },
            "region": {
              "description": "Region is the AWS region in which the resource exists or will exist.",
              "type": "string"
            }
          },
          "required": [
            "ownerAccountID",
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "brokerID": {
          "type": "string"
        },
        "brokerInstances": {
          "items": {
            "description": "Returns information about all brokers.",
            "properties": {
              "consoleURL": {
                "type": "string"
              },
              "endpoints": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "ipAddress": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "brokerState": {
          "type": "string"
        },
        "conditions": {
          "description": "All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource",
          "items": {
            "description": "Condition is the common struct used by all CRDs managed by ACK service controllers to indicate terminal states  of the CR and its backend AWS service API resource",
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A human readable message indicating details about the transition.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type is the type of the Condition",
                "type": "string"
              }
            },
            "required": [
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
