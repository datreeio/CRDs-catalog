{
  "description": "StackSetInstance is the Schema for the StackSetInstances API. Manages a CloudFormation StackSet Instance.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "StackSetInstanceSpec defines the desired state of StackSetInstance",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "accountId": {
              "description": "Target AWS Account ID to create a Stack based on the StackSet. Defaults to current account.",
              "type": "string"
            },
            "callAs": {
              "description": "Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. Valid values: SELF (default), DELEGATED_ADMIN.",
              "type": "string"
            },
            "deploymentTargets": {
              "description": "AWS Organizations accounts to which StackSets deploys. StackSets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. Drift detection is not possible for this argument. See deployment_targets below.",
              "properties": {
                "accountFilterType": {
                  "description": "Limit deployment targets to individual accounts or include additional accounts with provided OUs. Valid values: INTERSECTION, DIFFERENCE, UNION, NONE.",
                  "type": "string"
                },
                "accounts": {
                  "description": "List of accounts to deploy stack set updates.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                },
                "accountsUrl": {
                  "description": "S3 URL of the file containing the list of accounts.",
                  "type": "string"
                },
                "organizationalUnitIds": {
                  "description": "Organization root ID or organizational unit (OU) IDs to which StackSets deploys.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "operationPreferences": {
              "description": "Preferences for how AWS CloudFormation performs a stack set operation.",
              "properties": {
                "concurrencyMode": {
                  "description": "Specifies how the concurrency level behaves during the operation execution. Valid values are STRICT_FAILURE_TOLERANCE and SOFT_FAILURE_TOLERANCE.",
                  "type": "string"
                },
                "failureToleranceCount": {
                  "description": "Number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.",
                  "type": "number"
                },
                "failureTolerancePercentage": {
                  "description": "Percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.",
                  "type": "number"
                },
                "maxConcurrentCount": {
                  "description": "Maximum number of accounts in which to perform this operation at one time.",
                  "type": "number"
                },
                "maxConcurrentPercentage": {
                  "description": "Maximum percentage of accounts in which to perform this operation at one time.",
                  "type": "number"
                },
                "regionConcurrencyType": {
                  "description": "Concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time. Valid values are SEQUENTIAL and PARALLEL.",
                  "type": "string"
                },
                "regionOrder": {
                  "description": "Order of the Regions in where you want to perform the stack operation.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "parameterOverrides": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of input parameters to override from the StackSet for this Instance.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "region": {
              "description": "Target AWS Region to create a Stack based on the StackSet. Defaults to current region.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "retainStack": {
              "description": "You cannot reassociate a retained Stack or add an existing, saved Stack to a new StackSet. Defaults to false.",
              "type": "boolean"
            },
            "stackSetName": {
              "description": "Name of the StackSet.",
              "type": "string"
            },
            "stackSetNameRef": {
              "description": "Reference to a StackSet in cloudformation to populate stackSetName.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "stackSetNameSelector": {
              "description": "Selector for a StackSet in cloudformation to populate stackSetName.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "properties": {
            "accountId": {
              "description": "Target AWS Account ID to create a Stack based on the StackSet. Defaults to current account.",
              "type": "string"
            },
            "callAs": {
              "description": "Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. Valid values: SELF (default), DELEGATED_ADMIN.",
              "type": "string"
            },
            "deploymentTargets": {
              "description": "AWS Organizations accounts to which StackSets deploys. StackSets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. Drift detection is not possible for this argument. See deployment_targets below.",
              "properties": {
                "accountFilterType": {
                  "description": "Limit deployment targets to individual accounts or include additional accounts with provided OUs. Valid values: INTERSECTION, DIFFERENCE, UNION, NONE.",
                  "type": "string"
                },
                "accounts": {
                  "description": "List of accounts to deploy stack set updates.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                },
                "accountsUrl": {
                  "description": "S3 URL of the file containing the list of accounts.",
                  "type": "string"
                },
                "organizationalUnitIds": {
                  "description": "Organization root ID or organizational unit (OU) IDs to which StackSets deploys.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "operationPreferences": {
              "description": "Preferences for how AWS CloudFormation performs a stack set operation.",
              "properties": {
                "concurrencyMode": {
                  "description": "Specifies how the concurrency level behaves during the operation execution. Valid values are STRICT_FAILURE_TOLERANCE and SOFT_FAILURE_TOLERANCE.",
                  "type": "string"
                },
                "failureToleranceCount": {
                  "description": "Number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.",
                  "type": "number"
                },
                "failureTolerancePercentage": {
                  "description": "Percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.",
                  "type": "number"
                },
                "maxConcurrentCount": {
                  "description": "Maximum number of accounts in which to perform this operation at one time.",
                  "type": "number"
                },
                "maxConcurrentPercentage": {
                  "description": "Maximum percentage of accounts in which to perform this operation at one time.",
                  "type": "number"
                },
                "regionConcurrencyType": {
                  "description": "Concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time. Valid values are SEQUENTIAL and PARALLEL.",
                  "type": "string"
                },
                "regionOrder": {
                  "description": "Order of the Regions in where you want to perform the stack operation.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "parameterOverrides": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of input parameters to override from the StackSet for this Instance.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "retainStack": {
              "description": "You cannot reassociate a retained Stack or add an existing, saved Stack to a new StackSet. Defaults to false.",
              "type": "boolean"
            },
            "stackSetName": {
              "description": "Name of the StackSet.",
              "type": "string"
            },
            "stackSetNameRef": {
              "description": "Reference to a StackSet in cloudformation to populate stackSetName.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "stackSetNameSelector": {
              "description": "Selector for a StackSet in cloudformation to populate stackSetName.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which\ncontains a name, metadata and a reference to secret store config to\nwhich any connection details for this managed resource should be written.\nConnection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used\nfor this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.annotations\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.labels\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret.\n- Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.\nThis field is planned to be replaced in a future release in favor of\nPublishConnectionDetailsTo. Currently, both could be set independently\nand connection details would be published to both without affecting\neach other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "StackSetInstanceStatus defines the observed state of StackSetInstance.",
      "properties": {
        "atProvider": {
          "properties": {
            "accountId": {
              "description": "Target AWS Account ID to create a Stack based on the StackSet. Defaults to current account.",
              "type": "string"
            },
            "callAs": {
              "description": "Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. Valid values: SELF (default), DELEGATED_ADMIN.",
              "type": "string"
            },
            "deploymentTargets": {
              "description": "AWS Organizations accounts to which StackSets deploys. StackSets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. Drift detection is not possible for this argument. See deployment_targets below.",
              "properties": {
                "accountFilterType": {
                  "description": "Limit deployment targets to individual accounts or include additional accounts with provided OUs. Valid values: INTERSECTION, DIFFERENCE, UNION, NONE.",
                  "type": "string"
                },
                "accounts": {
                  "description": "List of accounts to deploy stack set updates.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                },
                "accountsUrl": {
                  "description": "S3 URL of the file containing the list of accounts.",
                  "type": "string"
                },
                "organizationalUnitIds": {
                  "description": "Organization root ID or organizational unit (OU) IDs to which StackSets deploys.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "id": {
              "description": "Unique identifier for the resource. If deployment_targets is set, this is a comma-delimited string combining stack set name, organizational unit IDs (/-delimited), and region (ie. mystack,ou-123/ou-456,us-east-1). Otherwise, this is a comma-delimited string combining stack set name, AWS account ID, and region (ie. mystack,123456789012,us-east-1).",
              "type": "string"
            },
            "operationPreferences": {
              "description": "Preferences for how AWS CloudFormation performs a stack set operation.",
              "properties": {
                "concurrencyMode": {
                  "description": "Specifies how the concurrency level behaves during the operation execution. Valid values are STRICT_FAILURE_TOLERANCE and SOFT_FAILURE_TOLERANCE.",
                  "type": "string"
                },
                "failureToleranceCount": {
                  "description": "Number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.",
                  "type": "number"
                },
                "failureTolerancePercentage": {
                  "description": "Percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.",
                  "type": "number"
                },
                "maxConcurrentCount": {
                  "description": "Maximum number of accounts in which to perform this operation at one time.",
                  "type": "number"
                },
                "maxConcurrentPercentage": {
                  "description": "Maximum percentage of accounts in which to perform this operation at one time.",
                  "type": "number"
                },
                "regionConcurrencyType": {
                  "description": "Concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time. Valid values are SEQUENTIAL and PARALLEL.",
                  "type": "string"
                },
                "regionOrder": {
                  "description": "Order of the Regions in where you want to perform the stack operation.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "organizationalUnitId": {
              "description": "Organization root ID or organizational unit (OU) ID in which the stack is deployed.",
              "type": "string"
            },
            "parameterOverrides": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of input parameters to override from the StackSet for this Instance.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "retainStack": {
              "description": "You cannot reassociate a retained Stack or add an existing, saved Stack to a new StackSet. Defaults to false.",
              "type": "boolean"
            },
            "stackId": {
              "description": "Stack identifier.",
              "type": "string"
            },
            "stackInstanceSummaries": {
              "description": "List of stack instances created from an organizational unit deployment target. This will only be populated when deployment_targets is set. See stack_instance_summaries.\nList of stack instances created from an organizational unit deployment target. This will only be populated when `deployment_targets` is set.",
              "items": {
                "properties": {
                  "accountId": {
                    "description": "Target AWS Account ID to create a Stack based on the StackSet. Defaults to current account.",
                    "type": "string"
                  },
                  "organizationalUnitId": {
                    "description": "Organization root ID or organizational unit (OU) ID in which the stack is deployed.",
                    "type": "string"
                  },
                  "stackId": {
                    "description": "Stack identifier.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "stackSetName": {
              "description": "Name of the StackSet.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
