{
  "description": "Database is the Schema for the databases API. It is used to define a logical database as if you were running a 'CREATE DATABASE' statement.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "DatabaseSpec defines the desired state of Database",
      "properties": {
        "characterSet": {
          "default": "utf8",
          "description": "CharacterSet to use in the Database.",
          "type": "string"
        },
        "cleanupPolicy": {
          "description": "CleanupPolicy defines the behavior for cleaning up a SQL resource.",
          "enum": [
            "Skip",
            "Delete"
          ],
          "type": "string"
        },
        "collate": {
          "default": "utf8_general_ci",
          "description": "Collate to use in the Database.",
          "type": "string"
        },
        "mariaDbRef": {
          "description": "MariaDBRef is a reference to a MariaDB object.",
          "properties": {
            "name": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "waitForIt": {
              "default": true,
              "description": "WaitForIt indicates whether the controller using this reference should wait for MariaDB to be ready.",
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "name": {
          "description": "Name overrides the default Database name provided by metadata.name.",
          "maxLength": 80,
          "type": "string"
        },
        "requeueInterval": {
          "description": "RequeueInterval is used to perform requeue reconciliations.",
          "type": "string"
        },
        "retryInterval": {
          "description": "RetryInterval is the interval used to perform retries.",
          "type": "string"
        }
      },
      "required": [
        "mariaDbRef"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "DatabaseStatus defines the observed state of Database",
      "properties": {
        "conditions": {
          "description": "Conditions for the Database object.",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
