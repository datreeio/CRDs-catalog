{
  "description": "A Certificate resource should be created to ensure an up to date and signed\nX.509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`.\n\nThe stored certificate will be renewed before it expires (as configured by `spec.renewBefore`).",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "Specification of the desired state of the Certificate resource.\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
      "properties": {
        "additionalOutputFormats": {
          "description": "Defines extra output formats of the private key and signed certificate chain\nto be written to this Certificate's target Secret.\n\nThis is a Beta Feature enabled by default. It can be disabled with the\n`--feature-gates=AdditionalCertificateOutputFormats=false` option set on both\nthe controller and webhook components.",
          "items": {
            "description": "CertificateAdditionalOutputFormat defines an additional output format of a\nCertificate resource. These contain supplementary data formats of the signed\ncertificate chain and paired private key.",
            "properties": {
              "type": {
                "description": "Type is the name of the format type that should be written to the\nCertificate's target Secret.",
                "enum": [
                  "DER",
                  "CombinedPEM"
                ],
                "type": "string"
              }
            },
            "required": [
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "commonName": {
          "description": "Requested common name X509 certificate subject attribute.\nMore info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6\nNOTE: TLS clients will ignore this value when any subject alternative name is\nset (see https://tools.ietf.org/html/rfc6125#section-6.4.4).\n\nShould have a length of 64 characters or fewer to avoid generating invalid CSRs.\nCannot be set if the `literalSubject` field is set.",
          "type": "string"
        },
        "dnsNames": {
          "description": "Requested DNS subject alternative names.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "duration": {
          "description": "Requested 'duration' (i.e. lifetime) of the Certificate. Note that the\nissuer may choose to ignore the requested duration, just like any other\nrequested attribute.\n\nIf unset, this defaults to 90 days.\nMinimum accepted duration is 1 hour.\nValue must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.",
          "type": "string"
        },
        "emailAddresses": {
          "description": "Requested email subject alternative names.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "encodeUsagesInRequest": {
          "description": "Whether the KeyUsage and ExtKeyUsage extensions should be set in the encoded CSR.\n\nThis option defaults to true, and should only be disabled if the target\nissuer does not support CSRs with these X509 KeyUsage/ ExtKeyUsage extensions.",
          "type": "boolean"
        },
        "ipAddresses": {
          "description": "Requested IP address subject alternative names.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isCA": {
          "description": "Requested basic constraints isCA value.\nThe isCA value is used to set the `isCA` field on the created CertificateRequest\nresources. Note that the issuer may choose to ignore the requested isCA value, just\nlike any other requested attribute.\n\nIf true, this will automatically add the `cert sign` usage to the list\nof requested `usages`.",
          "type": "boolean"
        },
        "issuerRef": {
          "description": "Reference to the issuer responsible for issuing the certificate.\nIf the issuer is namespace-scoped, it must be in the same namespace\nas the Certificate. If the issuer is cluster-scoped, it can be used\nfrom any namespace.\n\nThe `name` field of the reference must always be specified.",
          "properties": {
            "group": {
              "description": "Group of the resource being referred to.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the resource being referred to.",
              "type": "string"
            },
            "name": {
              "description": "Name of the resource being referred to.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "keystores": {
          "description": "Additional keystore output formats to be stored in the Certificate's Secret.",
          "properties": {
            "jks": {
              "description": "JKS configures options for storing a JKS keystore in the\n`spec.secretName` Secret resource.",
              "properties": {
                "alias": {
                  "description": "Alias specifies the alias of the key in the keystore, required by the JKS format.\nIf not provided, the default alias `certificate` will be used.",
                  "type": "string"
                },
                "create": {
                  "description": "Create enables JKS keystore creation for the Certificate.\nIf true, a file named `keystore.jks` will be created in the target\nSecret resource, encrypted using the password stored in\n`passwordSecretRef`.\nThe keystore file will be updated immediately.\nIf the issuer provided a CA certificate, a file named `truststore.jks`\nwill also be created in the target Secret resource, encrypted using the\npassword stored in `passwordSecretRef`\ncontaining the issuing Certificate Authority",
                  "type": "boolean"
                },
                "passwordSecretRef": {
                  "description": "PasswordSecretRef is a reference to a key in a Secret resource\ncontaining the password used to encrypt the JKS keystore.",
                  "properties": {
                    "key": {
                      "description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "create",
                "passwordSecretRef"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "pkcs12": {
              "description": "PKCS12 configures options for storing a PKCS12 keystore in the\n`spec.secretName` Secret resource.",
              "properties": {
                "create": {
                  "description": "Create enables PKCS12 keystore creation for the Certificate.\nIf true, a file named `keystore.p12` will be created in the target\nSecret resource, encrypted using the password stored in\n`passwordSecretRef`.\nThe keystore file will be updated immediately.\nIf the issuer provided a CA certificate, a file named `truststore.p12` will\nalso be created in the target Secret resource, encrypted using the\npassword stored in `passwordSecretRef` containing the issuing Certificate\nAuthority",
                  "type": "boolean"
                },
                "passwordSecretRef": {
                  "description": "PasswordSecretRef is a reference to a key in a Secret resource\ncontaining the password used to encrypt the PKCS12 keystore.",
                  "properties": {
                    "key": {
                      "description": "The key of the entry in the Secret resource's `data` field to be used.\nSome instances of this field may be defaulted, in others it may be\nrequired.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the resource being referred to.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "profile": {
                  "description": "Profile specifies the key and certificate encryption algorithms and the HMAC algorithm\nused to create the PKCS12 keystore. Default value is `LegacyRC2` for backward compatibility.\n\nIf provided, allowed values are:\n`LegacyRC2`: Deprecated. Not supported by default in OpenSSL 3 or Java 20.\n`LegacyDES`: Less secure algorithm. Use this option for maximal compatibility.\n`Modern2023`: Secure algorithm. Use this option in case you have to always use secure algorithms\n(eg. because of company policy). Please note that the security of the algorithm is not that important\nin reality, because the unencrypted certificate and private key are also stored in the Secret.",
                  "enum": [
                    "LegacyRC2",
                    "LegacyDES",
                    "Modern2023"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "create",
                "passwordSecretRef"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "literalSubject": {
          "description": "Requested X.509 certificate subject, represented using the LDAP \"String\nRepresentation of a Distinguished Name\" [1].\nImportant: the LDAP string format also specifies the order of the attributes\nin the subject, this is important when issuing certs for LDAP authentication.\nExample: `CN=foo,DC=corp,DC=example,DC=com`\nMore info [1]: https://datatracker.ietf.org/doc/html/rfc4514\nMore info: https://github.com/cert-manager/cert-manager/issues/3203\nMore info: https://github.com/cert-manager/cert-manager/issues/4424\n\nCannot be set if the `subject` or `commonName` field is set.",
          "type": "string"
        },
        "nameConstraints": {
          "description": "x.509 certificate NameConstraint extension which MUST NOT be used in a non-CA certificate.\nMore Info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.10\n\nThis is an Alpha Feature and is only enabled with the\n`--feature-gates=NameConstraints=true` option set on both\nthe controller and webhook components.",
          "properties": {
            "critical": {
              "description": "if true then the name constraints are marked critical.",
              "type": "boolean"
            },
            "excluded": {
              "description": "Excluded contains the constraints which must be disallowed. Any name matching a\nrestriction in the excluded field is invalid regardless\nof information appearing in the permitted",
              "properties": {
                "dnsDomains": {
                  "description": "DNSDomains is a list of DNS domains that are permitted or excluded.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "emailAddresses": {
                  "description": "EmailAddresses is a list of Email Addresses that are permitted or excluded.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "ipRanges": {
                  "description": "IPRanges is a list of IP Ranges that are permitted or excluded.\nThis should be a valid CIDR notation.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "uriDomains": {
                  "description": "URIDomains is a list of URI domains that are permitted or excluded.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "permitted": {
              "description": "Permitted contains the constraints in which the names must be located.",
              "properties": {
                "dnsDomains": {
                  "description": "DNSDomains is a list of DNS domains that are permitted or excluded.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "emailAddresses": {
                  "description": "EmailAddresses is a list of Email Addresses that are permitted or excluded.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "ipRanges": {
                  "description": "IPRanges is a list of IP Ranges that are permitted or excluded.\nThis should be a valid CIDR notation.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "uriDomains": {
                  "description": "URIDomains is a list of URI domains that are permitted or excluded.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "otherNames": {
          "description": "`otherNames` is an escape hatch for SAN that allows any type. We currently restrict the support to string like otherNames, cf RFC 5280 p 37\nAny UTF8 String valued otherName can be passed with by setting the keys oid: x.x.x.x and UTF8Value: somevalue for `otherName`.\nMost commonly this would be UPN set with oid: 1.3.6.1.4.1.311.20.2.3\nYou should ensure that any OID passed is valid for the UTF8String type as we do not explicitly validate this.",
          "items": {
            "properties": {
              "oid": {
                "description": "OID is the object identifier for the otherName SAN.\nThe object identifier must be expressed as a dotted string, for\nexample, \"1.2.840.113556.1.4.221\".",
                "type": "string"
              },
              "utf8Value": {
                "description": "utf8Value is the string value of the otherName SAN.\nThe utf8Value accepts any valid UTF8 string to set as value for the otherName SAN.",
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "privateKey": {
          "description": "Private key options. These include the key algorithm and size, the used\nencoding and the rotation policy.",
          "properties": {
            "algorithm": {
              "description": "Algorithm is the private key algorithm of the corresponding private key\nfor this certificate.\n\nIf provided, allowed values are either `RSA`, `ECDSA` or `Ed25519`.\nIf `algorithm` is specified and `size` is not provided,\nkey size of 2048 will be used for `RSA` key algorithm and\nkey size of 256 will be used for `ECDSA` key algorithm.\nkey size is ignored when using the `Ed25519` key algorithm.",
              "enum": [
                "RSA",
                "ECDSA",
                "Ed25519"
              ],
              "type": "string"
            },
            "encoding": {
              "description": "The private key cryptography standards (PKCS) encoding for this\ncertificate's private key to be encoded in.\n\nIf provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1\nand PKCS#8, respectively.\nDefaults to `PKCS1` if not specified.",
              "enum": [
                "PKCS1",
                "PKCS8"
              ],
              "type": "string"
            },
            "rotationPolicy": {
              "description": "RotationPolicy controls how private keys should be regenerated when a\nre-issuance is being processed.\n\nIf set to `Never`, a private key will only be generated if one does not\nalready exist in the target `spec.secretName`. If one does exist but it\ndoes not have the correct algorithm or size, a warning will be raised\nto await user intervention.\nIf set to `Always`, a private key matching the specified requirements\nwill be generated whenever a re-issuance occurs.\nDefault is `Never` for backward compatibility.",
              "enum": [
                "Never",
                "Always"
              ],
              "type": "string"
            },
            "size": {
              "description": "Size is the key bit size of the corresponding private key for this certificate.\n\nIf `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`,\nand will default to `2048` if not specified.\nIf `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`,\nand will default to `256` if not specified.\nIf `algorithm` is set to `Ed25519`, Size is ignored.\nNo other values are allowed.",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "renewBefore": {
          "description": "How long before the currently issued certificate's expiry cert-manager should\nrenew the certificate. For example, if a certificate is valid for 60 minutes,\nand `renewBefore=10m`, cert-manager will begin to attempt to renew the certificate\n50 minutes after it was issued (i.e. when there are 10 minutes remaining until\nthe certificate is no longer valid).\n\nNOTE: The actual lifetime of the issued certificate is used to determine the\nrenewal time. If an issuer returns a certificate with a different lifetime than\nthe one requested, cert-manager will use the lifetime of the issued certificate.\n\nIf unset, this defaults to 1/3 of the issued certificate's lifetime.\nMinimum accepted value is 5 minutes.\nValue must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.\nCannot be set if the `renewBeforePercentage` field is set.",
          "type": "string"
        },
        "renewBeforePercentage": {
          "description": "`renewBeforePercentage` is like `renewBefore`, except it is a relative percentage\nrather than an absolute duration. For example, if a certificate is valid for 60\nminutes, and  `renewBeforePercentage=25`, cert-manager will begin to attempt to\nrenew the certificate 45 minutes after it was issued (i.e. when there are 15\nminutes (25%) remaining until the certificate is no longer valid).\n\nNOTE: The actual lifetime of the issued certificate is used to determine the\nrenewal time. If an issuer returns a certificate with a different lifetime than\nthe one requested, cert-manager will use the lifetime of the issued certificate.\n\nValue must be an integer in the range (0,100). The minimum effective\n`renewBefore` derived from the `renewBeforePercentage` and `duration` fields is 5\nminutes.\nCannot be set if the `renewBefore` field is set.",
          "format": "int32",
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "description": "The maximum number of CertificateRequest revisions that are maintained in\nthe Certificate's history. Each revision represents a single `CertificateRequest`\ncreated by this Certificate, either when it was created, renewed, or Spec\nwas changed. Revisions will be removed by oldest first if the number of\nrevisions exceeds this number.\n\nIf set, revisionHistoryLimit must be a value of `1` or greater.\nIf unset (`nil`), revisions will not be garbage collected.\nDefault value is `nil`.",
          "format": "int32",
          "type": "integer"
        },
        "secretName": {
          "description": "Name of the Secret resource that will be automatically created and\nmanaged by this Certificate resource. It will be populated with a\nprivate key and certificate, signed by the denoted issuer. The Secret\nresource lives in the same namespace as the Certificate resource.",
          "type": "string"
        },
        "secretTemplate": {
          "description": "Defines annotations and labels to be copied to the Certificate's Secret.\nLabels and annotations on the Secret will be changed as they appear on the\nSecretTemplate when added or removed. SecretTemplate annotations are added\nin conjunction with, and cannot overwrite, the base set of annotations\ncert-manager sets on the Certificate's Secret.",
          "properties": {
            "annotations": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Annotations is a key value map to be copied to the target Kubernetes Secret.",
              "type": "object"
            },
            "labels": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Labels is a key value map to be copied to the target Kubernetes Secret.",
              "type": "object"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "subject": {
          "description": "Requested set of X509 certificate subject attributes.\nMore info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6\n\nThe common name attribute is specified separately in the `commonName` field.\nCannot be set if the `literalSubject` field is set.",
          "properties": {
            "countries": {
              "description": "Countries to be used on the Certificate.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "localities": {
              "description": "Cities to be used on the Certificate.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "organizationalUnits": {
              "description": "Organizational Units to be used on the Certificate.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "organizations": {
              "description": "Organizations to be used on the Certificate.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "postalCodes": {
              "description": "Postal codes to be used on the Certificate.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "provinces": {
              "description": "State/Provinces to be used on the Certificate.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "serialNumber": {
              "description": "Serial number to be used on the Certificate.",
              "type": "string"
            },
            "streetAddresses": {
              "description": "Street addresses to be used on the Certificate.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "uris": {
          "description": "Requested URI subject alternative names.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "usages": {
          "description": "Requested key usages and extended key usages.\nThese usages are used to set the `usages` field on the created CertificateRequest\nresources. If `encodeUsagesInRequest` is unset or set to `true`, the usages\nwill additionally be encoded in the `request` field which contains the CSR blob.\n\nIf unset, defaults to `digital signature` and `key encipherment`.",
          "items": {
            "description": "KeyUsage specifies valid usage contexts for keys.\nSee:\nhttps://tools.ietf.org/html/rfc5280#section-4.2.1.3\nhttps://tools.ietf.org/html/rfc5280#section-4.2.1.12\n\nValid KeyUsage values are as follows:\n\"signing\",\n\"digital signature\",\n\"content commitment\",\n\"key encipherment\",\n\"key agreement\",\n\"data encipherment\",\n\"cert sign\",\n\"crl sign\",\n\"encipher only\",\n\"decipher only\",\n\"any\",\n\"server auth\",\n\"client auth\",\n\"code signing\",\n\"email protection\",\n\"s/mime\",\n\"ipsec end system\",\n\"ipsec tunnel\",\n\"ipsec user\",\n\"timestamping\",\n\"ocsp signing\",\n\"microsoft sgc\",\n\"netscape sgc\"",
            "enum": [
              "signing",
              "digital signature",
              "content commitment",
              "key encipherment",
              "key agreement",
              "data encipherment",
              "cert sign",
              "crl sign",
              "encipher only",
              "decipher only",
              "any",
              "server auth",
              "client auth",
              "code signing",
              "email protection",
              "s/mime",
              "ipsec end system",
              "ipsec tunnel",
              "ipsec user",
              "timestamping",
              "ocsp signing",
              "microsoft sgc",
              "netscape sgc"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "issuerRef",
        "secretName"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "Status of the Certificate.\nThis is set and managed automatically.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
      "properties": {
        "conditions": {
          "description": "List of status conditions to indicate the status of certificates.\nKnown condition types are `Ready` and `Issuing`.",
          "items": {
            "description": "CertificateCondition contains condition information for a Certificate.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the timestamp corresponding to the last status\nchange of this condition.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "Message is a human readable description of the details of the last\ntransition, complementing reason.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "If set, this represents the .metadata.generation that the condition was\nset based upon.\nFor instance, if .metadata.generation is currently 12, but the\n.status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the Certificate.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "Reason is a brief machine readable explanation for the condition's last\ntransition.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of (`True`, `False`, `Unknown`).",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "Type of the condition, known values are (`Ready`, `Issuing`).",
                "type": "string"
              }
            },
            "required": [
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "failedIssuanceAttempts": {
          "description": "The number of continuous failed issuance attempts up till now. This\nfield gets removed (if set) on a successful issuance and gets set to\n1 if unset and an issuance has failed. If an issuance has failed, the\ndelay till the next issuance will be calculated using formula\ntime.Hour * 2 ^ (failedIssuanceAttempts - 1).",
          "type": "integer"
        },
        "lastFailureTime": {
          "description": "LastFailureTime is set only if the latest issuance for this\nCertificate failed and contains the time of the failure. If an\nissuance has failed, the delay till the next issuance will be\ncalculated using formula time.Hour * 2 ^ (failedIssuanceAttempts -\n1). If the latest issuance has succeeded this field will be unset.",
          "format": "date-time",
          "type": "string"
        },
        "nextPrivateKeySecretName": {
          "description": "The name of the Secret resource containing the private key to be used\nfor the next certificate iteration.\nThe keymanager controller will automatically set this field if the\n`Issuing` condition is set to `True`.\nIt will automatically unset this field when the Issuing condition is\nnot set or False.",
          "type": "string"
        },
        "notAfter": {
          "description": "The expiration time of the certificate stored in the secret named\nby this resource in `spec.secretName`.",
          "format": "date-time",
          "type": "string"
        },
        "notBefore": {
          "description": "The time after which the certificate stored in the secret named\nby this resource in `spec.secretName` is valid.",
          "format": "date-time",
          "type": "string"
        },
        "renewalTime": {
          "description": "RenewalTime is the time at which the certificate will be next\nrenewed.\nIf not set, no upcoming renewal is scheduled.",
          "format": "date-time",
          "type": "string"
        },
        "revision": {
          "description": "The current 'revision' of the certificate as issued.\n\nWhen a CertificateRequest resource is created, it will have the\n`cert-manager.io/certificate-revision` set to one greater than the\ncurrent value of this field.\n\nUpon issuance, this field will be set to the value of the annotation\non the CertificateRequest resource used to issue the certificate.\n\nPersisting the value on the CertificateRequest resource allows the\ncertificates controller to know whether a request is part of an old\nissuance or if it is part of the ongoing revision's issuance by\nchecking if the revision value in the annotation is greater than this\nfield.",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
