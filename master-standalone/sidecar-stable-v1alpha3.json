{
  "properties": {
    "spec": {
      "description": "Configuration affecting network reachability of a sidecar. See more details at: https://istio.io/docs/reference/config/networking/sidecar.html",
      "properties": {
        "egress": {
          "description": "Egress specifies the configuration of the sidecar for processing outbound traffic from the attached workload instance to other services in the mesh.",
          "items": {
            "properties": {
              "bind": {
                "description": "The IP(IPv4 or IPv6) or the Unix domain socket to which the listener should be bound to.",
                "type": "string"
              },
              "captureMode": {
                "description": "When the bind address is an IP, the captureMode option dictates how traffic to the listener is expected to be captured (or not).",
                "enum": [
                  "DEFAULT",
                  "IPTABLES",
                  "NONE"
                ],
                "type": "string"
              },
              "hosts": {
                "description": "One or more service hosts exposed by the listener in `namespace/dnsName` format.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "port": {
                "description": "The port associated with the listener.",
                "properties": {
                  "name": {
                    "description": "Label assigned to the port.",
                    "type": "string"
                  },
                  "number": {
                    "description": "A valid non-negative integer port number.",
                    "type": "integer"
                  },
                  "protocol": {
                    "description": "The protocol exposed on the port.",
                    "type": "string"
                  },
                  "targetPort": {
                    "type": "integer"
                  }
                },
                "type": "object",
                "additionalProperties": false
              }
            },
            "required": [
              "hosts"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "inboundConnectionPool": {
          "description": "Settings controlling the volume of connections Envoy will accept from the network.",
          "properties": {
            "http": {
              "description": "HTTP connection pool settings.",
              "properties": {
                "h2UpgradePolicy": {
                  "description": "Specify if http1.1 connection should be upgraded to http2 for the associated destination.",
                  "enum": [
                    "DEFAULT",
                    "DO_NOT_UPGRADE",
                    "UPGRADE"
                  ],
                  "type": "string"
                },
                "http1MaxPendingRequests": {
                  "description": "Maximum number of requests that will be queued while waiting for a ready connection pool connection.",
                  "format": "int32",
                  "type": "integer"
                },
                "http2MaxRequests": {
                  "description": "Maximum number of active requests to a destination.",
                  "format": "int32",
                  "type": "integer"
                },
                "idleTimeout": {
                  "description": "The idle timeout for upstream connection pool connections.",
                  "type": "string"
                },
                "maxConcurrentStreams": {
                  "description": "The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.",
                  "format": "int32",
                  "type": "integer"
                },
                "maxRequestsPerConnection": {
                  "description": "Maximum number of requests per connection to a backend.",
                  "format": "int32",
                  "type": "integer"
                },
                "maxRetries": {
                  "description": "Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.",
                  "format": "int32",
                  "type": "integer"
                },
                "useClientProtocol": {
                  "description": "If set to true, client protocol will be preserved while initiating connection to backend.",
                  "type": "boolean"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "tcp": {
              "description": "Settings common to both HTTP and TCP upstream connections.",
              "properties": {
                "connectTimeout": {
                  "description": "TCP connection timeout.",
                  "type": "string"
                },
                "idleTimeout": {
                  "description": "The idle timeout for TCP connections.",
                  "type": "string"
                },
                "maxConnectionDuration": {
                  "description": "The maximum duration of a connection.",
                  "type": "string"
                },
                "maxConnections": {
                  "description": "Maximum number of HTTP1 /TCP connections to a destination host.",
                  "format": "int32",
                  "type": "integer"
                },
                "tcpKeepalive": {
                  "description": "If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.",
                  "properties": {
                    "interval": {
                      "description": "The time duration between keep-alive probes.",
                      "type": "string"
                    },
                    "probes": {
                      "description": "Maximum number of keepalive probes to send without response before deciding the connection is dead.",
                      "type": "integer"
                    },
                    "time": {
                      "description": "The time duration a connection needs to be idle before keep-alive probes start being sent.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "ingress": {
          "description": "Ingress specifies the configuration of the sidecar for processing inbound traffic to the attached workload instance.",
          "items": {
            "properties": {
              "bind": {
                "description": "The IP(IPv4 or IPv6) to which the listener should be bound.",
                "type": "string"
              },
              "captureMode": {
                "description": "The captureMode option dictates how traffic to the listener is expected to be captured (or not).",
                "enum": [
                  "DEFAULT",
                  "IPTABLES",
                  "NONE"
                ],
                "type": "string"
              },
              "connectionPool": {
                "description": "Settings controlling the volume of connections Envoy will accept from the network.",
                "properties": {
                  "http": {
                    "description": "HTTP connection pool settings.",
                    "properties": {
                      "h2UpgradePolicy": {
                        "description": "Specify if http1.1 connection should be upgraded to http2 for the associated destination.",
                        "enum": [
                          "DEFAULT",
                          "DO_NOT_UPGRADE",
                          "UPGRADE"
                        ],
                        "type": "string"
                      },
                      "http1MaxPendingRequests": {
                        "description": "Maximum number of requests that will be queued while waiting for a ready connection pool connection.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "http2MaxRequests": {
                        "description": "Maximum number of active requests to a destination.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "idleTimeout": {
                        "description": "The idle timeout for upstream connection pool connections.",
                        "type": "string"
                      },
                      "maxConcurrentStreams": {
                        "description": "The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "maxRequestsPerConnection": {
                        "description": "Maximum number of requests per connection to a backend.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "maxRetries": {
                        "description": "Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "useClientProtocol": {
                        "description": "If set to true, client protocol will be preserved while initiating connection to backend.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "tcp": {
                    "description": "Settings common to both HTTP and TCP upstream connections.",
                    "properties": {
                      "connectTimeout": {
                        "description": "TCP connection timeout.",
                        "type": "string"
                      },
                      "idleTimeout": {
                        "description": "The idle timeout for TCP connections.",
                        "type": "string"
                      },
                      "maxConnectionDuration": {
                        "description": "The maximum duration of a connection.",
                        "type": "string"
                      },
                      "maxConnections": {
                        "description": "Maximum number of HTTP1 /TCP connections to a destination host.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "tcpKeepalive": {
                        "description": "If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.",
                        "properties": {
                          "interval": {
                            "description": "The time duration between keep-alive probes.",
                            "type": "string"
                          },
                          "probes": {
                            "description": "Maximum number of keepalive probes to send without response before deciding the connection is dead.",
                            "type": "integer"
                          },
                          "time": {
                            "description": "The time duration a connection needs to be idle before keep-alive probes start being sent.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "defaultEndpoint": {
                "description": "The IP endpoint or Unix domain socket to which traffic should be forwarded to.",
                "type": "string"
              },
              "port": {
                "description": "The port associated with the listener.",
                "properties": {
                  "name": {
                    "description": "Label assigned to the port.",
                    "type": "string"
                  },
                  "number": {
                    "description": "A valid non-negative integer port number.",
                    "type": "integer"
                  },
                  "protocol": {
                    "description": "The protocol exposed on the port.",
                    "type": "string"
                  },
                  "targetPort": {
                    "type": "integer"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "tls": {
                "description": "Set of TLS related options that will enable TLS termination on the sidecar for requests originating from outside the mesh.",
                "properties": {
                  "caCertificates": {
                    "description": "REQUIRED if mode is `MUTUAL` or `OPTIONAL_MUTUAL`.",
                    "type": "string"
                  },
                  "cipherSuites": {
                    "description": "Optional: If specified, only support the specified cipher list.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "credentialName": {
                    "description": "For gateways running on Kubernetes, the name of the secret that holds the TLS certs including the CA certificates.",
                    "type": "string"
                  },
                  "httpsRedirect": {
                    "description": "If set to true, the load balancer will send a 301 redirect for all http connections, asking the clients to use HTTPS.",
                    "type": "boolean"
                  },
                  "maxProtocolVersion": {
                    "description": "Optional: Maximum TLS protocol version.",
                    "enum": [
                      "TLS_AUTO",
                      "TLSV1_0",
                      "TLSV1_1",
                      "TLSV1_2",
                      "TLSV1_3"
                    ],
                    "type": "string"
                  },
                  "minProtocolVersion": {
                    "description": "Optional: Minimum TLS protocol version.",
                    "enum": [
                      "TLS_AUTO",
                      "TLSV1_0",
                      "TLSV1_1",
                      "TLSV1_2",
                      "TLSV1_3"
                    ],
                    "type": "string"
                  },
                  "mode": {
                    "description": "Optional: Indicates whether connections to this port should be secured using TLS.",
                    "enum": [
                      "PASSTHROUGH",
                      "SIMPLE",
                      "MUTUAL",
                      "AUTO_PASSTHROUGH",
                      "ISTIO_MUTUAL",
                      "OPTIONAL_MUTUAL"
                    ],
                    "type": "string"
                  },
                  "privateKey": {
                    "description": "REQUIRED if mode is `SIMPLE` or `MUTUAL`.",
                    "type": "string"
                  },
                  "serverCertificate": {
                    "description": "REQUIRED if mode is `SIMPLE` or `MUTUAL`.",
                    "type": "string"
                  },
                  "subjectAltNames": {
                    "description": "A list of alternate names to verify the subject identity in the certificate presented by the client.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "verifyCertificateHash": {
                    "description": "An optional list of hex-encoded SHA-256 hashes of the authorized client certificates.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "verifyCertificateSpki": {
                    "description": "An optional list of base64-encoded SHA-256 hashes of the SPKIs of authorized client certificates.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              }
            },
            "required": [
              "port"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "outboundTrafficPolicy": {
          "description": "Configuration for the outbound traffic policy.",
          "properties": {
            "egressProxy": {
              "properties": {
                "host": {
                  "description": "The name of a service from the service registry.",
                  "type": "string"
                },
                "port": {
                  "description": "Specifies the port on the host that is being addressed.",
                  "properties": {
                    "number": {
                      "type": "integer"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "subset": {
                  "description": "The name of a subset within the service.",
                  "type": "string"
                }
              },
              "required": [
                "host"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "mode": {
              "enum": [
                "REGISTRY_ONLY",
                "ALLOW_ANY"
              ],
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "workloadSelector": {
          "description": "Criteria used to select the specific set of pods/VMs on which this `Sidecar` configuration should be applied.",
          "properties": {
            "labels": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "One or more labels that indicate a specific set of pods/VMs on which the configuration should be applied.",
              "type": "object"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "type": "object",
      "x-kubernetes-preserve-unknown-fields": true
    }
  },
  "type": "object"
}
