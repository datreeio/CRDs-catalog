{
  "description": "TemporalCluster defines a temporal cluster deployment.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "Specification of the desired behavior of the Temporal cluster.",
      "properties": {
        "admintools": {
          "description": "AdminTools allows configuration of the optional admin tool pod deployed alongside the cluster.",
          "properties": {
            "enabled": {
              "description": "Enabled defines if the operator should deploy the admin tools alongside the cluster.",
              "type": "boolean"
            },
            "image": {
              "description": "Image defines the temporal admin tools docker image the instance should run.",
              "type": "string"
            },
            "overrides": {
              "description": "Overrides adds some overrides to the resources deployed for the ui.",
              "properties": {
                "deployment": {
                  "description": "Override configuration for the temporal service Deployment.",
                  "properties": {
                    "metadata": {
                      "description": "ObjectMetaOverride provides the ability to override an object metadata. It's a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta.",
                      "properties": {
                        "annotations": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
                          "type": "object"
                        },
                        "labels": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.",
                          "type": "object"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "spec": {
                      "description": "Specification of the desired behavior of the Deployment.",
                      "properties": {
                        "template": {
                          "description": "Template describes the pods that will be created.",
                          "properties": {
                            "metadata": {
                              "description": "ObjectMetaOverride provides the ability to override an object metadata. It's a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta.",
                              "properties": {
                                "annotations": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
                                  "type": "object"
                                },
                                "labels": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.",
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            },
                            "spec": {
                              "description": "Specification of the desired behavior of the pod.",
                              "type": "object",
                              "x-kubernetes-preserve-unknown-fields": true
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "resources": {
              "description": "Compute Resources required by the ui. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "properties": {
                "claims": {
                  "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers.",
                  "items": {
                    "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                    "properties": {
                      "name": {
                        "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array",
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                },
                "limits": {
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  },
                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object"
                },
                "requests": {
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  },
                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "archival": {
          "description": "Archival allows Workflow Execution Event Histories and Visibility data backups for the temporal cluster.",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enabled defines if the archival is enabled for the cluster.",
              "type": "boolean"
            },
            "history": {
              "description": "History is the default config for the history archival.",
              "properties": {
                "enableRead": {
                  "default": false,
                  "description": "EnableRead allows temporal to read from the archived Event History.",
                  "type": "boolean"
                },
                "enabled": {
                  "default": false,
                  "description": "Enabled defines if the archival is enabled by default for all namespaces or for a particular namespace (depends if it's for a TemporalCluster or a TemporalNamespace).",
                  "type": "boolean"
                },
                "path": {
                  "description": "Path is ...",
                  "type": "string"
                },
                "paused": {
                  "default": false,
                  "description": "Paused defines if the archival is paused.",
                  "type": "boolean"
                }
              },
              "required": [
                "enableRead",
                "path",
                "paused"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "provider": {
              "description": "Provider defines the archival provider for the cluster. The same provider is used for both history and visibility, but some config can be changed using spec.archival.[history|visibility].config.",
              "properties": {
                "filestore": {
                  "description": "FilestoreArchiver is the file store archival provider configuration.",
                  "properties": {
                    "dirPermissions": {
                      "default": "0766",
                      "description": "DirPermissions sets the directory permissions of the archive directory. It's recommend to leave it empty and use the default value of \"0766\" to avoid read/write issues.",
                      "type": "string"
                    },
                    "filePermissions": {
                      "default": "0666",
                      "description": "FilePermissions sets the file permissions of the archived files. It's recommend to leave it empty and use the default value of \"0666\" to avoid read/write issues.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "dirPermissions",
                    "filePermissions"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "gcs": {
                  "description": "GCSArchiver is the GCS archival provider configuration.",
                  "properties": {
                    "credentialsRef": {
                      "description": "SecretAccessKeyRef is the secret key selector containing Google Cloud Storage credentials file.",
                      "properties": {
                        "key": {
                          "description": "The key of the secret to select from.  Must be a valid secret key.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                          "type": "string"
                        },
                        "optional": {
                          "description": "Specify whether the Secret or its key must be defined",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "key"
                      ],
                      "type": "object",
                      "x-kubernetes-map-type": "atomic",
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "credentialsRef"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "s3": {
                  "description": "S3Archiver is the S3 archival provider configuration.",
                  "properties": {
                    "credentials": {
                      "description": "Use credentials if you want to use aws credentials from secret.",
                      "properties": {
                        "accessKeyIdRef": {
                          "description": "AccessKeyIDRef is the secret key selector containing AWS access key ID.",
                          "properties": {
                            "key": {
                              "description": "The key of the secret to select from.  Must be a valid secret key.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the Secret or its key must be defined",
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "key"
                          ],
                          "type": "object",
                          "x-kubernetes-map-type": "atomic",
                          "additionalProperties": false
                        },
                        "secretKeyRef": {
                          "description": "SecretAccessKeyRef is the secret key selector containing AWS secret access key.",
                          "properties": {
                            "key": {
                              "description": "The key of the secret to select from.  Must be a valid secret key.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the Secret or its key must be defined",
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "key"
                          ],
                          "type": "object",
                          "x-kubernetes-map-type": "atomic",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "accessKeyIdRef",
                        "secretKeyRef"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "endpoint": {
                      "description": "Use Endpoint if you want to use s3-compatible object storage.",
                      "type": "string"
                    },
                    "region": {
                      "description": "Region is the aws s3 region.",
                      "type": "string"
                    },
                    "roleName": {
                      "description": "Use RoleName if you want the temporal service account to assume an AWS Identity and Access Management (IAM) role.",
                      "type": "string"
                    },
                    "s3ForcePathStyle": {
                      "description": "Use s3ForcePathStyle if you want to use s3 path style.",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "region"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "visibility": {
              "description": "Visibility is the default config for visibility archival.",
              "properties": {
                "enableRead": {
                  "default": false,
                  "description": "EnableRead allows temporal to read from the archived Event History.",
                  "type": "boolean"
                },
                "enabled": {
                  "default": false,
                  "description": "Enabled defines if the archival is enabled by default for all namespaces or for a particular namespace (depends if it's for a TemporalCluster or a TemporalNamespace).",
                  "type": "boolean"
                },
                "path": {
                  "description": "Path is ...",
                  "type": "string"
                },
                "paused": {
                  "default": false,
                  "description": "Paused defines if the archival is paused.",
                  "type": "boolean"
                }
              },
              "required": [
                "enableRead",
                "path",
                "paused"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "authorization": {
          "description": "Authorization allows authorization configuration for the temporal cluster.",
          "properties": {
            "authorizer": {
              "description": "Authorizer defines the authorization mechanism to be used. It can be left as an empty string to use a no-operation authorizer (noopAuthorizer), or set to \"default\" to use the temporal's default authorizer (defaultAuthorizer).",
              "type": "string"
            },
            "claimMapper": {
              "description": "ClaimMapper specifies the claim mapping mechanism used for handling JWT claims. Similar to the Authorizer, it can be left as an empty string to use a no-operation claim mapper (noopClaimMapper), or set to \"default\" to use the default JWT claim mapper (defaultJWTClaimMapper).",
              "type": "string"
            },
            "jwtKeyProvider": {
              "description": "JWTKeyProvider specifies the signing key provider used for validating JWT tokens.",
              "properties": {
                "keySourceURIs": {
                  "description": "KeySourceURIs is a list of URIs where the JWT signing keys can be obtained. These URIs are used by the authorization system to fetch the public keys necessary for validating JWT tokens.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "refreshInterval": {
                  "description": "RefreshInterval defines the time interval at which temporal should refresh the JWT signing keys from the specified URIs.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "permissionsClaimName": {
              "description": "PermissionsClaimName is the name of the claim within the JWT token that contains the user's permissions.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "dynamicConfig": {
          "description": "DynamicConfig allows advanced configuration for the temporal cluster.",
          "properties": {
            "pollInterval": {
              "description": "PollInterval defines how often the config should be updated by checking provided values. Defaults to 10s.",
              "type": "string"
            },
            "values": {
              "additionalProperties": {
                "items": {
                  "description": "ConstrainedValue is an alias for temporal's dynamicconfig.ConstrainedValue.",
                  "properties": {
                    "constraints": {
                      "description": "Constraints describe under what conditions a ConstrainedValue should be used.",
                      "properties": {
                        "namespace": {
                          "type": "string"
                        },
                        "namespaceId": {
                          "type": "string"
                        },
                        "shardId": {
                          "format": "int32",
                          "type": "integer"
                        },
                        "taskQueueName": {
                          "type": "string"
                        },
                        "taskQueueType": {
                          "type": "string"
                        },
                        "taskType": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "value": {
                      "description": "Value is the value for the configuration key. The type of the Value field depends on the key. Acceptable types will be one of: int, float64, bool, string, map[string]any, time.Duration",
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  },
                  "required": [
                    "value"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "type": "array"
              },
              "description": "Values contains all dynamic config keys and their constained values.",
              "type": "object"
            }
          },
          "required": [
            "values"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "image": {
          "description": "Image defines the temporal server docker image the cluster should use for each services.",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "An optional list of references to secrets in the same namespace to use for pulling temporal images from registries.",
          "items": {
            "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
            "properties": {
              "name": {
                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                "type": "string"
              }
            },
            "type": "object",
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
          },
          "type": "array"
        },
        "jobResources": {
          "description": "JobResources allows set resources for setup/update jobs.",
          "properties": {
            "claims": {
              "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers.",
              "items": {
                "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                "properties": {
                  "name": {
                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array",
              "x-kubernetes-list-map-keys": [
                "name"
              ],
              "x-kubernetes-list-type": "map"
            },
            "limits": {
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ],
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                "x-kubernetes-int-or-string": true
              },
              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": "object"
            },
            "requests": {
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ],
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                "x-kubernetes-int-or-string": true
              },
              "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": "object"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "jobTtlSecondsAfterFinished": {
          "default": 300,
          "description": "JobTTLSecondsAfterFinished is amount of time to keep job pods after jobs are completed. Defaults to 300 seconds.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "log": {
          "description": "Log defines temporal cluster's logger configuration.",
          "properties": {
            "development": {
              "default": false,
              "description": "Development determines whether the logger is run in Development (== Test) or in Production mode.  Default is Production.  Production-stage disables panics from DPanic logging.",
              "type": "boolean"
            },
            "format": {
              "default": "json",
              "description": "Format determines the format of each log file printed to the output. Use \"console\" if you want stack traces to appear on multiple lines.",
              "enum": [
                "json",
                "console"
              ],
              "type": "string"
            },
            "level": {
              "default": "info",
              "description": "Level is the desired log level; see colocated zap_logger.go::parseZapLevel()",
              "enum": [
                "debug",
                "info",
                "warn",
                "error",
                "dpanic",
                "panic",
                "fatal"
              ],
              "type": "string"
            },
            "outputFile": {
              "description": "OutputFile is the path to the log output file.",
              "type": "string"
            },
            "stdout": {
              "default": true,
              "description": "Stdout is true if the output needs to goto standard out; default is stderr.",
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "mTLS": {
          "description": "MTLS allows configuration of the network traffic encryption for the cluster.",
          "properties": {
            "certificatesDuration": {
              "description": "CertificatesDuration allows configuration of maximum certificates lifetime. Useless if mTLS provider is not cert-manager.",
              "properties": {
                "clientCertificates": {
                  "description": "ClientCertificates is the 'duration' (i.e. lifetime) of the client certificates. It defaults to 1 year.",
                  "type": "string"
                },
                "frontendCertificate": {
                  "description": "FrontendCertificate is the 'duration' (i.e. lifetime) of the frontend certificate. It defaults to 1 year.",
                  "type": "string"
                },
                "intermediateCAsCertificates": {
                  "description": "IntermediateCACertificates is the 'duration' (i.e. lifetime) of the intermediate CAs Certificates. It defaults to 5 years.",
                  "type": "string"
                },
                "internodeCertificate": {
                  "description": "InternodeCertificate is the 'duration' (i.e. lifetime) of the internode certificate. It defaults to 1 year.",
                  "type": "string"
                },
                "rootCACertificate": {
                  "description": "RootCACertificate is the 'duration' (i.e. lifetime) of the Root CA Certificate. It defaults to 10 years.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "frontend": {
              "description": "Frontend allows configuration of the frontend's public endpoint traffic encryption. Useless if mTLS provider is not cert-manager.",
              "properties": {
                "enabled": {
                  "description": "Enabled defines if the operator should enable mTLS for cluster's public endpoints.",
                  "type": "boolean"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "internode": {
              "description": "Internode allows configuration of the internode traffic encryption. Useless if mTLS provider is not cert-manager.",
              "properties": {
                "enabled": {
                  "description": "Enabled defines if the operator should enable mTLS for network between cluster nodes.",
                  "type": "boolean"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "provider": {
              "default": "cert-manager",
              "description": "Provider defines the tool used to manage mTLS certificates.",
              "enum": [
                "cert-manager",
                "linkerd",
                "istio"
              ],
              "type": "string"
            },
            "refreshInterval": {
              "description": "RefreshInterval defines interval between refreshes of certificates in the cluster components. Defaults to 1 hour. Useless if mTLS provider is not cert-manager.",
              "type": "string"
            },
            "renewBefore": {
              "description": "RenewBefore is defines how long before the currently issued certificate's expiry cert-manager should renew the certificate. The default is 2/3 of the issued certificate's duration. Minimum accepted value is 5 minutes. Useless if mTLS provider is not cert-manager.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "metrics": {
          "description": "Metrics allows configuration of scraping endpoints for stats. prometheus or m3.",
          "properties": {
            "enabled": {
              "description": "Enabled defines if the operator should enable metrics exposition on temporal components.",
              "type": "boolean"
            },
            "prometheus": {
              "description": "Prometheus reporter configuration.",
              "properties": {
                "listenAddress": {
                  "description": "Deprecated. Address for prometheus to serve metrics from.",
                  "type": "string"
                },
                "listenPort": {
                  "description": "ListenPort for prometheus to serve metrics from.",
                  "format": "int32",
                  "type": "integer"
                },
                "scrapeConfig": {
                  "description": "ScrapeConfig is the prometheus scrape configuration.",
                  "properties": {
                    "annotations": {
                      "description": "Annotations defines if the operator should add prometheus scrape annotations to the services pods.",
                      "type": "boolean"
                    },
                    "serviceMonitor": {
                      "description": "PrometheusScrapeConfigServiceMonitor is the configuration for prometheus operator ServiceMonitor.",
                      "properties": {
                        "enabled": {
                          "description": "Enabled defines if the operator should create a ServiceMonitor for each services.",
                          "type": "boolean"
                        },
                        "labels": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Labels adds extra labels to the ServiceMonitor.",
                          "type": "object"
                        },
                        "metricRelabelings": {
                          "description": "MetricRelabelConfigs to apply to samples before ingestion.",
                          "items": {
                            "description": "RelabelConfig allows dynamic rewriting of the label set for targets, alerts, scraped samples and remote write samples. \n More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
                            "properties": {
                              "action": {
                                "default": "replace",
                                "description": "Action to perform based on the regex matching. \n `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0. `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0. \n Default: \"Replace\"",
                                "enum": [
                                  "replace",
                                  "Replace",
                                  "keep",
                                  "Keep",
                                  "drop",
                                  "Drop",
                                  "hashmod",
                                  "HashMod",
                                  "labelmap",
                                  "LabelMap",
                                  "labeldrop",
                                  "LabelDrop",
                                  "labelkeep",
                                  "LabelKeep",
                                  "lowercase",
                                  "Lowercase",
                                  "uppercase",
                                  "Uppercase",
                                  "keepequal",
                                  "KeepEqual",
                                  "dropequal",
                                  "DropEqual"
                                ],
                                "type": "string"
                              },
                              "modulus": {
                                "description": "Modulus to take of the hash of the source label values. \n Only applicable when the action is `HashMod`.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "regex": {
                                "description": "Regular expression against which the extracted value is matched.",
                                "type": "string"
                              },
                              "replacement": {
                                "description": "Replacement value against which a Replace action is performed if the regular expression matches. \n Regex capture groups are available.",
                                "type": "string"
                              },
                              "separator": {
                                "description": "Separator is the string between concatenated SourceLabels.",
                                "type": "string"
                              },
                              "sourceLabels": {
                                "description": "The source labels select values from existing labels. Their content is concatenated using the configured Separator and matched against the configured regular expression.",
                                "items": {
                                  "description": "LabelName is a valid Prometheus label name which may only contain ASCII letters, numbers, as well as underscores.",
                                  "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "targetLabel": {
                                "description": "Label to which the resulting string is written in a replacement. \n It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`, `KeepEqual` and `DropEqual` actions. \n Regex capture groups are available.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "override": {
                          "description": "Override allows customization of the created ServiceMonitor. All fields can be overritten except \"endpoints\", \"selector\" and \"namespaceSelector\".",
                          "properties": {
                            "attachMetadata": {
                              "description": "Attaches node metadata to discovered targets. Requires Prometheus v2.37.0 and above.",
                              "properties": {
                                "node": {
                                  "description": "When set to true, Prometheus must have permissions to get Nodes.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            },
                            "endpoints": {
                              "description": "A list of endpoints allowed as part of this ServiceMonitor.",
                              "items": {
                                "description": "Endpoint defines a scrapeable endpoint serving Prometheus metrics.",
                                "properties": {
                                  "authorization": {
                                    "description": "Authorization section for this endpoint",
                                    "properties": {
                                      "credentials": {
                                        "description": "Selects a key of a Secret in the namespace that contains the credentials for authentication.",
                                        "properties": {
                                          "key": {
                                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                                            "type": "string"
                                          },
                                          "name": {
                                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                            "type": "string"
                                          },
                                          "optional": {
                                            "description": "Specify whether the Secret or its key must be defined",
                                            "type": "boolean"
                                          }
                                        },
                                        "required": [
                                          "key"
                                        ],
                                        "type": "object",
                                        "x-kubernetes-map-type": "atomic",
                                        "additionalProperties": false
                                      },
                                      "type": {
                                        "description": "Defines the authentication type. The value is case-insensitive. \n \"Basic\" is not a supported value. \n Default: \"Bearer\"",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object",
                                    "additionalProperties": false
                                  },
                                  "basicAuth": {
                                    "description": "BasicAuth allow an endpoint to authenticate over basic authentication More info: https://prometheus.io/docs/operating/configuration/#endpoints",
                                    "properties": {
                                      "password": {
                                        "description": "The secret in the service monitor namespace that contains the password for authentication.",
                                        "properties": {
                                          "key": {
                                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                                            "type": "string"
                                          },
                                          "name": {
                                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                            "type": "string"
                                          },
                                          "optional": {
                                            "description": "Specify whether the Secret or its key must be defined",
                                            "type": "boolean"
                                          }
                                        },
                                        "required": [
                                          "key"
                                        ],
                                        "type": "object",
                                        "x-kubernetes-map-type": "atomic",
                                        "additionalProperties": false
                                      },
                                      "username": {
                                        "description": "The secret in the service monitor namespace that contains the username for authentication.",
                                        "properties": {
                                          "key": {
                                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                                            "type": "string"
                                          },
                                          "name": {
                                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                            "type": "string"
                                          },
                                          "optional": {
                                            "description": "Specify whether the Secret or its key must be defined",
                                            "type": "boolean"
                                          }
                                        },
                                        "required": [
                                          "key"
                                        ],
                                        "type": "object",
                                        "x-kubernetes-map-type": "atomic",
                                        "additionalProperties": false
                                      }
                                    },
                                    "type": "object",
                                    "additionalProperties": false
                                  },
                                  "bearerTokenFile": {
                                    "description": "File to read bearer token for scraping targets.",
                                    "type": "string"
                                  },
                                  "bearerTokenSecret": {
                                    "description": "Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the service monitor and accessible by the Prometheus Operator.",
                                    "properties": {
                                      "key": {
                                        "description": "The key of the secret to select from.  Must be a valid secret key.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                        "type": "string"
                                      },
                                      "optional": {
                                        "description": "Specify whether the Secret or its key must be defined",
                                        "type": "boolean"
                                      }
                                    },
                                    "required": [
                                      "key"
                                    ],
                                    "type": "object",
                                    "x-kubernetes-map-type": "atomic",
                                    "additionalProperties": false
                                  },
                                  "enableHttp2": {
                                    "description": "Whether to enable HTTP2.",
                                    "type": "boolean"
                                  },
                                  "filterRunning": {
                                    "description": "Drop pods that are not running. (Failed, Succeeded). Enabled by default. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase",
                                    "type": "boolean"
                                  },
                                  "followRedirects": {
                                    "description": "FollowRedirects configures whether scrape requests follow HTTP 3xx redirects.",
                                    "type": "boolean"
                                  },
                                  "honorLabels": {
                                    "description": "HonorLabels chooses the metric's labels on collisions with target labels.",
                                    "type": "boolean"
                                  },
                                  "honorTimestamps": {
                                    "description": "HonorTimestamps controls whether Prometheus respects the timestamps present in scraped data.",
                                    "type": "boolean"
                                  },
                                  "interval": {
                                    "description": "Interval at which metrics should be scraped If not specified Prometheus' global scrape interval is used.",
                                    "pattern": "^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$",
                                    "type": "string"
                                  },
                                  "metricRelabelings": {
                                    "description": "MetricRelabelConfigs to apply to samples before ingestion.",
                                    "items": {
                                      "description": "RelabelConfig allows dynamic rewriting of the label set for targets, alerts, scraped samples and remote write samples. \n More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
                                      "properties": {
                                        "action": {
                                          "default": "replace",
                                          "description": "Action to perform based on the regex matching. \n `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0. `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0. \n Default: \"Replace\"",
                                          "enum": [
                                            "replace",
                                            "Replace",
                                            "keep",
                                            "Keep",
                                            "drop",
                                            "Drop",
                                            "hashmod",
                                            "HashMod",
                                            "labelmap",
                                            "LabelMap",
                                            "labeldrop",
                                            "LabelDrop",
                                            "labelkeep",
                                            "LabelKeep",
                                            "lowercase",
                                            "Lowercase",
                                            "uppercase",
                                            "Uppercase",
                                            "keepequal",
                                            "KeepEqual",
                                            "dropequal",
                                            "DropEqual"
                                          ],
                                          "type": "string"
                                        },
                                        "modulus": {
                                          "description": "Modulus to take of the hash of the source label values. \n Only applicable when the action is `HashMod`.",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "regex": {
                                          "description": "Regular expression against which the extracted value is matched.",
                                          "type": "string"
                                        },
                                        "replacement": {
                                          "description": "Replacement value against which a Replace action is performed if the regular expression matches. \n Regex capture groups are available.",
                                          "type": "string"
                                        },
                                        "separator": {
                                          "description": "Separator is the string between concatenated SourceLabels.",
                                          "type": "string"
                                        },
                                        "sourceLabels": {
                                          "description": "The source labels select values from existing labels. Their content is concatenated using the configured Separator and matched against the configured regular expression.",
                                          "items": {
                                            "description": "LabelName is a valid Prometheus label name which may only contain ASCII letters, numbers, as well as underscores.",
                                            "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "targetLabel": {
                                          "description": "Label to which the resulting string is written in a replacement. \n It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`, `KeepEqual` and `DropEqual` actions. \n Regex capture groups are available.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object",
                                      "additionalProperties": false
                                    },
                                    "type": "array"
                                  },
                                  "oauth2": {
                                    "description": "OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.",
                                    "properties": {
                                      "clientId": {
                                        "description": "The secret or configmap containing the OAuth2 client id",
                                        "properties": {
                                          "configMap": {
                                            "description": "ConfigMap containing data to use for the targets.",
                                            "properties": {
                                              "key": {
                                                "description": "The key to select.",
                                                "type": "string"
                                              },
                                              "name": {
                                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                "type": "string"
                                              },
                                              "optional": {
                                                "description": "Specify whether the ConfigMap or its key must be defined",
                                                "type": "boolean"
                                              }
                                            },
                                            "required": [
                                              "key"
                                            ],
                                            "type": "object",
                                            "x-kubernetes-map-type": "atomic",
                                            "additionalProperties": false
                                          },
                                          "secret": {
                                            "description": "Secret containing data to use for the targets.",
                                            "properties": {
                                              "key": {
                                                "description": "The key of the secret to select from.  Must be a valid secret key.",
                                                "type": "string"
                                              },
                                              "name": {
                                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                "type": "string"
                                              },
                                              "optional": {
                                                "description": "Specify whether the Secret or its key must be defined",
                                                "type": "boolean"
                                              }
                                            },
                                            "required": [
                                              "key"
                                            ],
                                            "type": "object",
                                            "x-kubernetes-map-type": "atomic",
                                            "additionalProperties": false
                                          }
                                        },
                                        "type": "object",
                                        "additionalProperties": false
                                      },
                                      "clientSecret": {
                                        "description": "The secret containing the OAuth2 client secret",
                                        "properties": {
                                          "key": {
                                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                                            "type": "string"
                                          },
                                          "name": {
                                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                            "type": "string"
                                          },
                                          "optional": {
                                            "description": "Specify whether the Secret or its key must be defined",
                                            "type": "boolean"
                                          }
                                        },
                                        "required": [
                                          "key"
                                        ],
                                        "type": "object",
                                        "x-kubernetes-map-type": "atomic",
                                        "additionalProperties": false
                                      },
                                      "endpointParams": {
                                        "additionalProperties": {
                                          "type": "string"
                                        },
                                        "description": "Parameters to append to the token URL",
                                        "type": "object"
                                      },
                                      "scopes": {
                                        "description": "OAuth2 scopes used for the token request",
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "tokenUrl": {
                                        "description": "The URL to fetch the token from",
                                        "minLength": 1,
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "clientId",
                                      "clientSecret",
                                      "tokenUrl"
                                    ],
                                    "type": "object",
                                    "additionalProperties": false
                                  },
                                  "params": {
                                    "additionalProperties": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "description": "Optional HTTP URL parameters",
                                    "type": "object"
                                  },
                                  "path": {
                                    "description": "HTTP path to scrape for metrics. If empty, Prometheus uses the default value (e.g. `/metrics`).",
                                    "type": "string"
                                  },
                                  "port": {
                                    "description": "Name of the service port this endpoint refers to. Mutually exclusive with targetPort.",
                                    "type": "string"
                                  },
                                  "proxyUrl": {
                                    "description": "ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.",
                                    "type": "string"
                                  },
                                  "relabelings": {
                                    "description": "RelabelConfigs to apply to samples before scraping. Prometheus Operator automatically adds relabelings for a few standard Kubernetes fields. The original scrape job's name is available via the `__tmp_prometheus_job_name` label. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
                                    "items": {
                                      "description": "RelabelConfig allows dynamic rewriting of the label set for targets, alerts, scraped samples and remote write samples. \n More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
                                      "properties": {
                                        "action": {
                                          "default": "replace",
                                          "description": "Action to perform based on the regex matching. \n `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0. `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0. \n Default: \"Replace\"",
                                          "enum": [
                                            "replace",
                                            "Replace",
                                            "keep",
                                            "Keep",
                                            "drop",
                                            "Drop",
                                            "hashmod",
                                            "HashMod",
                                            "labelmap",
                                            "LabelMap",
                                            "labeldrop",
                                            "LabelDrop",
                                            "labelkeep",
                                            "LabelKeep",
                                            "lowercase",
                                            "Lowercase",
                                            "uppercase",
                                            "Uppercase",
                                            "keepequal",
                                            "KeepEqual",
                                            "dropequal",
                                            "DropEqual"
                                          ],
                                          "type": "string"
                                        },
                                        "modulus": {
                                          "description": "Modulus to take of the hash of the source label values. \n Only applicable when the action is `HashMod`.",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "regex": {
                                          "description": "Regular expression against which the extracted value is matched.",
                                          "type": "string"
                                        },
                                        "replacement": {
                                          "description": "Replacement value against which a Replace action is performed if the regular expression matches. \n Regex capture groups are available.",
                                          "type": "string"
                                        },
                                        "separator": {
                                          "description": "Separator is the string between concatenated SourceLabels.",
                                          "type": "string"
                                        },
                                        "sourceLabels": {
                                          "description": "The source labels select values from existing labels. Their content is concatenated using the configured Separator and matched against the configured regular expression.",
                                          "items": {
                                            "description": "LabelName is a valid Prometheus label name which may only contain ASCII letters, numbers, as well as underscores.",
                                            "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "targetLabel": {
                                          "description": "Label to which the resulting string is written in a replacement. \n It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`, `KeepEqual` and `DropEqual` actions. \n Regex capture groups are available.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object",
                                      "additionalProperties": false
                                    },
                                    "type": "array"
                                  },
                                  "scheme": {
                                    "description": "HTTP scheme to use for scraping. `http` and `https` are the expected values unless you rewrite the `__scheme__` label via relabeling. If empty, Prometheus uses the default value `http`.",
                                    "enum": [
                                      "http",
                                      "https"
                                    ],
                                    "type": "string"
                                  },
                                  "scrapeTimeout": {
                                    "description": "Timeout after which the scrape is ended If not specified, the Prometheus global scrape timeout is used unless it is less than `Interval` in which the latter is used.",
                                    "pattern": "^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$",
                                    "type": "string"
                                  },
                                  "targetPort": {
                                    "anyOf": [
                                      {
                                        "type": "integer"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ],
                                    "description": "Name or number of the target port of the Pod behind the Service, the port must be specified with container port property. Mutually exclusive with port.",
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "tlsConfig": {
                                    "description": "TLS configuration to use when scraping the endpoint",
                                    "properties": {
                                      "ca": {
                                        "description": "Certificate authority used when verifying server certificates.",
                                        "properties": {
                                          "configMap": {
                                            "description": "ConfigMap containing data to use for the targets.",
                                            "properties": {
                                              "key": {
                                                "description": "The key to select.",
                                                "type": "string"
                                              },
                                              "name": {
                                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                "type": "string"
                                              },
                                              "optional": {
                                                "description": "Specify whether the ConfigMap or its key must be defined",
                                                "type": "boolean"
                                              }
                                            },
                                            "required": [
                                              "key"
                                            ],
                                            "type": "object",
                                            "x-kubernetes-map-type": "atomic",
                                            "additionalProperties": false
                                          },
                                          "secret": {
                                            "description": "Secret containing data to use for the targets.",
                                            "properties": {
                                              "key": {
                                                "description": "The key of the secret to select from.  Must be a valid secret key.",
                                                "type": "string"
                                              },
                                              "name": {
                                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                "type": "string"
                                              },
                                              "optional": {
                                                "description": "Specify whether the Secret or its key must be defined",
                                                "type": "boolean"
                                              }
                                            },
                                            "required": [
                                              "key"
                                            ],
                                            "type": "object",
                                            "x-kubernetes-map-type": "atomic",
                                            "additionalProperties": false
                                          }
                                        },
                                        "type": "object",
                                        "additionalProperties": false
                                      },
                                      "caFile": {
                                        "description": "Path to the CA cert in the Prometheus container to use for the targets.",
                                        "type": "string"
                                      },
                                      "cert": {
                                        "description": "Client certificate to present when doing client-authentication.",
                                        "properties": {
                                          "configMap": {
                                            "description": "ConfigMap containing data to use for the targets.",
                                            "properties": {
                                              "key": {
                                                "description": "The key to select.",
                                                "type": "string"
                                              },
                                              "name": {
                                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                "type": "string"
                                              },
                                              "optional": {
                                                "description": "Specify whether the ConfigMap or its key must be defined",
                                                "type": "boolean"
                                              }
                                            },
                                            "required": [
                                              "key"
                                            ],
                                            "type": "object",
                                            "x-kubernetes-map-type": "atomic",
                                            "additionalProperties": false
                                          },
                                          "secret": {
                                            "description": "Secret containing data to use for the targets.",
                                            "properties": {
                                              "key": {
                                                "description": "The key of the secret to select from.  Must be a valid secret key.",
                                                "type": "string"
                                              },
                                              "name": {
                                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                "type": "string"
                                              },
                                              "optional": {
                                                "description": "Specify whether the Secret or its key must be defined",
                                                "type": "boolean"
                                              }
                                            },
                                            "required": [
                                              "key"
                                            ],
                                            "type": "object",
                                            "x-kubernetes-map-type": "atomic",
                                            "additionalProperties": false
                                          }
                                        },
                                        "type": "object",
                                        "additionalProperties": false
                                      },
                                      "certFile": {
                                        "description": "Path to the client cert file in the Prometheus container for the targets.",
                                        "type": "string"
                                      },
                                      "insecureSkipVerify": {
                                        "description": "Disable target certificate validation.",
                                        "type": "boolean"
                                      },
                                      "keyFile": {
                                        "description": "Path to the client key file in the Prometheus container for the targets.",
                                        "type": "string"
                                      },
                                      "keySecret": {
                                        "description": "Secret containing the client key file for the targets.",
                                        "properties": {
                                          "key": {
                                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                                            "type": "string"
                                          },
                                          "name": {
                                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                            "type": "string"
                                          },
                                          "optional": {
                                            "description": "Specify whether the Secret or its key must be defined",
                                            "type": "boolean"
                                          }
                                        },
                                        "required": [
                                          "key"
                                        ],
                                        "type": "object",
                                        "x-kubernetes-map-type": "atomic",
                                        "additionalProperties": false
                                      },
                                      "serverName": {
                                        "description": "Used to verify the hostname for the targets.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object",
                                    "additionalProperties": false
                                  }
                                },
                                "type": "object",
                                "additionalProperties": false
                              },
                              "type": "array"
                            },
                            "jobLabel": {
                              "description": "JobLabel selects the label from the associated Kubernetes service which will be used as the `job` label for all metrics. \n For example: If in `ServiceMonitor.spec.jobLabel: foo` and in `Service.metadata.labels.foo: bar`, then the `job=\"bar\"` label is added to all metrics. \n If the value of this field is empty or if the label doesn't exist for the given Service, the `job` label of the metrics defaults to the name of the Kubernetes Service.",
                              "type": "string"
                            },
                            "labelLimit": {
                              "description": "Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "labelNameLengthLimit": {
                              "description": "Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "labelValueLengthLimit": {
                              "description": "Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "namespaceSelector": {
                              "description": "Selector to select which namespaces the Kubernetes Endpoints objects are discovered from.",
                              "properties": {
                                "any": {
                                  "description": "Boolean describing whether all namespaces are selected in contrast to a list restricting them.",
                                  "type": "boolean"
                                },
                                "matchNames": {
                                  "description": "List of namespace names to select from.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            },
                            "podTargetLabels": {
                              "description": "PodTargetLabels transfers labels on the Kubernetes `Pod` onto the created metrics.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "sampleLimit": {
                              "description": "SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "selector": {
                              "description": "Selector to select Endpoints objects.",
                              "properties": {
                                "matchExpressions": {
                                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "items": {
                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                    "properties": {
                                      "key": {
                                        "description": "key is the label key that the selector applies to.",
                                        "type": "string"
                                      },
                                      "operator": {
                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                        "type": "string"
                                      },
                                      "values": {
                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "operator"
                                    ],
                                    "type": "object",
                                    "additionalProperties": false
                                  },
                                  "type": "array"
                                },
                                "matchLabels": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-kubernetes-map-type": "atomic",
                              "additionalProperties": false
                            },
                            "targetLabels": {
                              "description": "TargetLabels transfers labels from the Kubernetes `Service` onto the created metrics.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "targetLimit": {
                              "description": "TargetLimit defines a limit on the number of scraped targets that will be accepted.",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "required": [
                            "endpoints",
                            "selector"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "enabled"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "numHistoryShards": {
          "description": "NumHistoryShards is the desired number of history shards. This field is immutable.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "persistence": {
          "description": "Persistence defines temporal persistence configuration.",
          "properties": {
            "advancedVisibilityStore": {
              "description": "AdvancedVisibilityStore holds the avanced visibility datastore specs.",
              "properties": {
                "cassandra": {
                  "description": "Cassandra holds all connection parameters for Cassandra datastore. Note that cassandra is now deprecated for visibility store.",
                  "properties": {
                    "connectTimeout": {
                      "description": "ConnectTimeout is a timeout for initial dial to cassandra server.",
                      "type": "string"
                    },
                    "consistency": {
                      "description": "Consistency configuration.",
                      "properties": {
                        "consistency": {
                          "description": "Consistency sets the default consistency level. Values identical to gocql Consistency values. (defaults to LOCAL_QUORUM if not set).",
                          "enum": [
                            "ANY",
                            "ONE",
                            "TWO",
                            "THREE",
                            "QUORUM",
                            "ALL",
                            "LOCAL_QUORUM",
                            "EACH_QUORUM",
                            "LOCAL_ONE"
                          ],
                          "type": "integer"
                        },
                        "serialConsistency": {
                          "description": "SerialConsistency sets the consistency for the serial prtion of queries. Values identical to gocql SerialConsistency values. (defaults to LOCAL_SERIAL if not set)",
                          "enum": [
                            "SERIAL",
                            "LOCAL_SERIAL"
                          ],
                          "type": "integer"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "datacenter": {
                      "description": "Datacenter is the data center filter arg for cassandra.",
                      "type": "string"
                    },
                    "disableInitialHostLookup": {
                      "description": "DisableInitialHostLookup instructs the gocql client to connect only using the supplied hosts.",
                      "type": "boolean"
                    },
                    "hosts": {
                      "description": "Hosts is a list of cassandra endpoints.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "keyspace": {
                      "description": "Keyspace is the cassandra keyspace.",
                      "type": "string"
                    },
                    "maxConns": {
                      "description": "MaxConns is the max number of connections to this datastore for a single keyspace.",
                      "type": "integer"
                    },
                    "port": {
                      "description": "Port is the cassandra port used for connection by gocql client.",
                      "type": "integer"
                    },
                    "user": {
                      "description": "User is the cassandra user used for authentication by gocql client.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "hosts",
                    "keyspace",
                    "port",
                    "user"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "elasticsearch": {
                  "description": "Elasticsearch holds all connection parameters for Elasticsearch datastores.",
                  "properties": {
                    "closeIdleConnectionsInterval": {
                      "description": "CloseIdleConnectionsInterval is the max duration a connection stay open while idle.",
                      "type": "string"
                    },
                    "enableHealthcheck": {
                      "description": "EnableHealthcheck enables or disables healthcheck on the temporal cluster's es client.",
                      "type": "boolean"
                    },
                    "enableSniff": {
                      "description": "EnableSniff enables or disables sniffer on the temporal cluster's es client.",
                      "type": "boolean"
                    },
                    "indices": {
                      "description": "Indices holds visibility index names.",
                      "properties": {
                        "secondaryVisibility": {
                          "description": "SecondaryVisibility defines secondary visibility's index name.",
                          "type": "string"
                        },
                        "visibility": {
                          "default": "temporal_visibility_v1",
                          "description": "Visibility defines visibility's index name.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "visibility"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "logLevel": {
                      "description": "LogLevel defines the temporal cluster's es client logger level.",
                      "type": "string"
                    },
                    "url": {
                      "description": "URL is the connection url to connect to the instance.",
                      "pattern": "^https?:\\/\\/.+$",
                      "type": "string"
                    },
                    "username": {
                      "description": "Username is the username to be used for the connection.",
                      "type": "string"
                    },
                    "version": {
                      "default": "v7",
                      "description": "Version defines the elasticsearch version.",
                      "pattern": "^v(6|7|8)$",
                      "type": "string"
                    }
                  },
                  "required": [
                    "indices",
                    "url",
                    "username",
                    "version"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "name": {
                  "description": "Name is the name of the datastore. It should be unique and will be referenced within the persitence spec. Defaults to \"default\" for default sore, \"visibility\" for visibility store, \"secondaryVisibility\" for secondary visibility store and \"advancedVisibility\" for advanced visibility store.",
                  "type": "string"
                },
                "passwordSecretRef": {
                  "description": "PasswordSecret is the reference to the secret holding the password.",
                  "properties": {
                    "key": {
                      "description": "Key in the Secret.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the Secret.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "skipCreate": {
                  "description": "SkipCreate instructs the operator to skip creating the database for SQL datastores or to skip creating keyspace for Cassandra. Use this option if your database or keyspace has already been provisioned by an administrator.",
                  "type": "boolean"
                },
                "sql": {
                  "description": "SQL holds all connection parameters for SQL datastores.",
                  "properties": {
                    "connectAddr": {
                      "description": "ConnectAddr is the remote addr of the database.",
                      "type": "string"
                    },
                    "connectAttributes": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "ConnectAttributes is a set of key-value attributes to be sent as part of connect data_source_name url",
                      "type": "object"
                    },
                    "connectProtocol": {
                      "description": "ConnectProtocol is the protocol that goes with the ConnectAddr.",
                      "type": "string"
                    },
                    "databaseName": {
                      "description": "DatabaseName is the name of SQL database to connect to.",
                      "type": "string"
                    },
                    "maxConnLifetime": {
                      "description": "MaxConnLifetime is the maximum time a connection can be alive",
                      "type": "string"
                    },
                    "maxConns": {
                      "description": "MaxConns the max number of connections to this datastore.",
                      "type": "integer"
                    },
                    "maxIdleConns": {
                      "description": "MaxIdleConns is the max number of idle connections to this datastore.",
                      "type": "integer"
                    },
                    "pluginName": {
                      "description": "PluginName is the name of SQL plugin.",
                      "enum": [
                        "postgres",
                        "postgres12",
                        "mysql",
                        "mysql8"
                      ],
                      "type": "string"
                    },
                    "taskScanPartitions": {
                      "description": "TaskScanPartitions is the number of partitions to sequentially scan during ListTaskQueue operations.",
                      "type": "integer"
                    },
                    "user": {
                      "description": "User is the username to be used for the connection.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "connectAddr",
                    "databaseName",
                    "pluginName",
                    "user"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "tls": {
                  "description": "TLS is an optional option to connect to the datastore using TLS.",
                  "properties": {
                    "caFileRef": {
                      "description": "CaFileRef is a reference to a secret containing the ca file.",
                      "properties": {
                        "key": {
                          "description": "Key in the Secret.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the Secret.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "certFileRef": {
                      "description": "CertFileRef is a reference to a secret containing the cert file.",
                      "properties": {
                        "key": {
                          "description": "Key in the Secret.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the Secret.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "enableHostVerification": {
                      "description": "EnableHostVerification defines if the hostname should be verified when connecting to the datastore.",
                      "type": "boolean"
                    },
                    "enabled": {
                      "description": "Enabled defines if the cluster should use a TLS connection to connect to the datastore.",
                      "type": "boolean"
                    },
                    "keyFileRef": {
                      "description": "KeyFileRef is a reference to a secret containing the key file.",
                      "properties": {
                        "key": {
                          "description": "Key in the Secret.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the Secret.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "serverName": {
                      "description": "ServerName the datastore should present.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "enableHostVerification",
                    "enabled"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "passwordSecretRef"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "defaultStore": {
              "description": "DefaultStore holds the default datastore specs.",
              "properties": {
                "cassandra": {
                  "description": "Cassandra holds all connection parameters for Cassandra datastore. Note that cassandra is now deprecated for visibility store.",
                  "properties": {
                    "connectTimeout": {
                      "description": "ConnectTimeout is a timeout for initial dial to cassandra server.",
                      "type": "string"
                    },
                    "consistency": {
                      "description": "Consistency configuration.",
                      "properties": {
                        "consistency": {
                          "description": "Consistency sets the default consistency level. Values identical to gocql Consistency values. (defaults to LOCAL_QUORUM if not set).",
                          "enum": [
                            "ANY",
                            "ONE",
                            "TWO",
                            "THREE",
                            "QUORUM",
                            "ALL",
                            "LOCAL_QUORUM",
                            "EACH_QUORUM",
                            "LOCAL_ONE"
                          ],
                          "type": "integer"
                        },
                        "serialConsistency": {
                          "description": "SerialConsistency sets the consistency for the serial prtion of queries. Values identical to gocql SerialConsistency values. (defaults to LOCAL_SERIAL if not set)",
                          "enum": [
                            "SERIAL",
                            "LOCAL_SERIAL"
                          ],
                          "type": "integer"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "datacenter": {
                      "description": "Datacenter is the data center filter arg for cassandra.",
                      "type": "string"
                    },
                    "disableInitialHostLookup": {
                      "description": "DisableInitialHostLookup instructs the gocql client to connect only using the supplied hosts.",
                      "type": "boolean"
                    },
                    "hosts": {
                      "description": "Hosts is a list of cassandra endpoints.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "keyspace": {
                      "description": "Keyspace is the cassandra keyspace.",
                      "type": "string"
                    },
                    "maxConns": {
                      "description": "MaxConns is the max number of connections to this datastore for a single keyspace.",
                      "type": "integer"
                    },
                    "port": {
                      "description": "Port is the cassandra port used for connection by gocql client.",
                      "type": "integer"
                    },
                    "user": {
                      "description": "User is the cassandra user used for authentication by gocql client.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "hosts",
                    "keyspace",
                    "port",
                    "user"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "elasticsearch": {
                  "description": "Elasticsearch holds all connection parameters for Elasticsearch datastores.",
                  "properties": {
                    "closeIdleConnectionsInterval": {
                      "description": "CloseIdleConnectionsInterval is the max duration a connection stay open while idle.",
                      "type": "string"
                    },
                    "enableHealthcheck": {
                      "description": "EnableHealthcheck enables or disables healthcheck on the temporal cluster's es client.",
                      "type": "boolean"
                    },
                    "enableSniff": {
                      "description": "EnableSniff enables or disables sniffer on the temporal cluster's es client.",
                      "type": "boolean"
                    },
                    "indices": {
                      "description": "Indices holds visibility index names.",
                      "properties": {
                        "secondaryVisibility": {
                          "description": "SecondaryVisibility defines secondary visibility's index name.",
                          "type": "string"
                        },
                        "visibility": {
                          "default": "temporal_visibility_v1",
                          "description": "Visibility defines visibility's index name.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "visibility"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "logLevel": {
                      "description": "LogLevel defines the temporal cluster's es client logger level.",
                      "type": "string"
                    },
                    "url": {
                      "description": "URL is the connection url to connect to the instance.",
                      "pattern": "^https?:\\/\\/.+$",
                      "type": "string"
                    },
                    "username": {
                      "description": "Username is the username to be used for the connection.",
                      "type": "string"
                    },
                    "version": {
                      "default": "v7",
                      "description": "Version defines the elasticsearch version.",
                      "pattern": "^v(6|7|8)$",
                      "type": "string"
                    }
                  },
                  "required": [
                    "indices",
                    "url",
                    "username",
                    "version"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "name": {
                  "description": "Name is the name of the datastore. It should be unique and will be referenced within the persitence spec. Defaults to \"default\" for default sore, \"visibility\" for visibility store, \"secondaryVisibility\" for secondary visibility store and \"advancedVisibility\" for advanced visibility store.",
                  "type": "string"
                },
                "passwordSecretRef": {
                  "description": "PasswordSecret is the reference to the secret holding the password.",
                  "properties": {
                    "key": {
                      "description": "Key in the Secret.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the Secret.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "skipCreate": {
                  "description": "SkipCreate instructs the operator to skip creating the database for SQL datastores or to skip creating keyspace for Cassandra. Use this option if your database or keyspace has already been provisioned by an administrator.",
                  "type": "boolean"
                },
                "sql": {
                  "description": "SQL holds all connection parameters for SQL datastores.",
                  "properties": {
                    "connectAddr": {
                      "description": "ConnectAddr is the remote addr of the database.",
                      "type": "string"
                    },
                    "connectAttributes": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "ConnectAttributes is a set of key-value attributes to be sent as part of connect data_source_name url",
                      "type": "object"
                    },
                    "connectProtocol": {
                      "description": "ConnectProtocol is the protocol that goes with the ConnectAddr.",
                      "type": "string"
                    },
                    "databaseName": {
                      "description": "DatabaseName is the name of SQL database to connect to.",
                      "type": "string"
                    },
                    "maxConnLifetime": {
                      "description": "MaxConnLifetime is the maximum time a connection can be alive",
                      "type": "string"
                    },
                    "maxConns": {
                      "description": "MaxConns the max number of connections to this datastore.",
                      "type": "integer"
                    },
                    "maxIdleConns": {
                      "description": "MaxIdleConns is the max number of idle connections to this datastore.",
                      "type": "integer"
                    },
                    "pluginName": {
                      "description": "PluginName is the name of SQL plugin.",
                      "enum": [
                        "postgres",
                        "postgres12",
                        "mysql",
                        "mysql8"
                      ],
                      "type": "string"
                    },
                    "taskScanPartitions": {
                      "description": "TaskScanPartitions is the number of partitions to sequentially scan during ListTaskQueue operations.",
                      "type": "integer"
                    },
                    "user": {
                      "description": "User is the username to be used for the connection.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "connectAddr",
                    "databaseName",
                    "pluginName",
                    "user"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "tls": {
                  "description": "TLS is an optional option to connect to the datastore using TLS.",
                  "properties": {
                    "caFileRef": {
                      "description": "CaFileRef is a reference to a secret containing the ca file.",
                      "properties": {
                        "key": {
                          "description": "Key in the Secret.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the Secret.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "certFileRef": {
                      "description": "CertFileRef is a reference to a secret containing the cert file.",
                      "properties": {
                        "key": {
                          "description": "Key in the Secret.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the Secret.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "enableHostVerification": {
                      "description": "EnableHostVerification defines if the hostname should be verified when connecting to the datastore.",
                      "type": "boolean"
                    },
                    "enabled": {
                      "description": "Enabled defines if the cluster should use a TLS connection to connect to the datastore.",
                      "type": "boolean"
                    },
                    "keyFileRef": {
                      "description": "KeyFileRef is a reference to a secret containing the key file.",
                      "properties": {
                        "key": {
                          "description": "Key in the Secret.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the Secret.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "serverName": {
                      "description": "ServerName the datastore should present.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "enableHostVerification",
                    "enabled"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "passwordSecretRef"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "secondaryVisibilityStore": {
              "description": "SecondaryVisibilityStore holds the secondary visibility datastore specs. Feature only available for clusters >= 1.21.0.",
              "properties": {
                "cassandra": {
                  "description": "Cassandra holds all connection parameters for Cassandra datastore. Note that cassandra is now deprecated for visibility store.",
                  "properties": {
                    "connectTimeout": {
                      "description": "ConnectTimeout is a timeout for initial dial to cassandra server.",
                      "type": "string"
                    },
                    "consistency": {
                      "description": "Consistency configuration.",
                      "properties": {
                        "consistency": {
                          "description": "Consistency sets the default consistency level. Values identical to gocql Consistency values. (defaults to LOCAL_QUORUM if not set).",
                          "enum": [
                            "ANY",
                            "ONE",
                            "TWO",
                            "THREE",
                            "QUORUM",
                            "ALL",
                            "LOCAL_QUORUM",
                            "EACH_QUORUM",
                            "LOCAL_ONE"
                          ],
                          "type": "integer"
                        },
                        "serialConsistency": {
                          "description": "SerialConsistency sets the consistency for the serial prtion of queries. Values identical to gocql SerialConsistency values. (defaults to LOCAL_SERIAL if not set)",
                          "enum": [
                            "SERIAL",
                            "LOCAL_SERIAL"
                          ],
                          "type": "integer"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "datacenter": {
                      "description": "Datacenter is the data center filter arg for cassandra.",
                      "type": "string"
                    },
                    "disableInitialHostLookup": {
                      "description": "DisableInitialHostLookup instructs the gocql client to connect only using the supplied hosts.",
                      "type": "boolean"
                    },
                    "hosts": {
                      "description": "Hosts is a list of cassandra endpoints.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "keyspace": {
                      "description": "Keyspace is the cassandra keyspace.",
                      "type": "string"
                    },
                    "maxConns": {
                      "description": "MaxConns is the max number of connections to this datastore for a single keyspace.",
                      "type": "integer"
                    },
                    "port": {
                      "description": "Port is the cassandra port used for connection by gocql client.",
                      "type": "integer"
                    },
                    "user": {
                      "description": "User is the cassandra user used for authentication by gocql client.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "hosts",
                    "keyspace",
                    "port",
                    "user"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "elasticsearch": {
                  "description": "Elasticsearch holds all connection parameters for Elasticsearch datastores.",
                  "properties": {
                    "closeIdleConnectionsInterval": {
                      "description": "CloseIdleConnectionsInterval is the max duration a connection stay open while idle.",
                      "type": "string"
                    },
                    "enableHealthcheck": {
                      "description": "EnableHealthcheck enables or disables healthcheck on the temporal cluster's es client.",
                      "type": "boolean"
                    },
                    "enableSniff": {
                      "description": "EnableSniff enables or disables sniffer on the temporal cluster's es client.",
                      "type": "boolean"
                    },
                    "indices": {
                      "description": "Indices holds visibility index names.",
                      "properties": {
                        "secondaryVisibility": {
                          "description": "SecondaryVisibility defines secondary visibility's index name.",
                          "type": "string"
                        },
                        "visibility": {
                          "default": "temporal_visibility_v1",
                          "description": "Visibility defines visibility's index name.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "visibility"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "logLevel": {
                      "description": "LogLevel defines the temporal cluster's es client logger level.",
                      "type": "string"
                    },
                    "url": {
                      "description": "URL is the connection url to connect to the instance.",
                      "pattern": "^https?:\\/\\/.+$",
                      "type": "string"
                    },
                    "username": {
                      "description": "Username is the username to be used for the connection.",
                      "type": "string"
                    },
                    "version": {
                      "default": "v7",
                      "description": "Version defines the elasticsearch version.",
                      "pattern": "^v(6|7|8)$",
                      "type": "string"
                    }
                  },
                  "required": [
                    "indices",
                    "url",
                    "username",
                    "version"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "name": {
                  "description": "Name is the name of the datastore. It should be unique and will be referenced within the persitence spec. Defaults to \"default\" for default sore, \"visibility\" for visibility store, \"secondaryVisibility\" for secondary visibility store and \"advancedVisibility\" for advanced visibility store.",
                  "type": "string"
                },
                "passwordSecretRef": {
                  "description": "PasswordSecret is the reference to the secret holding the password.",
                  "properties": {
                    "key": {
                      "description": "Key in the Secret.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the Secret.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "skipCreate": {
                  "description": "SkipCreate instructs the operator to skip creating the database for SQL datastores or to skip creating keyspace for Cassandra. Use this option if your database or keyspace has already been provisioned by an administrator.",
                  "type": "boolean"
                },
                "sql": {
                  "description": "SQL holds all connection parameters for SQL datastores.",
                  "properties": {
                    "connectAddr": {
                      "description": "ConnectAddr is the remote addr of the database.",
                      "type": "string"
                    },
                    "connectAttributes": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "ConnectAttributes is a set of key-value attributes to be sent as part of connect data_source_name url",
                      "type": "object"
                    },
                    "connectProtocol": {
                      "description": "ConnectProtocol is the protocol that goes with the ConnectAddr.",
                      "type": "string"
                    },
                    "databaseName": {
                      "description": "DatabaseName is the name of SQL database to connect to.",
                      "type": "string"
                    },
                    "maxConnLifetime": {
                      "description": "MaxConnLifetime is the maximum time a connection can be alive",
                      "type": "string"
                    },
                    "maxConns": {
                      "description": "MaxConns the max number of connections to this datastore.",
                      "type": "integer"
                    },
                    "maxIdleConns": {
                      "description": "MaxIdleConns is the max number of idle connections to this datastore.",
                      "type": "integer"
                    },
                    "pluginName": {
                      "description": "PluginName is the name of SQL plugin.",
                      "enum": [
                        "postgres",
                        "postgres12",
                        "mysql",
                        "mysql8"
                      ],
                      "type": "string"
                    },
                    "taskScanPartitions": {
                      "description": "TaskScanPartitions is the number of partitions to sequentially scan during ListTaskQueue operations.",
                      "type": "integer"
                    },
                    "user": {
                      "description": "User is the username to be used for the connection.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "connectAddr",
                    "databaseName",
                    "pluginName",
                    "user"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "tls": {
                  "description": "TLS is an optional option to connect to the datastore using TLS.",
                  "properties": {
                    "caFileRef": {
                      "description": "CaFileRef is a reference to a secret containing the ca file.",
                      "properties": {
                        "key": {
                          "description": "Key in the Secret.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the Secret.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "certFileRef": {
                      "description": "CertFileRef is a reference to a secret containing the cert file.",
                      "properties": {
                        "key": {
                          "description": "Key in the Secret.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the Secret.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "enableHostVerification": {
                      "description": "EnableHostVerification defines if the hostname should be verified when connecting to the datastore.",
                      "type": "boolean"
                    },
                    "enabled": {
                      "description": "Enabled defines if the cluster should use a TLS connection to connect to the datastore.",
                      "type": "boolean"
                    },
                    "keyFileRef": {
                      "description": "KeyFileRef is a reference to a secret containing the key file.",
                      "properties": {
                        "key": {
                          "description": "Key in the Secret.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the Secret.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "serverName": {
                      "description": "ServerName the datastore should present.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "enableHostVerification",
                    "enabled"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "passwordSecretRef"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "visibilityStore": {
              "description": "VisibilityStore holds the visibility datastore specs.",
              "properties": {
                "cassandra": {
                  "description": "Cassandra holds all connection parameters for Cassandra datastore. Note that cassandra is now deprecated for visibility store.",
                  "properties": {
                    "connectTimeout": {
                      "description": "ConnectTimeout is a timeout for initial dial to cassandra server.",
                      "type": "string"
                    },
                    "consistency": {
                      "description": "Consistency configuration.",
                      "properties": {
                        "consistency": {
                          "description": "Consistency sets the default consistency level. Values identical to gocql Consistency values. (defaults to LOCAL_QUORUM if not set).",
                          "enum": [
                            "ANY",
                            "ONE",
                            "TWO",
                            "THREE",
                            "QUORUM",
                            "ALL",
                            "LOCAL_QUORUM",
                            "EACH_QUORUM",
                            "LOCAL_ONE"
                          ],
                          "type": "integer"
                        },
                        "serialConsistency": {
                          "description": "SerialConsistency sets the consistency for the serial prtion of queries. Values identical to gocql SerialConsistency values. (defaults to LOCAL_SERIAL if not set)",
                          "enum": [
                            "SERIAL",
                            "LOCAL_SERIAL"
                          ],
                          "type": "integer"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "datacenter": {
                      "description": "Datacenter is the data center filter arg for cassandra.",
                      "type": "string"
                    },
                    "disableInitialHostLookup": {
                      "description": "DisableInitialHostLookup instructs the gocql client to connect only using the supplied hosts.",
                      "type": "boolean"
                    },
                    "hosts": {
                      "description": "Hosts is a list of cassandra endpoints.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "keyspace": {
                      "description": "Keyspace is the cassandra keyspace.",
                      "type": "string"
                    },
                    "maxConns": {
                      "description": "MaxConns is the max number of connections to this datastore for a single keyspace.",
                      "type": "integer"
                    },
                    "port": {
                      "description": "Port is the cassandra port used for connection by gocql client.",
                      "type": "integer"
                    },
                    "user": {
                      "description": "User is the cassandra user used for authentication by gocql client.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "hosts",
                    "keyspace",
                    "port",
                    "user"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "elasticsearch": {
                  "description": "Elasticsearch holds all connection parameters for Elasticsearch datastores.",
                  "properties": {
                    "closeIdleConnectionsInterval": {
                      "description": "CloseIdleConnectionsInterval is the max duration a connection stay open while idle.",
                      "type": "string"
                    },
                    "enableHealthcheck": {
                      "description": "EnableHealthcheck enables or disables healthcheck on the temporal cluster's es client.",
                      "type": "boolean"
                    },
                    "enableSniff": {
                      "description": "EnableSniff enables or disables sniffer on the temporal cluster's es client.",
                      "type": "boolean"
                    },
                    "indices": {
                      "description": "Indices holds visibility index names.",
                      "properties": {
                        "secondaryVisibility": {
                          "description": "SecondaryVisibility defines secondary visibility's index name.",
                          "type": "string"
                        },
                        "visibility": {
                          "default": "temporal_visibility_v1",
                          "description": "Visibility defines visibility's index name.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "visibility"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "logLevel": {
                      "description": "LogLevel defines the temporal cluster's es client logger level.",
                      "type": "string"
                    },
                    "url": {
                      "description": "URL is the connection url to connect to the instance.",
                      "pattern": "^https?:\\/\\/.+$",
                      "type": "string"
                    },
                    "username": {
                      "description": "Username is the username to be used for the connection.",
                      "type": "string"
                    },
                    "version": {
                      "default": "v7",
                      "description": "Version defines the elasticsearch version.",
                      "pattern": "^v(6|7|8)$",
                      "type": "string"
                    }
                  },
                  "required": [
                    "indices",
                    "url",
                    "username",
                    "version"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "name": {
                  "description": "Name is the name of the datastore. It should be unique and will be referenced within the persitence spec. Defaults to \"default\" for default sore, \"visibility\" for visibility store, \"secondaryVisibility\" for secondary visibility store and \"advancedVisibility\" for advanced visibility store.",
                  "type": "string"
                },
                "passwordSecretRef": {
                  "description": "PasswordSecret is the reference to the secret holding the password.",
                  "properties": {
                    "key": {
                      "description": "Key in the Secret.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the Secret.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "skipCreate": {
                  "description": "SkipCreate instructs the operator to skip creating the database for SQL datastores or to skip creating keyspace for Cassandra. Use this option if your database or keyspace has already been provisioned by an administrator.",
                  "type": "boolean"
                },
                "sql": {
                  "description": "SQL holds all connection parameters for SQL datastores.",
                  "properties": {
                    "connectAddr": {
                      "description": "ConnectAddr is the remote addr of the database.",
                      "type": "string"
                    },
                    "connectAttributes": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "ConnectAttributes is a set of key-value attributes to be sent as part of connect data_source_name url",
                      "type": "object"
                    },
                    "connectProtocol": {
                      "description": "ConnectProtocol is the protocol that goes with the ConnectAddr.",
                      "type": "string"
                    },
                    "databaseName": {
                      "description": "DatabaseName is the name of SQL database to connect to.",
                      "type": "string"
                    },
                    "maxConnLifetime": {
                      "description": "MaxConnLifetime is the maximum time a connection can be alive",
                      "type": "string"
                    },
                    "maxConns": {
                      "description": "MaxConns the max number of connections to this datastore.",
                      "type": "integer"
                    },
                    "maxIdleConns": {
                      "description": "MaxIdleConns is the max number of idle connections to this datastore.",
                      "type": "integer"
                    },
                    "pluginName": {
                      "description": "PluginName is the name of SQL plugin.",
                      "enum": [
                        "postgres",
                        "postgres12",
                        "mysql",
                        "mysql8"
                      ],
                      "type": "string"
                    },
                    "taskScanPartitions": {
                      "description": "TaskScanPartitions is the number of partitions to sequentially scan during ListTaskQueue operations.",
                      "type": "integer"
                    },
                    "user": {
                      "description": "User is the username to be used for the connection.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "connectAddr",
                    "databaseName",
                    "pluginName",
                    "user"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "tls": {
                  "description": "TLS is an optional option to connect to the datastore using TLS.",
                  "properties": {
                    "caFileRef": {
                      "description": "CaFileRef is a reference to a secret containing the ca file.",
                      "properties": {
                        "key": {
                          "description": "Key in the Secret.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the Secret.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "certFileRef": {
                      "description": "CertFileRef is a reference to a secret containing the cert file.",
                      "properties": {
                        "key": {
                          "description": "Key in the Secret.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the Secret.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "enableHostVerification": {
                      "description": "EnableHostVerification defines if the hostname should be verified when connecting to the datastore.",
                      "type": "boolean"
                    },
                    "enabled": {
                      "description": "Enabled defines if the cluster should use a TLS connection to connect to the datastore.",
                      "type": "boolean"
                    },
                    "keyFileRef": {
                      "description": "KeyFileRef is a reference to a secret containing the key file.",
                      "properties": {
                        "key": {
                          "description": "Key in the Secret.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the Secret.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "serverName": {
                      "description": "ServerName the datastore should present.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "enableHostVerification",
                    "enabled"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "passwordSecretRef"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "defaultStore",
            "visibilityStore"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "services": {
          "description": "Services allows customizations for each temporal services deployment.",
          "properties": {
            "frontend": {
              "description": "Frontend service custom specifications.",
              "properties": {
                "httpPort": {
                  "description": "HTTPPort defines a custom http port for the service. Default values are: 7243 for Frontend service",
                  "type": "integer"
                },
                "membershipPort": {
                  "description": "MembershipPort defines a custom membership port for the service. Default values are: 6933 for Frontend service 6934 for History service 6935 for Matching service 6939 for Worker service",
                  "type": "integer"
                },
                "overrides": {
                  "description": "Overrides adds some overrides to the resources deployed for the service. Those overrides takes precedence over spec.services.overrides.",
                  "properties": {
                    "deployment": {
                      "description": "Override configuration for the temporal service Deployment.",
                      "properties": {
                        "metadata": {
                          "description": "ObjectMetaOverride provides the ability to override an object metadata. It's a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta.",
                          "properties": {
                            "annotations": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
                              "type": "object"
                            },
                            "labels": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.",
                              "type": "object"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "spec": {
                          "description": "Specification of the desired behavior of the Deployment.",
                          "properties": {
                            "template": {
                              "description": "Template describes the pods that will be created.",
                              "properties": {
                                "metadata": {
                                  "description": "ObjectMetaOverride provides the ability to override an object metadata. It's a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta.",
                                  "properties": {
                                    "annotations": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
                                      "type": "object"
                                    },
                                    "labels": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.",
                                      "type": "object"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "spec": {
                                  "description": "Specification of the desired behavior of the pod.",
                                  "type": "object",
                                  "x-kubernetes-preserve-unknown-fields": true
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "port": {
                  "description": "Port defines a custom gRPC port for the service. Default values are: 7233 for Frontend service 7234 for History service 7235 for Matching service 7239 for Worker service",
                  "type": "integer"
                },
                "replicas": {
                  "description": "Number of desired replicas for the service. Default to 1.",
                  "format": "int32",
                  "minimum": 1,
                  "type": "integer"
                },
                "resources": {
                  "description": "Compute Resources required by this service. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "properties": {
                    "claims": {
                      "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers.",
                      "items": {
                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                        "properties": {
                          "name": {
                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array",
                      "x-kubernetes-list-map-keys": [
                        "name"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "limits": {
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object"
                    },
                    "requests": {
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "history": {
              "description": "History service custom specifications.",
              "properties": {
                "httpPort": {
                  "description": "HTTPPort defines a custom http port for the service. Default values are: 7243 for Frontend service",
                  "type": "integer"
                },
                "membershipPort": {
                  "description": "MembershipPort defines a custom membership port for the service. Default values are: 6933 for Frontend service 6934 for History service 6935 for Matching service 6939 for Worker service",
                  "type": "integer"
                },
                "overrides": {
                  "description": "Overrides adds some overrides to the resources deployed for the service. Those overrides takes precedence over spec.services.overrides.",
                  "properties": {
                    "deployment": {
                      "description": "Override configuration for the temporal service Deployment.",
                      "properties": {
                        "metadata": {
                          "description": "ObjectMetaOverride provides the ability to override an object metadata. It's a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta.",
                          "properties": {
                            "annotations": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
                              "type": "object"
                            },
                            "labels": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.",
                              "type": "object"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "spec": {
                          "description": "Specification of the desired behavior of the Deployment.",
                          "properties": {
                            "template": {
                              "description": "Template describes the pods that will be created.",
                              "properties": {
                                "metadata": {
                                  "description": "ObjectMetaOverride provides the ability to override an object metadata. It's a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta.",
                                  "properties": {
                                    "annotations": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
                                      "type": "object"
                                    },
                                    "labels": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.",
                                      "type": "object"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "spec": {
                                  "description": "Specification of the desired behavior of the pod.",
                                  "type": "object",
                                  "x-kubernetes-preserve-unknown-fields": true
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "port": {
                  "description": "Port defines a custom gRPC port for the service. Default values are: 7233 for Frontend service 7234 for History service 7235 for Matching service 7239 for Worker service",
                  "type": "integer"
                },
                "replicas": {
                  "description": "Number of desired replicas for the service. Default to 1.",
                  "format": "int32",
                  "minimum": 1,
                  "type": "integer"
                },
                "resources": {
                  "description": "Compute Resources required by this service. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "properties": {
                    "claims": {
                      "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers.",
                      "items": {
                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                        "properties": {
                          "name": {
                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array",
                      "x-kubernetes-list-map-keys": [
                        "name"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "limits": {
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object"
                    },
                    "requests": {
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "internalFrontend": {
              "description": "Internal Frontend service custom specifications. Only compatible with temporal >= 1.20.0",
              "properties": {
                "enabled": {
                  "default": false,
                  "description": "Enabled defines if we want to spawn the internal frontend service.",
                  "type": "boolean"
                },
                "httpPort": {
                  "description": "HTTPPort defines a custom http port for the service. Default values are: 7243 for Frontend service",
                  "type": "integer"
                },
                "membershipPort": {
                  "description": "MembershipPort defines a custom membership port for the service. Default values are: 6933 for Frontend service 6934 for History service 6935 for Matching service 6939 for Worker service",
                  "type": "integer"
                },
                "overrides": {
                  "description": "Overrides adds some overrides to the resources deployed for the service. Those overrides takes precedence over spec.services.overrides.",
                  "properties": {
                    "deployment": {
                      "description": "Override configuration for the temporal service Deployment.",
                      "properties": {
                        "metadata": {
                          "description": "ObjectMetaOverride provides the ability to override an object metadata. It's a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta.",
                          "properties": {
                            "annotations": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
                              "type": "object"
                            },
                            "labels": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.",
                              "type": "object"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "spec": {
                          "description": "Specification of the desired behavior of the Deployment.",
                          "properties": {
                            "template": {
                              "description": "Template describes the pods that will be created.",
                              "properties": {
                                "metadata": {
                                  "description": "ObjectMetaOverride provides the ability to override an object metadata. It's a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta.",
                                  "properties": {
                                    "annotations": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
                                      "type": "object"
                                    },
                                    "labels": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.",
                                      "type": "object"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "spec": {
                                  "description": "Specification of the desired behavior of the pod.",
                                  "type": "object",
                                  "x-kubernetes-preserve-unknown-fields": true
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "port": {
                  "description": "Port defines a custom gRPC port for the service. Default values are: 7233 for Frontend service 7234 for History service 7235 for Matching service 7239 for Worker service",
                  "type": "integer"
                },
                "replicas": {
                  "description": "Number of desired replicas for the service. Default to 1.",
                  "format": "int32",
                  "minimum": 1,
                  "type": "integer"
                },
                "resources": {
                  "description": "Compute Resources required by this service. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "properties": {
                    "claims": {
                      "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers.",
                      "items": {
                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                        "properties": {
                          "name": {
                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array",
                      "x-kubernetes-list-map-keys": [
                        "name"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "limits": {
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object"
                    },
                    "requests": {
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "matching": {
              "description": "Matching service custom specifications.",
              "properties": {
                "httpPort": {
                  "description": "HTTPPort defines a custom http port for the service. Default values are: 7243 for Frontend service",
                  "type": "integer"
                },
                "membershipPort": {
                  "description": "MembershipPort defines a custom membership port for the service. Default values are: 6933 for Frontend service 6934 for History service 6935 for Matching service 6939 for Worker service",
                  "type": "integer"
                },
                "overrides": {
                  "description": "Overrides adds some overrides to the resources deployed for the service. Those overrides takes precedence over spec.services.overrides.",
                  "properties": {
                    "deployment": {
                      "description": "Override configuration for the temporal service Deployment.",
                      "properties": {
                        "metadata": {
                          "description": "ObjectMetaOverride provides the ability to override an object metadata. It's a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta.",
                          "properties": {
                            "annotations": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
                              "type": "object"
                            },
                            "labels": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.",
                              "type": "object"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "spec": {
                          "description": "Specification of the desired behavior of the Deployment.",
                          "properties": {
                            "template": {
                              "description": "Template describes the pods that will be created.",
                              "properties": {
                                "metadata": {
                                  "description": "ObjectMetaOverride provides the ability to override an object metadata. It's a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta.",
                                  "properties": {
                                    "annotations": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
                                      "type": "object"
                                    },
                                    "labels": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.",
                                      "type": "object"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "spec": {
                                  "description": "Specification of the desired behavior of the pod.",
                                  "type": "object",
                                  "x-kubernetes-preserve-unknown-fields": true
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "port": {
                  "description": "Port defines a custom gRPC port for the service. Default values are: 7233 for Frontend service 7234 for History service 7235 for Matching service 7239 for Worker service",
                  "type": "integer"
                },
                "replicas": {
                  "description": "Number of desired replicas for the service. Default to 1.",
                  "format": "int32",
                  "minimum": 1,
                  "type": "integer"
                },
                "resources": {
                  "description": "Compute Resources required by this service. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "properties": {
                    "claims": {
                      "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers.",
                      "items": {
                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                        "properties": {
                          "name": {
                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array",
                      "x-kubernetes-list-map-keys": [
                        "name"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "limits": {
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object"
                    },
                    "requests": {
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "overrides": {
              "description": "Overrides adds some overrides to the resources deployed for all temporal services services. Those overrides can be customized per service using spec.services.<serviceName>.overrides.",
              "properties": {
                "deployment": {
                  "description": "Override configuration for the temporal service Deployment.",
                  "properties": {
                    "metadata": {
                      "description": "ObjectMetaOverride provides the ability to override an object metadata. It's a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta.",
                      "properties": {
                        "annotations": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
                          "type": "object"
                        },
                        "labels": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.",
                          "type": "object"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "spec": {
                      "description": "Specification of the desired behavior of the Deployment.",
                      "properties": {
                        "template": {
                          "description": "Template describes the pods that will be created.",
                          "properties": {
                            "metadata": {
                              "description": "ObjectMetaOverride provides the ability to override an object metadata. It's a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta.",
                              "properties": {
                                "annotations": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
                                  "type": "object"
                                },
                                "labels": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.",
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            },
                            "spec": {
                              "description": "Specification of the desired behavior of the pod.",
                              "type": "object",
                              "x-kubernetes-preserve-unknown-fields": true
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "worker": {
              "description": "Worker service custom specifications.",
              "properties": {
                "httpPort": {
                  "description": "HTTPPort defines a custom http port for the service. Default values are: 7243 for Frontend service",
                  "type": "integer"
                },
                "membershipPort": {
                  "description": "MembershipPort defines a custom membership port for the service. Default values are: 6933 for Frontend service 6934 for History service 6935 for Matching service 6939 for Worker service",
                  "type": "integer"
                },
                "overrides": {
                  "description": "Overrides adds some overrides to the resources deployed for the service. Those overrides takes precedence over spec.services.overrides.",
                  "properties": {
                    "deployment": {
                      "description": "Override configuration for the temporal service Deployment.",
                      "properties": {
                        "metadata": {
                          "description": "ObjectMetaOverride provides the ability to override an object metadata. It's a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta.",
                          "properties": {
                            "annotations": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
                              "type": "object"
                            },
                            "labels": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.",
                              "type": "object"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "spec": {
                          "description": "Specification of the desired behavior of the Deployment.",
                          "properties": {
                            "template": {
                              "description": "Template describes the pods that will be created.",
                              "properties": {
                                "metadata": {
                                  "description": "ObjectMetaOverride provides the ability to override an object metadata. It's a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta.",
                                  "properties": {
                                    "annotations": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
                                      "type": "object"
                                    },
                                    "labels": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.",
                                      "type": "object"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "spec": {
                                  "description": "Specification of the desired behavior of the pod.",
                                  "type": "object",
                                  "x-kubernetes-preserve-unknown-fields": true
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "port": {
                  "description": "Port defines a custom gRPC port for the service. Default values are: 7233 for Frontend service 7234 for History service 7235 for Matching service 7239 for Worker service",
                  "type": "integer"
                },
                "replicas": {
                  "description": "Number of desired replicas for the service. Default to 1.",
                  "format": "int32",
                  "minimum": 1,
                  "type": "integer"
                },
                "resources": {
                  "description": "Compute Resources required by this service. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "properties": {
                    "claims": {
                      "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers.",
                      "items": {
                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                        "properties": {
                          "name": {
                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array",
                      "x-kubernetes-list-map-keys": [
                        "name"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "limits": {
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object"
                    },
                    "requests": {
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "ui": {
          "description": "UI allows configuration of the optional temporal web ui deployed alongside the cluster.",
          "properties": {
            "enabled": {
              "description": "Enabled defines if the operator should deploy the web ui alongside the cluster.",
              "type": "boolean"
            },
            "image": {
              "description": "Image defines the temporal ui docker image the instance should run.",
              "type": "string"
            },
            "ingress": {
              "description": "Ingress is an optional ingress configuration for the UI. If lived empty, no ingress configuration will be created and the UI will only by available trough ClusterIP service.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations allows custom annotations on the ingress ressource.",
                  "type": "object"
                },
                "hosts": {
                  "description": "Host is the list of host the ingress should use.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "ingressClassName": {
                  "description": "IngressClassName is the name of the IngressClass the deployed ingress resource should use.",
                  "type": "string"
                },
                "tls": {
                  "description": "TLS configuration.",
                  "items": {
                    "description": "IngressTLS describes the transport layer security associated with an ingress.",
                    "properties": {
                      "hosts": {
                        "description": "hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "secretName": {
                        "description": "secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the \"Host\" header is used for routing.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "required": [
                "hosts"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "overrides": {
              "description": "Overrides adds some overrides to the resources deployed for the ui.",
              "properties": {
                "deployment": {
                  "description": "Override configuration for the temporal service Deployment.",
                  "properties": {
                    "metadata": {
                      "description": "ObjectMetaOverride provides the ability to override an object metadata. It's a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta.",
                      "properties": {
                        "annotations": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
                          "type": "object"
                        },
                        "labels": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.",
                          "type": "object"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "spec": {
                      "description": "Specification of the desired behavior of the Deployment.",
                      "properties": {
                        "template": {
                          "description": "Template describes the pods that will be created.",
                          "properties": {
                            "metadata": {
                              "description": "ObjectMetaOverride provides the ability to override an object metadata. It's a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta.",
                              "properties": {
                                "annotations": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
                                  "type": "object"
                                },
                                "labels": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.",
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            },
                            "spec": {
                              "description": "Specification of the desired behavior of the pod.",
                              "type": "object",
                              "x-kubernetes-preserve-unknown-fields": true
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "replicas": {
              "description": "Number of desired replicas for the ui. Default to 1.",
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            },
            "resources": {
              "description": "Compute Resources required by the ui. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "properties": {
                "claims": {
                  "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers.",
                  "items": {
                    "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                    "properties": {
                      "name": {
                        "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array",
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                },
                "limits": {
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  },
                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object"
                },
                "requests": {
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  },
                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "service": {
              "description": "Service is an optional service resource configuration for the UI.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.",
                  "type": "object"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "version": {
              "description": "Version defines the temporal ui version the instance should run.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "version": {
          "description": "Version defines the temporal version the cluster to be deployed. This version impacts the underlying persistence schemas versions.",
          "type": "string"
        }
      },
      "required": [
        "numHistoryShards",
        "persistence"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "Most recent observed status of the Temporal cluster.",
      "properties": {
        "conditions": {
          "description": "Conditions represent the latest available observations of the Cluster state.",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "persistence": {
          "description": "Persistence holds all datastores statuses.",
          "properties": {
            "advancedVisibilityStore": {
              "description": "AdvancedVisibilityStore holds the avanced visibility datastore status.",
              "properties": {
                "created": {
                  "description": "Created indicates if the database or keyspace has been created.",
                  "type": "boolean"
                },
                "schemaVersion": {
                  "description": "SchemaVersion report the current schema version.",
                  "type": "string"
                },
                "setup": {
                  "description": "Setup indicates if tables have been set up.",
                  "type": "boolean"
                },
                "type": {
                  "description": "Type indicates the datastore stype.",
                  "type": "string"
                }
              },
              "required": [
                "created",
                "setup"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "defaultStore": {
              "description": "DefaultStore holds the default datastore status.",
              "properties": {
                "created": {
                  "description": "Created indicates if the database or keyspace has been created.",
                  "type": "boolean"
                },
                "schemaVersion": {
                  "description": "SchemaVersion report the current schema version.",
                  "type": "string"
                },
                "setup": {
                  "description": "Setup indicates if tables have been set up.",
                  "type": "boolean"
                },
                "type": {
                  "description": "Type indicates the datastore stype.",
                  "type": "string"
                }
              },
              "required": [
                "created",
                "setup"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "secondaryVisibilityStore": {
              "description": "SecondaryVisibilityStore holds the secondary visibility datastore status.",
              "properties": {
                "created": {
                  "description": "Created indicates if the database or keyspace has been created.",
                  "type": "boolean"
                },
                "schemaVersion": {
                  "description": "SchemaVersion report the current schema version.",
                  "type": "string"
                },
                "setup": {
                  "description": "Setup indicates if tables have been set up.",
                  "type": "boolean"
                },
                "type": {
                  "description": "Type indicates the datastore stype.",
                  "type": "string"
                }
              },
              "required": [
                "created",
                "setup"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "visibilityStore": {
              "description": "VisibilityStore holds the visibility datastore status.",
              "properties": {
                "created": {
                  "description": "Created indicates if the database or keyspace has been created.",
                  "type": "boolean"
                },
                "schemaVersion": {
                  "description": "SchemaVersion report the current schema version.",
                  "type": "string"
                },
                "setup": {
                  "description": "Setup indicates if tables have been set up.",
                  "type": "boolean"
                },
                "type": {
                  "description": "Type indicates the datastore stype.",
                  "type": "string"
                }
              },
              "required": [
                "created",
                "setup"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "defaultStore",
            "visibilityStore"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "services": {
          "description": "Services holds all services statuses.",
          "items": {
            "description": "ServiceStatus reports a service status.",
            "properties": {
              "name": {
                "description": "Name of the temporal service.",
                "type": "string"
              },
              "ready": {
                "description": "Ready defines if the service is ready.",
                "type": "boolean"
              },
              "version": {
                "description": "Current observed version of the service.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "ready",
              "version"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "version": {
          "description": "Version holds the current temporal version.",
          "type": "string"
        }
      },
      "required": [
        "conditions"
      ],
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
