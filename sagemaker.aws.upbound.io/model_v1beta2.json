{
  "description": "Model is the Schema for the Models API. Provides a SageMaker model resource.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ModelSpec defines the desired state of Model",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "container": {
              "description": "Specifies containers in the inference pipeline. If not specified, the primary_container argument is required. Fields are documented below.",
              "items": {
                "properties": {
                  "containerHostname": {
                    "description": "The DNS host name for the container.",
                    "type": "string"
                  },
                  "environment": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Environment variables for the Docker container.\nA list of key value pairs.",
                    "type": "object",
                    "x-kubernetes-map-type": "granular"
                  },
                  "image": {
                    "description": "The registry path where the inference code image is stored in Amazon ECR.",
                    "type": "string"
                  },
                  "imageConfig": {
                    "description": "Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see Using a Private Docker Registry for Real-Time Inference Containers. see Image Config.",
                    "properties": {
                      "repositoryAccessMode": {
                        "description": "Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: Platform and Vpc.",
                        "type": "string"
                      },
                      "repositoryAuthConfig": {
                        "description": "Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.",
                        "properties": {
                          "repositoryCredentialsProviderArn": {
                            "description": "The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see Create a Lambda function with the console in the AWS Lambda Developer Guide.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "inferenceSpecificationName": {
                    "description": "The inference specification name in the model package version.",
                    "type": "string"
                  },
                  "mode": {
                    "description": "The container hosts value SingleModel/MultiModel. The default value is SingleModel.",
                    "type": "string"
                  },
                  "modelDataSource": {
                    "description": "The location of model data to deploy. Use this for uncompressed model deployment. For information about how to deploy an uncompressed model, see Deploying uncompressed models in the AWS SageMaker Developer Guide.",
                    "properties": {
                      "s3DataSource": {
                        "description": "The S3 location of model data to deploy.",
                        "items": {
                          "properties": {
                            "compressionType": {
                              "description": "How the model data is prepared. Allowed values are: None and Gzip.",
                              "type": "string"
                            },
                            "modelAccessConfig": {
                              "description": "Specifies the access configuration file for the ML model. You can explicitly accept the model end-user license agreement (EULA) within the [model_access_config configuration block]. see Model Access Config.",
                              "properties": {
                                "acceptEula": {
                                  "description": "Specifies agreement to the model end-user license agreement (EULA). The AcceptEula value must be explicitly defined as true in order to accept the EULA that this model requires. You are responsible for reviewing and complying with any applicable license terms and making sure they are acceptable for your use case before downloading or using a model.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            },
                            "s3DataType": {
                              "description": "The type of model data to deploy. Allowed values are: S3Object and S3Prefix.",
                              "type": "string"
                            },
                            "s3Uri": {
                              "description": "The S3 path of model data to deploy.",
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "modelDataUrl": {
                    "description": "The URL for the S3 location where model artifacts are stored.",
                    "type": "string"
                  },
                  "modelPackageName": {
                    "description": "The Amazon Resource Name (ARN) of the model package to use to create the model.",
                    "type": "string"
                  },
                  "multiModelConfig": {
                    "description": "Specifies additional configuration for multi-model endpoints. see Multi Model Config.",
                    "properties": {
                      "modelCacheSetting": {
                        "description": "Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to Disabled. Allowed values are: Enabled and Disabled.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "enableNetworkIsolation": {
              "description": "Isolates the model container. No inbound or outbound network calls can be made to or from the model container.",
              "type": "boolean"
            },
            "executionRoleArn": {
              "description": "A role that SageMaker can assume to access model artifacts and docker images for deployment.",
              "type": "string"
            },
            "executionRoleArnRef": {
              "description": "Reference to a Role in iam to populate executionRoleArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "executionRoleArnSelector": {
              "description": "Selector for a Role in iam to populate executionRoleArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "inferenceExecutionConfig": {
              "description": "Specifies details of how containers in a multi-container endpoint are called. see Inference Execution Config.",
              "properties": {
                "mode": {
                  "description": "The container hosts value SingleModel/MultiModel. The default value is SingleModel.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "primaryContainer": {
              "description": "The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the container argument is required. Fields are documented below.",
              "properties": {
                "containerHostname": {
                  "description": "The DNS host name for the container.",
                  "type": "string"
                },
                "environment": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Environment variables for the Docker container.\nA list of key value pairs.",
                  "type": "object",
                  "x-kubernetes-map-type": "granular"
                },
                "image": {
                  "description": "The registry path where the inference code image is stored in Amazon ECR.",
                  "type": "string"
                },
                "imageConfig": {
                  "description": "Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see Using a Private Docker Registry for Real-Time Inference Containers. see Image Config.",
                  "properties": {
                    "repositoryAccessMode": {
                      "description": "Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: Platform and Vpc.",
                      "type": "string"
                    },
                    "repositoryAuthConfig": {
                      "description": "Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.",
                      "properties": {
                        "repositoryCredentialsProviderArn": {
                          "description": "The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see Create a Lambda function with the console in the AWS Lambda Developer Guide.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "inferenceSpecificationName": {
                  "description": "The inference specification name in the model package version.",
                  "type": "string"
                },
                "mode": {
                  "description": "The container hosts value SingleModel/MultiModel. The default value is SingleModel.",
                  "type": "string"
                },
                "modelDataSource": {
                  "description": "The location of model data to deploy. Use this for uncompressed model deployment. For information about how to deploy an uncompressed model, see Deploying uncompressed models in the AWS SageMaker Developer Guide.",
                  "properties": {
                    "s3DataSource": {
                      "description": "The S3 location of model data to deploy.",
                      "items": {
                        "properties": {
                          "compressionType": {
                            "description": "How the model data is prepared. Allowed values are: None and Gzip.",
                            "type": "string"
                          },
                          "modelAccessConfig": {
                            "description": "Specifies the access configuration file for the ML model. You can explicitly accept the model end-user license agreement (EULA) within the [model_access_config configuration block]. see Model Access Config.",
                            "properties": {
                              "acceptEula": {
                                "description": "Specifies agreement to the model end-user license agreement (EULA). The AcceptEula value must be explicitly defined as true in order to accept the EULA that this model requires. You are responsible for reviewing and complying with any applicable license terms and making sure they are acceptable for your use case before downloading or using a model.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "s3DataType": {
                            "description": "The type of model data to deploy. Allowed values are: S3Object and S3Prefix.",
                            "type": "string"
                          },
                          "s3Uri": {
                            "description": "The S3 path of model data to deploy.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "modelDataUrl": {
                  "description": "The URL for the S3 location where model artifacts are stored.",
                  "type": "string"
                },
                "modelPackageName": {
                  "description": "The Amazon Resource Name (ARN) of the model package to use to create the model.",
                  "type": "string"
                },
                "multiModelConfig": {
                  "description": "Specifies additional configuration for multi-model endpoints. see Multi Model Config.",
                  "properties": {
                    "modelCacheSetting": {
                      "description": "Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to Disabled. Allowed values are: Enabled and Disabled.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "vpcConfig": {
              "description": "Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.",
              "properties": {
                "securityGroupIds": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                },
                "subnets": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "properties": {
            "container": {
              "description": "Specifies containers in the inference pipeline. If not specified, the primary_container argument is required. Fields are documented below.",
              "items": {
                "properties": {
                  "containerHostname": {
                    "description": "The DNS host name for the container.",
                    "type": "string"
                  },
                  "environment": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Environment variables for the Docker container.\nA list of key value pairs.",
                    "type": "object",
                    "x-kubernetes-map-type": "granular"
                  },
                  "image": {
                    "description": "The registry path where the inference code image is stored in Amazon ECR.",
                    "type": "string"
                  },
                  "imageConfig": {
                    "description": "Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see Using a Private Docker Registry for Real-Time Inference Containers. see Image Config.",
                    "properties": {
                      "repositoryAccessMode": {
                        "description": "Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: Platform and Vpc.",
                        "type": "string"
                      },
                      "repositoryAuthConfig": {
                        "description": "Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.",
                        "properties": {
                          "repositoryCredentialsProviderArn": {
                            "description": "The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see Create a Lambda function with the console in the AWS Lambda Developer Guide.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "inferenceSpecificationName": {
                    "description": "The inference specification name in the model package version.",
                    "type": "string"
                  },
                  "mode": {
                    "description": "The container hosts value SingleModel/MultiModel. The default value is SingleModel.",
                    "type": "string"
                  },
                  "modelDataSource": {
                    "description": "The location of model data to deploy. Use this for uncompressed model deployment. For information about how to deploy an uncompressed model, see Deploying uncompressed models in the AWS SageMaker Developer Guide.",
                    "properties": {
                      "s3DataSource": {
                        "description": "The S3 location of model data to deploy.",
                        "items": {
                          "properties": {
                            "compressionType": {
                              "description": "How the model data is prepared. Allowed values are: None and Gzip.",
                              "type": "string"
                            },
                            "modelAccessConfig": {
                              "description": "Specifies the access configuration file for the ML model. You can explicitly accept the model end-user license agreement (EULA) within the [model_access_config configuration block]. see Model Access Config.",
                              "properties": {
                                "acceptEula": {
                                  "description": "Specifies agreement to the model end-user license agreement (EULA). The AcceptEula value must be explicitly defined as true in order to accept the EULA that this model requires. You are responsible for reviewing and complying with any applicable license terms and making sure they are acceptable for your use case before downloading or using a model.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            },
                            "s3DataType": {
                              "description": "The type of model data to deploy. Allowed values are: S3Object and S3Prefix.",
                              "type": "string"
                            },
                            "s3Uri": {
                              "description": "The S3 path of model data to deploy.",
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "modelDataUrl": {
                    "description": "The URL for the S3 location where model artifacts are stored.",
                    "type": "string"
                  },
                  "modelPackageName": {
                    "description": "The Amazon Resource Name (ARN) of the model package to use to create the model.",
                    "type": "string"
                  },
                  "multiModelConfig": {
                    "description": "Specifies additional configuration for multi-model endpoints. see Multi Model Config.",
                    "properties": {
                      "modelCacheSetting": {
                        "description": "Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to Disabled. Allowed values are: Enabled and Disabled.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "enableNetworkIsolation": {
              "description": "Isolates the model container. No inbound or outbound network calls can be made to or from the model container.",
              "type": "boolean"
            },
            "executionRoleArn": {
              "description": "A role that SageMaker can assume to access model artifacts and docker images for deployment.",
              "type": "string"
            },
            "executionRoleArnRef": {
              "description": "Reference to a Role in iam to populate executionRoleArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "executionRoleArnSelector": {
              "description": "Selector for a Role in iam to populate executionRoleArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "inferenceExecutionConfig": {
              "description": "Specifies details of how containers in a multi-container endpoint are called. see Inference Execution Config.",
              "properties": {
                "mode": {
                  "description": "The container hosts value SingleModel/MultiModel. The default value is SingleModel.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "primaryContainer": {
              "description": "The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the container argument is required. Fields are documented below.",
              "properties": {
                "containerHostname": {
                  "description": "The DNS host name for the container.",
                  "type": "string"
                },
                "environment": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Environment variables for the Docker container.\nA list of key value pairs.",
                  "type": "object",
                  "x-kubernetes-map-type": "granular"
                },
                "image": {
                  "description": "The registry path where the inference code image is stored in Amazon ECR.",
                  "type": "string"
                },
                "imageConfig": {
                  "description": "Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see Using a Private Docker Registry for Real-Time Inference Containers. see Image Config.",
                  "properties": {
                    "repositoryAccessMode": {
                      "description": "Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: Platform and Vpc.",
                      "type": "string"
                    },
                    "repositoryAuthConfig": {
                      "description": "Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.",
                      "properties": {
                        "repositoryCredentialsProviderArn": {
                          "description": "The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see Create a Lambda function with the console in the AWS Lambda Developer Guide.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "inferenceSpecificationName": {
                  "description": "The inference specification name in the model package version.",
                  "type": "string"
                },
                "mode": {
                  "description": "The container hosts value SingleModel/MultiModel. The default value is SingleModel.",
                  "type": "string"
                },
                "modelDataSource": {
                  "description": "The location of model data to deploy. Use this for uncompressed model deployment. For information about how to deploy an uncompressed model, see Deploying uncompressed models in the AWS SageMaker Developer Guide.",
                  "properties": {
                    "s3DataSource": {
                      "description": "The S3 location of model data to deploy.",
                      "items": {
                        "properties": {
                          "compressionType": {
                            "description": "How the model data is prepared. Allowed values are: None and Gzip.",
                            "type": "string"
                          },
                          "modelAccessConfig": {
                            "description": "Specifies the access configuration file for the ML model. You can explicitly accept the model end-user license agreement (EULA) within the [model_access_config configuration block]. see Model Access Config.",
                            "properties": {
                              "acceptEula": {
                                "description": "Specifies agreement to the model end-user license agreement (EULA). The AcceptEula value must be explicitly defined as true in order to accept the EULA that this model requires. You are responsible for reviewing and complying with any applicable license terms and making sure they are acceptable for your use case before downloading or using a model.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "s3DataType": {
                            "description": "The type of model data to deploy. Allowed values are: S3Object and S3Prefix.",
                            "type": "string"
                          },
                          "s3Uri": {
                            "description": "The S3 path of model data to deploy.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "modelDataUrl": {
                  "description": "The URL for the S3 location where model artifacts are stored.",
                  "type": "string"
                },
                "modelPackageName": {
                  "description": "The Amazon Resource Name (ARN) of the model package to use to create the model.",
                  "type": "string"
                },
                "multiModelConfig": {
                  "description": "Specifies additional configuration for multi-model endpoints. see Multi Model Config.",
                  "properties": {
                    "modelCacheSetting": {
                      "description": "Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to Disabled. Allowed values are: Enabled and Disabled.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "vpcConfig": {
              "description": "Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.",
              "properties": {
                "securityGroupIds": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                },
                "subnets": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which\ncontains a name, metadata and a reference to secret store config to\nwhich any connection details for this managed resource should be written.\nConnection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used\nfor this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.annotations\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.labels\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret.\n- Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.\nThis field is planned to be replaced in a future release in favor of\nPublishConnectionDetailsTo. Currently, both could be set independently\nand connection details would be published to both without affecting\neach other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "ModelStatus defines the observed state of Model.",
      "properties": {
        "atProvider": {
          "properties": {
            "arn": {
              "description": "The Amazon Resource Name (ARN) assigned by AWS to this model.",
              "type": "string"
            },
            "container": {
              "description": "Specifies containers in the inference pipeline. If not specified, the primary_container argument is required. Fields are documented below.",
              "items": {
                "properties": {
                  "containerHostname": {
                    "description": "The DNS host name for the container.",
                    "type": "string"
                  },
                  "environment": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Environment variables for the Docker container.\nA list of key value pairs.",
                    "type": "object",
                    "x-kubernetes-map-type": "granular"
                  },
                  "image": {
                    "description": "The registry path where the inference code image is stored in Amazon ECR.",
                    "type": "string"
                  },
                  "imageConfig": {
                    "description": "Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see Using a Private Docker Registry for Real-Time Inference Containers. see Image Config.",
                    "properties": {
                      "repositoryAccessMode": {
                        "description": "Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: Platform and Vpc.",
                        "type": "string"
                      },
                      "repositoryAuthConfig": {
                        "description": "Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.",
                        "properties": {
                          "repositoryCredentialsProviderArn": {
                            "description": "The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see Create a Lambda function with the console in the AWS Lambda Developer Guide.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "inferenceSpecificationName": {
                    "description": "The inference specification name in the model package version.",
                    "type": "string"
                  },
                  "mode": {
                    "description": "The container hosts value SingleModel/MultiModel. The default value is SingleModel.",
                    "type": "string"
                  },
                  "modelDataSource": {
                    "description": "The location of model data to deploy. Use this for uncompressed model deployment. For information about how to deploy an uncompressed model, see Deploying uncompressed models in the AWS SageMaker Developer Guide.",
                    "properties": {
                      "s3DataSource": {
                        "description": "The S3 location of model data to deploy.",
                        "items": {
                          "properties": {
                            "compressionType": {
                              "description": "How the model data is prepared. Allowed values are: None and Gzip.",
                              "type": "string"
                            },
                            "modelAccessConfig": {
                              "description": "Specifies the access configuration file for the ML model. You can explicitly accept the model end-user license agreement (EULA) within the [model_access_config configuration block]. see Model Access Config.",
                              "properties": {
                                "acceptEula": {
                                  "description": "Specifies agreement to the model end-user license agreement (EULA). The AcceptEula value must be explicitly defined as true in order to accept the EULA that this model requires. You are responsible for reviewing and complying with any applicable license terms and making sure they are acceptable for your use case before downloading or using a model.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            },
                            "s3DataType": {
                              "description": "The type of model data to deploy. Allowed values are: S3Object and S3Prefix.",
                              "type": "string"
                            },
                            "s3Uri": {
                              "description": "The S3 path of model data to deploy.",
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "modelDataUrl": {
                    "description": "The URL for the S3 location where model artifacts are stored.",
                    "type": "string"
                  },
                  "modelPackageName": {
                    "description": "The Amazon Resource Name (ARN) of the model package to use to create the model.",
                    "type": "string"
                  },
                  "multiModelConfig": {
                    "description": "Specifies additional configuration for multi-model endpoints. see Multi Model Config.",
                    "properties": {
                      "modelCacheSetting": {
                        "description": "Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to Disabled. Allowed values are: Enabled and Disabled.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "enableNetworkIsolation": {
              "description": "Isolates the model container. No inbound or outbound network calls can be made to or from the model container.",
              "type": "boolean"
            },
            "executionRoleArn": {
              "description": "A role that SageMaker can assume to access model artifacts and docker images for deployment.",
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "inferenceExecutionConfig": {
              "description": "Specifies details of how containers in a multi-container endpoint are called. see Inference Execution Config.",
              "properties": {
                "mode": {
                  "description": "The container hosts value SingleModel/MultiModel. The default value is SingleModel.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "primaryContainer": {
              "description": "The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the container argument is required. Fields are documented below.",
              "properties": {
                "containerHostname": {
                  "description": "The DNS host name for the container.",
                  "type": "string"
                },
                "environment": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Environment variables for the Docker container.\nA list of key value pairs.",
                  "type": "object",
                  "x-kubernetes-map-type": "granular"
                },
                "image": {
                  "description": "The registry path where the inference code image is stored in Amazon ECR.",
                  "type": "string"
                },
                "imageConfig": {
                  "description": "Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see Using a Private Docker Registry for Real-Time Inference Containers. see Image Config.",
                  "properties": {
                    "repositoryAccessMode": {
                      "description": "Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: Platform and Vpc.",
                      "type": "string"
                    },
                    "repositoryAuthConfig": {
                      "description": "Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.",
                      "properties": {
                        "repositoryCredentialsProviderArn": {
                          "description": "The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see Create a Lambda function with the console in the AWS Lambda Developer Guide.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "inferenceSpecificationName": {
                  "description": "The inference specification name in the model package version.",
                  "type": "string"
                },
                "mode": {
                  "description": "The container hosts value SingleModel/MultiModel. The default value is SingleModel.",
                  "type": "string"
                },
                "modelDataSource": {
                  "description": "The location of model data to deploy. Use this for uncompressed model deployment. For information about how to deploy an uncompressed model, see Deploying uncompressed models in the AWS SageMaker Developer Guide.",
                  "properties": {
                    "s3DataSource": {
                      "description": "The S3 location of model data to deploy.",
                      "items": {
                        "properties": {
                          "compressionType": {
                            "description": "How the model data is prepared. Allowed values are: None and Gzip.",
                            "type": "string"
                          },
                          "modelAccessConfig": {
                            "description": "Specifies the access configuration file for the ML model. You can explicitly accept the model end-user license agreement (EULA) within the [model_access_config configuration block]. see Model Access Config.",
                            "properties": {
                              "acceptEula": {
                                "description": "Specifies agreement to the model end-user license agreement (EULA). The AcceptEula value must be explicitly defined as true in order to accept the EULA that this model requires. You are responsible for reviewing and complying with any applicable license terms and making sure they are acceptable for your use case before downloading or using a model.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "s3DataType": {
                            "description": "The type of model data to deploy. Allowed values are: S3Object and S3Prefix.",
                            "type": "string"
                          },
                          "s3Uri": {
                            "description": "The S3 path of model data to deploy.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "modelDataUrl": {
                  "description": "The URL for the S3 location where model artifacts are stored.",
                  "type": "string"
                },
                "modelPackageName": {
                  "description": "The Amazon Resource Name (ARN) of the model package to use to create the model.",
                  "type": "string"
                },
                "multiModelConfig": {
                  "description": "Specifies additional configuration for multi-model endpoints. see Multi Model Config.",
                  "properties": {
                    "modelCacheSetting": {
                      "description": "Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to Disabled. Allowed values are: Enabled and Disabled.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "vpcConfig": {
              "description": "Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.",
              "properties": {
                "securityGroupIds": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                },
                "subnets": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
