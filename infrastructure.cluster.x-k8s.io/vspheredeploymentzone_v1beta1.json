{
  "description": "VSphereDeploymentZone is the Schema for the vspheredeploymentzones API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "VSphereDeploymentZoneSpec defines the desired state of VSphereDeploymentZone",
      "properties": {
        "controlPlane": {
          "description": "ControlPlane determines if this failure domain is suitable for use by control plane machines.",
          "type": "boolean"
        },
        "failureDomain": {
          "description": "FailureDomain is the name of the VSphereFailureDomain used for this VSphereDeploymentZone",
          "type": "string"
        },
        "placementConstraint": {
          "description": "PlacementConstraint encapsulates the placement constraints used within this deployment zone.",
          "properties": {
            "folder": {
              "description": "Folder is the name or inventory path of the folder in which the virtual machine is created/located.",
              "type": "string"
            },
            "resourcePool": {
              "description": "ResourcePool is the name or inventory path of the resource pool in which the virtual machine is created/located.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "server": {
          "description": "Server is the address of the vSphere endpoint.",
          "type": "string"
        }
      },
      "required": [
        "placementConstraint"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "properties": {
        "conditions": {
          "description": "Conditions defines current service state of the VSphereMachine.",
          "items": {
            "description": "Condition defines an observation of a Cluster API resource operational state.",
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A human readable message indicating details about the transition. This field may be empty.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.",
                "type": "string"
              },
              "severity": {
                "description": "Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "ready": {
          "description": "Ready is true when the VSphereDeploymentZone resource is ready. If set to false, it will be ignored by VSphereClusters",
          "type": "boolean"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
