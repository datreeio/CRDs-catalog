{
  "description": "Application is the Schema for the Applications API. Provides an OpsWorks application resource.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ApplicationSpec defines the desired state of Application",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "appSource": {
              "description": "SCM configuration of the app as described below.",
              "items": {
                "properties": {
                  "passwordSecretRef": {
                    "description": "Password to use when authenticating to the source.",
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "key",
                      "name",
                      "namespace"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "revision": {
                    "description": "For sources that are version-aware, the revision to use.",
                    "type": "string"
                  },
                  "sshKeySecretRef": {
                    "description": "SSH key to use when authenticating to the source.",
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "key",
                      "name",
                      "namespace"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": {
                    "description": "The type of source to use. For example, \"archive\".",
                    "type": "string"
                  },
                  "url": {
                    "description": "The URL where the app resource can be found.",
                    "type": "string"
                  },
                  "username": {
                    "description": "Username to use when authenticating to the source.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "autoBundleOnDeploy": {
              "description": "Run bundle install when deploying for application of type rails.",
              "type": "string"
            },
            "awsFlowRubySettings": {
              "description": "Specify activity and workflow workers for your app using the aws-flow gem.",
              "type": "string"
            },
            "dataSourceArn": {
              "description": "The data source's ARN.",
              "type": "string"
            },
            "dataSourceDatabaseName": {
              "description": "The database name.",
              "type": "string"
            },
            "dataSourceType": {
              "description": "The data source's type one of AutoSelectOpsworksMysqlInstance, OpsworksMysqlInstance, or RdsDbInstance.",
              "type": "string"
            },
            "description": {
              "description": "A description of the app.",
              "type": "string"
            },
            "documentRoot": {
              "description": "Subfolder for the document root for application of type rails.",
              "type": "string"
            },
            "domains": {
              "description": "A list of virtual host alias.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "enableSsl": {
              "description": "Whether to enable SSL for the app. This must be set in order to let ssl_configuration.private_key, ssl_configuration.certificate and ssl_configuration.chain take effect.",
              "type": "boolean"
            },
            "environment": {
              "description": "Object to define environment variables.  Object is described below.",
              "items": {
                "properties": {
                  "key": {
                    "description": "Variable name.",
                    "type": "string"
                  },
                  "secure": {
                    "description": "Set visibility of the variable value to true or false.",
                    "type": "boolean"
                  },
                  "value": {
                    "description": "Variable value.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "name": {
              "description": "A human-readable name for the application.",
              "type": "string"
            },
            "railsEnv": {
              "description": "The name of the Rails environment for application of type rails.",
              "type": "string"
            },
            "shortName": {
              "description": "A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.",
              "type": "string"
            },
            "sslConfiguration": {
              "description": "The SSL configuration of the app. Object is described below.",
              "items": {
                "properties": {
                  "certificate": {
                    "description": "The contents of the certificate's domain.crt file.",
                    "type": "string"
                  },
                  "chain": {
                    "description": "Can be used to specify an intermediate certificate authority key or client authentication.",
                    "type": "string"
                  },
                  "privateKeySecretRef": {
                    "description": "The private key; the contents of the certificate's domain.key file.",
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "key",
                      "name",
                      "namespace"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "privateKeySecretRef"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "stackId": {
              "description": "ID of the stack the application will belong to.",
              "type": "string"
            },
            "stackIdRef": {
              "description": "Reference to a Stack in opsworks to populate stackId.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "stackIdSelector": {
              "description": "Selector for a Stack in opsworks to populate stackId.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "type": {
              "description": "Opsworks application type. One of aws-flow-ruby, java, rails, php, nodejs, static or other.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "properties": {
            "appSource": {
              "description": "SCM configuration of the app as described below.",
              "items": {
                "properties": {
                  "revision": {
                    "description": "For sources that are version-aware, the revision to use.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of source to use. For example, \"archive\".",
                    "type": "string"
                  },
                  "url": {
                    "description": "The URL where the app resource can be found.",
                    "type": "string"
                  },
                  "username": {
                    "description": "Username to use when authenticating to the source.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "autoBundleOnDeploy": {
              "description": "Run bundle install when deploying for application of type rails.",
              "type": "string"
            },
            "awsFlowRubySettings": {
              "description": "Specify activity and workflow workers for your app using the aws-flow gem.",
              "type": "string"
            },
            "dataSourceArn": {
              "description": "The data source's ARN.",
              "type": "string"
            },
            "dataSourceDatabaseName": {
              "description": "The database name.",
              "type": "string"
            },
            "dataSourceType": {
              "description": "The data source's type one of AutoSelectOpsworksMysqlInstance, OpsworksMysqlInstance, or RdsDbInstance.",
              "type": "string"
            },
            "description": {
              "description": "A description of the app.",
              "type": "string"
            },
            "documentRoot": {
              "description": "Subfolder for the document root for application of type rails.",
              "type": "string"
            },
            "domains": {
              "description": "A list of virtual host alias.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "enableSsl": {
              "description": "Whether to enable SSL for the app. This must be set in order to let ssl_configuration.private_key, ssl_configuration.certificate and ssl_configuration.chain take effect.",
              "type": "boolean"
            },
            "environment": {
              "description": "Object to define environment variables.  Object is described below.",
              "items": {
                "properties": {
                  "key": {
                    "description": "Variable name.",
                    "type": "string"
                  },
                  "secure": {
                    "description": "Set visibility of the variable value to true or false.",
                    "type": "boolean"
                  },
                  "value": {
                    "description": "Variable value.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "name": {
              "description": "A human-readable name for the application.",
              "type": "string"
            },
            "railsEnv": {
              "description": "The name of the Rails environment for application of type rails.",
              "type": "string"
            },
            "shortName": {
              "description": "A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.",
              "type": "string"
            },
            "sslConfiguration": {
              "description": "The SSL configuration of the app. Object is described below.",
              "items": {
                "properties": {
                  "certificate": {
                    "description": "The contents of the certificate's domain.crt file.",
                    "type": "string"
                  },
                  "chain": {
                    "description": "Can be used to specify an intermediate certificate authority key or client authentication.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "stackId": {
              "description": "ID of the stack the application will belong to.",
              "type": "string"
            },
            "stackIdRef": {
              "description": "Reference to a Stack in opsworks to populate stackId.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "stackIdSelector": {
              "description": "Selector for a Stack in opsworks to populate stackId.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "type": {
              "description": "Opsworks application type. One of aws-flow-ruby, java, rails, php, nodejs, static or other.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "spec.forProvider.name is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))"
        },
        {
          "message": "spec.forProvider.type is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "ApplicationStatus defines the observed state of Application.",
      "properties": {
        "atProvider": {
          "properties": {
            "appSource": {
              "description": "SCM configuration of the app as described below.",
              "items": {
                "properties": {
                  "revision": {
                    "description": "For sources that are version-aware, the revision to use.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of source to use. For example, \"archive\".",
                    "type": "string"
                  },
                  "url": {
                    "description": "The URL where the app resource can be found.",
                    "type": "string"
                  },
                  "username": {
                    "description": "Username to use when authenticating to the source.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "autoBundleOnDeploy": {
              "description": "Run bundle install when deploying for application of type rails.",
              "type": "string"
            },
            "awsFlowRubySettings": {
              "description": "Specify activity and workflow workers for your app using the aws-flow gem.",
              "type": "string"
            },
            "dataSourceArn": {
              "description": "The data source's ARN.",
              "type": "string"
            },
            "dataSourceDatabaseName": {
              "description": "The database name.",
              "type": "string"
            },
            "dataSourceType": {
              "description": "The data source's type one of AutoSelectOpsworksMysqlInstance, OpsworksMysqlInstance, or RdsDbInstance.",
              "type": "string"
            },
            "description": {
              "description": "A description of the app.",
              "type": "string"
            },
            "documentRoot": {
              "description": "Subfolder for the document root for application of type rails.",
              "type": "string"
            },
            "domains": {
              "description": "A list of virtual host alias.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "enableSsl": {
              "description": "Whether to enable SSL for the app. This must be set in order to let ssl_configuration.private_key, ssl_configuration.certificate and ssl_configuration.chain take effect.",
              "type": "boolean"
            },
            "environment": {
              "description": "Object to define environment variables.  Object is described below.",
              "items": {
                "properties": {
                  "key": {
                    "description": "Variable name.",
                    "type": "string"
                  },
                  "secure": {
                    "description": "Set visibility of the variable value to true or false.",
                    "type": "boolean"
                  },
                  "value": {
                    "description": "Variable value.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "id": {
              "description": "The id of the application.",
              "type": "string"
            },
            "name": {
              "description": "A human-readable name for the application.",
              "type": "string"
            },
            "railsEnv": {
              "description": "The name of the Rails environment for application of type rails.",
              "type": "string"
            },
            "shortName": {
              "description": "A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.",
              "type": "string"
            },
            "sslConfiguration": {
              "description": "The SSL configuration of the app. Object is described below.",
              "items": {
                "properties": {
                  "certificate": {
                    "description": "The contents of the certificate's domain.crt file.",
                    "type": "string"
                  },
                  "chain": {
                    "description": "Can be used to specify an intermediate certificate authority key or client authentication.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "stackId": {
              "description": "ID of the stack the application will belong to.",
              "type": "string"
            },
            "type": {
              "description": "Opsworks application type. One of aws-flow-ruby, java, rails, php, nodejs, static or other.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                "type": "string"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
