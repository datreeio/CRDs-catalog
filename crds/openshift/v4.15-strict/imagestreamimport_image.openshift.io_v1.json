{
    "description": "The image stream import resource provides an easy way for a user to find and import container images from other container image registries into the server. Individual images or an entire image repository may be imported, and users may choose to see the results of the import prior to tagging the resulting images into the specified image stream. \n This API is intended for end-user tools that need to see the metadata of the image prior to import (for instance, to generate an application from it). Clients that know the desired image can continue to create spec.tags directly into their image streams. \n Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
    "properties": {
        "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
        },
        "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
        },
        "metadata": {
            "type": "object"
        },
        "spec": {
            "description": "Spec is a description of the images that the user wishes to import",
            "properties": {
                "images": {
                    "description": "Images are a list of individual images to import.",
                    "items": {
                        "description": "ImageImportSpec describes a request to import a specific image.",
                        "properties": {
                            "from": {
                                "description": "From is the source of an image to import; only kind DockerImage is allowed",
                                "properties": {
                                    "apiVersion": {
                                        "description": "API version of the referent.",
                                        "type": "string"
                                    },
                                    "fieldPath": {
                                        "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                                        "type": "string"
                                    },
                                    "kind": {
                                        "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                        "type": "string"
                                    },
                                    "namespace": {
                                        "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                                        "type": "string"
                                    },
                                    "resourceVersion": {
                                        "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                                        "type": "string"
                                    }
                                },
                                "type": "object",
                                "additionalProperties": false
                            },
                            "importPolicy": {
                                "description": "ImportPolicy is the policy controlling how the image is imported",
                                "properties": {
                                    "importMode": {
                                        "description": "ImportMode describes how to import an image manifest.",
                                        "type": "string"
                                    },
                                    "insecure": {
                                        "description": "Insecure is true if the server may bypass certificate verification or connect directly over HTTP during image import.",
                                        "type": "boolean"
                                    },
                                    "scheduled": {
                                        "description": "Scheduled indicates to the server that this tag should be periodically checked to ensure it is up to date, and imported",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object",
                                "additionalProperties": false
                            },
                            "includeManifest": {
                                "description": "IncludeManifest determines if the manifest for each image is returned in the response",
                                "type": "boolean"
                            },
                            "referencePolicy": {
                                "description": "ReferencePolicy defines how other components should consume the image",
                                "properties": {
                                    "type": {
                                        "description": "Type determines how the image pull spec should be transformed when the image stream tag is used in deployment config triggers or new builds. The default value is `Source`, indicating the original location of the image should be used (if imported). The user may also specify `Local`, indicating that the pull spec should point to the integrated container image registry and leverage the registry's ability to proxy the pull to an upstream registry. `Local` allows the credentials used to pull this image to be managed from the image stream's namespace, so others on the platform can access a remote image but have no access to the remote secret. It also allows the image layers to be mirrored into the local registry which the images can still be pulled even if the upstream registry is unavailable.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "type"
                                ],
                                "type": "object",
                                "additionalProperties": false
                            },
                            "to": {
                                "description": "To is a tag in the current image stream to assign the imported image to, if name is not specified the default tag from from.name will be used",
                                "properties": {
                                    "name": {
                                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                        "type": "string"
                                    }
                                },
                                "type": "object",
                                "additionalProperties": false
                            }
                        },
                        "required": [
                            "from"
                        ],
                        "type": "object",
                        "additionalProperties": false
                    },
                    "type": "array"
                },
                "import": {
                    "description": "Import indicates whether to perform an import - if so, the specified tags are set on the spec and status of the image stream defined by the type meta.",
                    "type": "boolean"
                },
                "repository": {
                    "description": "Repository is an optional import of an entire container image repository. A maximum limit on the number of tags imported this way is imposed by the server.",
                    "properties": {
                        "from": {
                            "description": "From is the source for the image repository to import; only kind DockerImage and a name of a container image repository is allowed",
                            "properties": {
                                "apiVersion": {
                                    "description": "API version of the referent.",
                                    "type": "string"
                                },
                                "fieldPath": {
                                    "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                                    "type": "string"
                                },
                                "kind": {
                                    "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                    "type": "string"
                                },
                                "namespace": {
                                    "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                                    "type": "string"
                                },
                                "resourceVersion": {
                                    "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                                    "type": "string"
                                },
                                "uid": {
                                    "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                                    "type": "string"
                                }
                            },
                            "type": "object",
                            "additionalProperties": false
                        },
                        "importPolicy": {
                            "description": "ImportPolicy is the policy controlling how the image is imported",
                            "properties": {
                                "importMode": {
                                    "description": "ImportMode describes how to import an image manifest.",
                                    "type": "string"
                                },
                                "insecure": {
                                    "description": "Insecure is true if the server may bypass certificate verification or connect directly over HTTP during image import.",
                                    "type": "boolean"
                                },
                                "scheduled": {
                                    "description": "Scheduled indicates to the server that this tag should be periodically checked to ensure it is up to date, and imported",
                                    "type": "boolean"
                                }
                            },
                            "type": "object",
                            "additionalProperties": false
                        },
                        "includeManifest": {
                            "description": "IncludeManifest determines if the manifest for each image is returned in the response",
                            "type": "boolean"
                        },
                        "referencePolicy": {
                            "description": "ReferencePolicy defines how other components should consume the image",
                            "properties": {
                                "type": {
                                    "description": "Type determines how the image pull spec should be transformed when the image stream tag is used in deployment config triggers or new builds. The default value is `Source`, indicating the original location of the image should be used (if imported). The user may also specify `Local`, indicating that the pull spec should point to the integrated container image registry and leverage the registry's ability to proxy the pull to an upstream registry. `Local` allows the credentials used to pull this image to be managed from the image stream's namespace, so others on the platform can access a remote image but have no access to the remote secret. It also allows the image layers to be mirrored into the local registry which the images can still be pulled even if the upstream registry is unavailable.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "type"
                            ],
                            "type": "object",
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "from"
                    ],
                    "type": "object",
                    "additionalProperties": false
                }
            },
            "required": [
                "import"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "status": {
            "description": "Status is the result of importing the image",
            "properties": {
                "images": {
                    "description": "Images is set with the result of importing spec.images",
                    "items": {
                        "description": "ImageImportStatus describes the result of an image import.",
                        "properties": {
                            "image": {
                                "description": "Image is the metadata of that image, if the image was located",
                                "properties": {
                                    "apiVersion": {
                                        "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                        "type": "string"
                                    },
                                    "dockerImageConfig": {
                                        "description": "DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2. Will not be set when the image represents a manifest list.",
                                        "type": "string"
                                    },
                                    "dockerImageLayers": {
                                        "description": "DockerImageLayers represents the layers in the image. May not be set if the image does not define that data or if the image represents a manifest list.",
                                        "items": {
                                            "description": "ImageLayer represents a single layer of the image. Some images may have multiple layers. Some may have none.",
                                            "properties": {
                                                "mediaType": {
                                                    "description": "MediaType of the referenced object.",
                                                    "type": "string"
                                                },
                                                "name": {
                                                    "description": "Name of the layer as defined by the underlying store.",
                                                    "type": "string"
                                                },
                                                "size": {
                                                    "description": "Size of the layer in bytes as defined by the underlying store.",
                                                    "format": "int64",
                                                    "type": "integer",
                                                    "minimum": -9223372036854776000,
                                                    "maximum": 9223372036854776000
                                                }
                                            },
                                            "required": [
                                                "mediaType",
                                                "name",
                                                "size"
                                            ],
                                            "type": "object",
                                            "additionalProperties": false
                                        },
                                        "type": "array"
                                    },
                                    "dockerImageManifest": {
                                        "description": "DockerImageManifest is the raw JSON of the manifest",
                                        "type": "string"
                                    },
                                    "dockerImageManifestMediaType": {
                                        "description": "DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2.",
                                        "type": "string"
                                    },
                                    "dockerImageManifests": {
                                        "description": "DockerImageManifests holds information about sub-manifests when the image represents a manifest list. When this field is present, no DockerImageLayers should be specified.",
                                        "items": {
                                            "description": "ImageManifest represents sub-manifests of a manifest list. The Digest field points to a regular Image object.",
                                            "properties": {
                                                "architecture": {
                                                    "description": "Architecture specifies the supported CPU architecture, for example `amd64` or `ppc64le`.",
                                                    "type": "string"
                                                },
                                                "digest": {
                                                    "description": "Digest is the unique identifier for the manifest. It refers to an Image object.",
                                                    "type": "string"
                                                },
                                                "manifestSize": {
                                                    "description": "ManifestSize represents the size of the raw object contents, in bytes.",
                                                    "format": "int64",
                                                    "type": "integer",
                                                    "minimum": -9223372036854776000,
                                                    "maximum": 9223372036854776000
                                                },
                                                "mediaType": {
                                                    "description": "MediaType defines the type of the manifest, possible values are application/vnd.oci.image.manifest.v1+json, application/vnd.docker.distribution.manifest.v2+json or application/vnd.docker.distribution.manifest.v1+json.",
                                                    "type": "string"
                                                },
                                                "os": {
                                                    "description": "OS specifies the operating system, for example `linux`.",
                                                    "type": "string"
                                                },
                                                "variant": {
                                                    "description": "Variant is an optional field repreenting a variant of the CPU, for example v6 to specify a particular CPU variant of the ARM CPU.",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "architecture",
                                                "digest",
                                                "manifestSize",
                                                "mediaType",
                                                "os"
                                            ],
                                            "type": "object",
                                            "additionalProperties": false
                                        },
                                        "type": "array"
                                    },
                                    "dockerImageMetadata": {
                                        "description": "DockerImageMetadata contains metadata about this image",
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                    },
                                    "dockerImageMetadataVersion": {
                                        "description": "DockerImageMetadataVersion conveys the version of the object, which if empty defaults to \"1.0\"",
                                        "type": "string"
                                    },
                                    "dockerImageReference": {
                                        "description": "DockerImageReference is the string that can be used to pull this image.",
                                        "type": "string"
                                    },
                                    "dockerImageSignatures": {
                                        "description": "DockerImageSignatures provides the signatures as opaque blobs. This is a part of manifest schema v1.",
                                        "items": {
                                            "format": "byte",
                                            "type": "string",
                                            "pattern": "^[\\w\\d+\\/=]*$"
                                        },
                                        "type": "array"
                                    },
                                    "kind": {
                                        "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                        "type": "string"
                                    },
                                    "metadata": {
                                        "description": "metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                                        "type": "object"
                                    },
                                    "signatures": {
                                        "description": "Signatures holds all signatures of the image.",
                                        "items": {
                                            "description": "ImageSignature holds a signature of an image. It allows to verify image identity and possibly other claims as long as the signature is trusted. Based on this information it is possible to restrict runnable images to those matching cluster-wide policy. Mandatory fields should be parsed by clients doing image verification. The others are parsed from signature's content by the server. They serve just an informative purpose. \n Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "conditions": {
                                                    "description": "Conditions represent the latest available observations of a signature's current state.",
                                                    "items": {
                                                        "description": "SignatureCondition describes an image signature condition of particular kind at particular probe time.",
                                                        "properties": {
                                                            "lastProbeTime": {
                                                                "description": "Last time the condition was checked.",
                                                                "format": "date-time",
                                                                "type": "string"
                                                            },
                                                            "lastTransitionTime": {
                                                                "description": "Last time the condition transit from one status to another.",
                                                                "format": "date-time",
                                                                "type": "string"
                                                            },
                                                            "message": {
                                                                "description": "Human readable message indicating details about last transition.",
                                                                "type": "string"
                                                            },
                                                            "reason": {
                                                                "description": "(brief) reason for the condition's last transition.",
                                                                "type": "string"
                                                            },
                                                            "status": {
                                                                "description": "Status of the condition, one of True, False, Unknown.",
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "description": "Type of signature condition, Complete or Failed.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "status",
                                                            "type"
                                                        ],
                                                        "type": "object",
                                                        "additionalProperties": false
                                                    },
                                                    "type": "array"
                                                },
                                                "content": {
                                                    "description": "Required: An opaque binary string which is an image's signature.",
                                                    "format": "byte",
                                                    "type": "string",
                                                    "pattern": "^[\\w\\d+\\/=]*$"
                                                },
                                                "created": {
                                                    "description": "If specified, it is the time of signature's creation.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "imageIdentity": {
                                                    "description": "A human readable string representing image's identity. It could be a product name and version, or an image pull spec (e.g. \"registry.access.redhat.com/rhel7/rhel:7.2\").",
                                                    "type": "string"
                                                },
                                                "issuedBy": {
                                                    "description": "If specified, it holds information about an issuer of signing certificate or key (a person or entity who signed the signing certificate or key).",
                                                    "properties": {
                                                        "commonName": {
                                                            "description": "Common name (e.g. openshift-signing-service).",
                                                            "type": "string"
                                                        },
                                                        "organization": {
                                                            "description": "Organization name.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object",
                                                    "additionalProperties": false
                                                },
                                                "issuedTo": {
                                                    "description": "If specified, it holds information about a subject of signing certificate or key (a person or entity who signed the image).",
                                                    "properties": {
                                                        "commonName": {
                                                            "description": "Common name (e.g. openshift-signing-service).",
                                                            "type": "string"
                                                        },
                                                        "organization": {
                                                            "description": "Organization name.",
                                                            "type": "string"
                                                        },
                                                        "publicKeyID": {
                                                            "description": "If present, it is a human readable key id of public key belonging to the subject used to verify image signature. It should contain at least 64 lowest bits of public key's fingerprint (e.g. 0x685ebe62bf278440).",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "publicKeyID"
                                                    ],
                                                    "type": "object",
                                                    "additionalProperties": false
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                                                    "type": "object"
                                                },
                                                "signedClaims": {
                                                    "additionalProperties": {
                                                        "type": "string"
                                                    },
                                                    "description": "Contains claims from the signature.",
                                                    "type": "object"
                                                },
                                                "type": {
                                                    "description": "Required: Describes a type of stored blob.",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "content",
                                                "type"
                                            ],
                                            "type": "object",
                                            "additionalProperties": false
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object",
                                "additionalProperties": false
                            },
                            "manifests": {
                                "description": "Manifests holds sub-manifests metadata when importing a manifest list",
                                "items": {
                                    "description": "Image is an immutable representation of a container image and metadata at a point in time. Images are named by taking a hash of their contents (metadata and content) and any change in format, content, or metadata results in a new name. The images resource is primarily for use by cluster administrators and integrations like the cluster image registry - end users instead access images via the imagestreamtags or imagestreamimages resources. While image metadata is stored in the API, any integration that implements the container image registry API must provide its own storage for the raw manifest data, image config, and layer contents. \n Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
                                    "properties": {
                                        "apiVersion": {
                                            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                            "type": "string"
                                        },
                                        "dockerImageConfig": {
                                            "description": "DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2. Will not be set when the image represents a manifest list.",
                                            "type": "string"
                                        },
                                        "dockerImageLayers": {
                                            "description": "DockerImageLayers represents the layers in the image. May not be set if the image does not define that data or if the image represents a manifest list.",
                                            "items": {
                                                "description": "ImageLayer represents a single layer of the image. Some images may have multiple layers. Some may have none.",
                                                "properties": {
                                                    "mediaType": {
                                                        "description": "MediaType of the referenced object.",
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "description": "Name of the layer as defined by the underlying store.",
                                                        "type": "string"
                                                    },
                                                    "size": {
                                                        "description": "Size of the layer in bytes as defined by the underlying store.",
                                                        "format": "int64",
                                                        "type": "integer",
                                                        "minimum": -9223372036854776000,
                                                        "maximum": 9223372036854776000
                                                    }
                                                },
                                                "required": [
                                                    "mediaType",
                                                    "name",
                                                    "size"
                                                ],
                                                "type": "object",
                                                "additionalProperties": false
                                            },
                                            "type": "array"
                                        },
                                        "dockerImageManifest": {
                                            "description": "DockerImageManifest is the raw JSON of the manifest",
                                            "type": "string"
                                        },
                                        "dockerImageManifestMediaType": {
                                            "description": "DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2.",
                                            "type": "string"
                                        },
                                        "dockerImageManifests": {
                                            "description": "DockerImageManifests holds information about sub-manifests when the image represents a manifest list. When this field is present, no DockerImageLayers should be specified.",
                                            "items": {
                                                "description": "ImageManifest represents sub-manifests of a manifest list. The Digest field points to a regular Image object.",
                                                "properties": {
                                                    "architecture": {
                                                        "description": "Architecture specifies the supported CPU architecture, for example `amd64` or `ppc64le`.",
                                                        "type": "string"
                                                    },
                                                    "digest": {
                                                        "description": "Digest is the unique identifier for the manifest. It refers to an Image object.",
                                                        "type": "string"
                                                    },
                                                    "manifestSize": {
                                                        "description": "ManifestSize represents the size of the raw object contents, in bytes.",
                                                        "format": "int64",
                                                        "type": "integer",
                                                        "minimum": -9223372036854776000,
                                                        "maximum": 9223372036854776000
                                                    },
                                                    "mediaType": {
                                                        "description": "MediaType defines the type of the manifest, possible values are application/vnd.oci.image.manifest.v1+json, application/vnd.docker.distribution.manifest.v2+json or application/vnd.docker.distribution.manifest.v1+json.",
                                                        "type": "string"
                                                    },
                                                    "os": {
                                                        "description": "OS specifies the operating system, for example `linux`.",
                                                        "type": "string"
                                                    },
                                                    "variant": {
                                                        "description": "Variant is an optional field repreenting a variant of the CPU, for example v6 to specify a particular CPU variant of the ARM CPU.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "architecture",
                                                    "digest",
                                                    "manifestSize",
                                                    "mediaType",
                                                    "os"
                                                ],
                                                "type": "object",
                                                "additionalProperties": false
                                            },
                                            "type": "array"
                                        },
                                        "dockerImageMetadata": {
                                            "description": "DockerImageMetadata contains metadata about this image",
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                        },
                                        "dockerImageMetadataVersion": {
                                            "description": "DockerImageMetadataVersion conveys the version of the object, which if empty defaults to \"1.0\"",
                                            "type": "string"
                                        },
                                        "dockerImageReference": {
                                            "description": "DockerImageReference is the string that can be used to pull this image.",
                                            "type": "string"
                                        },
                                        "dockerImageSignatures": {
                                            "description": "DockerImageSignatures provides the signatures as opaque blobs. This is a part of manifest schema v1.",
                                            "items": {
                                                "format": "byte",
                                                "type": "string",
                                                "pattern": "^[\\w\\d+\\/=]*$"
                                            },
                                            "type": "array"
                                        },
                                        "kind": {
                                            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                            "type": "string"
                                        },
                                        "metadata": {
                                            "description": "metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                                            "type": "object"
                                        },
                                        "signatures": {
                                            "description": "Signatures holds all signatures of the image.",
                                            "items": {
                                                "description": "ImageSignature holds a signature of an image. It allows to verify image identity and possibly other claims as long as the signature is trusted. Based on this information it is possible to restrict runnable images to those matching cluster-wide policy. Mandatory fields should be parsed by clients doing image verification. The others are parsed from signature's content by the server. They serve just an informative purpose. \n Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
                                                "properties": {
                                                    "apiVersion": {
                                                        "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                        "type": "string"
                                                    },
                                                    "conditions": {
                                                        "description": "Conditions represent the latest available observations of a signature's current state.",
                                                        "items": {
                                                            "description": "SignatureCondition describes an image signature condition of particular kind at particular probe time.",
                                                            "properties": {
                                                                "lastProbeTime": {
                                                                    "description": "Last time the condition was checked.",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "lastTransitionTime": {
                                                                    "description": "Last time the condition transit from one status to another.",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "message": {
                                                                    "description": "Human readable message indicating details about last transition.",
                                                                    "type": "string"
                                                                },
                                                                "reason": {
                                                                    "description": "(brief) reason for the condition's last transition.",
                                                                    "type": "string"
                                                                },
                                                                "status": {
                                                                    "description": "Status of the condition, one of True, False, Unknown.",
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Type of signature condition, Complete or Failed.",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "status",
                                                                "type"
                                                            ],
                                                            "type": "object",
                                                            "additionalProperties": false
                                                        },
                                                        "type": "array"
                                                    },
                                                    "content": {
                                                        "description": "Required: An opaque binary string which is an image's signature.",
                                                        "format": "byte",
                                                        "type": "string",
                                                        "pattern": "^[\\w\\d+\\/=]*$"
                                                    },
                                                    "created": {
                                                        "description": "If specified, it is the time of signature's creation.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "imageIdentity": {
                                                        "description": "A human readable string representing image's identity. It could be a product name and version, or an image pull spec (e.g. \"registry.access.redhat.com/rhel7/rhel:7.2\").",
                                                        "type": "string"
                                                    },
                                                    "issuedBy": {
                                                        "description": "If specified, it holds information about an issuer of signing certificate or key (a person or entity who signed the signing certificate or key).",
                                                        "properties": {
                                                            "commonName": {
                                                                "description": "Common name (e.g. openshift-signing-service).",
                                                                "type": "string"
                                                            },
                                                            "organization": {
                                                                "description": "Organization name.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object",
                                                        "additionalProperties": false
                                                    },
                                                    "issuedTo": {
                                                        "description": "If specified, it holds information about a subject of signing certificate or key (a person or entity who signed the image).",
                                                        "properties": {
                                                            "commonName": {
                                                                "description": "Common name (e.g. openshift-signing-service).",
                                                                "type": "string"
                                                            },
                                                            "organization": {
                                                                "description": "Organization name.",
                                                                "type": "string"
                                                            },
                                                            "publicKeyID": {
                                                                "description": "If present, it is a human readable key id of public key belonging to the subject used to verify image signature. It should contain at least 64 lowest bits of public key's fingerprint (e.g. 0x685ebe62bf278440).",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "publicKeyID"
                                                        ],
                                                        "type": "object",
                                                        "additionalProperties": false
                                                    },
                                                    "kind": {
                                                        "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                        "type": "string"
                                                    },
                                                    "metadata": {
                                                        "description": "metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                                                        "type": "object"
                                                    },
                                                    "signedClaims": {
                                                        "additionalProperties": {
                                                            "type": "string"
                                                        },
                                                        "description": "Contains claims from the signature.",
                                                        "type": "object"
                                                    },
                                                    "type": {
                                                        "description": "Required: Describes a type of stored blob.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "content",
                                                    "type"
                                                ],
                                                "type": "object",
                                                "additionalProperties": false
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object",
                                    "additionalProperties": false
                                },
                                "type": "array"
                            },
                            "status": {
                                "description": "Status is the status of the image import, including errors encountered while retrieving the image",
                                "properties": {
                                    "apiVersion": {
                                        "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                        "type": "string"
                                    },
                                    "code": {
                                        "description": "Suggested HTTP return code for this status, 0 if not set.",
                                        "format": "int32",
                                        "type": "integer",
                                        "minimum": -2147483648,
                                        "maximum": 2147483647
                                    },
                                    "details": {
                                        "description": "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.",
                                        "properties": {
                                            "causes": {
                                                "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
                                                "items": {
                                                    "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
                                                    "properties": {
                                                        "field": {
                                                            "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional. \n Examples: \"name\" - the field \"name\" on the current resource \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
                                                            "type": "string"
                                                        },
                                                        "message": {
                                                            "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
                                                            "type": "string"
                                                        },
                                                        "reason": {
                                                            "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object",
                                                    "additionalProperties": false
                                                },
                                                "type": "array"
                                            },
                                            "group": {
                                                "description": "The group attribute of the resource associated with the status StatusReason.",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
                                                "type": "string"
                                            },
                                            "retryAfterSeconds": {
                                                "description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
                                                "format": "int32",
                                                "type": "integer",
                                                "minimum": -2147483648,
                                                "maximum": 2147483647
                                            },
                                            "uid": {
                                                "description": "UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object",
                                        "additionalProperties": false
                                    },
                                    "kind": {
                                        "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                        "type": "string"
                                    },
                                    "message": {
                                        "description": "A human-readable description of the status of this operation.",
                                        "type": "string"
                                    },
                                    "metadata": {
                                        "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                        "properties": {
                                            "continue": {
                                                "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
                                                "type": "string"
                                            },
                                            "remainingItemCount": {
                                                "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
                                                "format": "int64",
                                                "type": "integer",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                            },
                                            "resourceVersion": {
                                                "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                                                "type": "string"
                                            },
                                            "selfLink": {
                                                "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object",
                                        "additionalProperties": false
                                    },
                                    "reason": {
                                        "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
                                        "type": "string"
                                    },
                                    "status": {
                                        "description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                                        "type": "string"
                                    }
                                },
                                "type": "object",
                                "additionalProperties": false
                            },
                            "tag": {
                                "description": "Tag is the tag this image was located under, if any",
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object",
                        "additionalProperties": false
                    },
                    "type": "array"
                },
                "import": {
                    "description": "Import is the image stream that was successfully updated or created when 'to' was set.",
                    "properties": {
                        "apiVersion": {
                            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                            "type": "string"
                        },
                        "kind": {
                            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                            "type": "string"
                        },
                        "metadata": {
                            "description": "metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                            "type": "object"
                        },
                        "spec": {
                            "description": "Spec describes the desired state of this stream",
                            "properties": {
                                "dockerImageRepository": {
                                    "description": "dockerImageRepository is optional, if specified this stream is backed by a container repository on this server Deprecated: This field is deprecated as of v3.7 and will be removed in a future release. Specify the source for the tags to be imported in each tag via the spec.tags.from reference instead.",
                                    "type": "string"
                                },
                                "lookupPolicy": {
                                    "description": "lookupPolicy controls how other resources reference images within this namespace.",
                                    "properties": {
                                        "local": {
                                            "description": "local will change the docker short image references (like \"mysql\" or \"php:latest\") on objects in this namespace to the image ID whenever they match this image stream, instead of reaching out to a remote registry. The name will be fully qualified to an image ID if found. The tag's referencePolicy is taken into account on the replaced value. Only works within the current namespace.",
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "local"
                                    ],
                                    "type": "object",
                                    "additionalProperties": false
                                },
                                "tags": {
                                    "description": "tags map arbitrary string values to specific image locators",
                                    "items": {
                                        "description": "TagReference specifies optional annotations for images using this tag and an optional reference to an ImageStreamTag, ImageStreamImage, or DockerImage this tag should track.",
                                        "properties": {
                                            "annotations": {
                                                "additionalProperties": {
                                                    "type": "string"
                                                },
                                                "description": "Optional; if specified, annotations that are applied to images retrieved via ImageStreamTags.",
                                                "type": "object"
                                            },
                                            "from": {
                                                "description": "Optional; if specified, a reference to another image that this tag should point to. Valid values are ImageStreamTag, ImageStreamImage, and DockerImage.  ImageStreamTag references can only reference a tag within this same ImageStream.",
                                                "properties": {
                                                    "apiVersion": {
                                                        "description": "API version of the referent.",
                                                        "type": "string"
                                                    },
                                                    "fieldPath": {
                                                        "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                                                        "type": "string"
                                                    },
                                                    "kind": {
                                                        "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                                        "type": "string"
                                                    },
                                                    "namespace": {
                                                        "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                                                        "type": "string"
                                                    },
                                                    "resourceVersion": {
                                                        "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                                                        "type": "string"
                                                    },
                                                    "uid": {
                                                        "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object",
                                                "additionalProperties": false
                                            },
                                            "generation": {
                                                "description": "Generation is a counter that tracks mutations to the spec tag (user intent). When a tag reference is changed the generation is set to match the current stream generation (which is incremented every time spec is changed). Other processes in the system like the image importer observe that the generation of spec tag is newer than the generation recorded in the status and use that as a trigger to import the newest remote tag. To trigger a new import, clients may set this value to zero which will reset the generation to the latest stream generation. Legacy clients will send this value as nil which will be merged with the current tag generation.",
                                                "format": "int64",
                                                "type": "integer",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                            },
                                            "importPolicy": {
                                                "description": "ImportPolicy is information that controls how images may be imported by the server.",
                                                "properties": {
                                                    "importMode": {
                                                        "description": "ImportMode describes how to import an image manifest.",
                                                        "type": "string"
                                                    },
                                                    "insecure": {
                                                        "description": "Insecure is true if the server may bypass certificate verification or connect directly over HTTP during image import.",
                                                        "type": "boolean"
                                                    },
                                                    "scheduled": {
                                                        "description": "Scheduled indicates to the server that this tag should be periodically checked to ensure it is up to date, and imported",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object",
                                                "additionalProperties": false
                                            },
                                            "name": {
                                                "description": "Name of the tag",
                                                "type": "string"
                                            },
                                            "reference": {
                                                "description": "Reference states if the tag will be imported. Default value is false, which means the tag will be imported.",
                                                "type": "boolean"
                                            },
                                            "referencePolicy": {
                                                "description": "ReferencePolicy defines how other components should consume the image.",
                                                "properties": {
                                                    "type": {
                                                        "description": "Type determines how the image pull spec should be transformed when the image stream tag is used in deployment config triggers or new builds. The default value is `Source`, indicating the original location of the image should be used (if imported). The user may also specify `Local`, indicating that the pull spec should point to the integrated container image registry and leverage the registry's ability to proxy the pull to an upstream registry. `Local` allows the credentials used to pull this image to be managed from the image stream's namespace, so others on the platform can access a remote image but have no access to the remote secret. It also allows the image layers to be mirrored into the local registry which the images can still be pulled even if the upstream registry is unavailable.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "type"
                                                ],
                                                "type": "object",
                                                "additionalProperties": false
                                            }
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "type": "object",
                                        "additionalProperties": false
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object",
                            "additionalProperties": false
                        },
                        "status": {
                            "description": "Status describes the current state of this stream",
                            "properties": {
                                "dockerImageRepository": {
                                    "description": "DockerImageRepository represents the effective location this stream may be accessed at. May be empty until the server determines where the repository is located",
                                    "type": "string"
                                },
                                "publicDockerImageRepository": {
                                    "description": "PublicDockerImageRepository represents the public location from where the image can be pulled outside the cluster. This field may be empty if the administrator has not exposed the integrated registry externally.",
                                    "type": "string"
                                },
                                "tags": {
                                    "description": "Tags are a historical record of images associated with each tag. The first entry in the TagEvent array is the currently tagged image.",
                                    "items": {
                                        "description": "NamedTagEventList relates a tag to its image history.",
                                        "properties": {
                                            "conditions": {
                                                "description": "Conditions is an array of conditions that apply to the tag event list.",
                                                "items": {
                                                    "description": "TagEventCondition contains condition information for a tag event.",
                                                    "properties": {
                                                        "generation": {
                                                            "description": "Generation is the spec tag generation that this status corresponds to",
                                                            "format": "int64",
                                                            "type": "integer",
                                                            "minimum": -9223372036854776000,
                                                            "maximum": 9223372036854776000
                                                        },
                                                        "lastTransitionTime": {
                                                            "description": "LastTransitionTIme is the time the condition transitioned from one status to another.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "message": {
                                                            "description": "Message is a human readable description of the details about last transition, complementing reason.",
                                                            "type": "string"
                                                        },
                                                        "reason": {
                                                            "description": "Reason is a brief machine readable explanation for the condition's last transition.",
                                                            "type": "string"
                                                        },
                                                        "status": {
                                                            "description": "Status of the condition, one of True, False, Unknown.",
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "description": "Type of tag event condition, currently only ImportSuccess",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "generation",
                                                        "status",
                                                        "type"
                                                    ],
                                                    "type": "object",
                                                    "additionalProperties": false
                                                },
                                                "type": "array"
                                            },
                                            "items": {
                                                "description": "Standard object's metadata.",
                                                "items": {
                                                    "description": "TagEvent is used by ImageStreamStatus to keep a historical record of images associated with a tag.",
                                                    "properties": {
                                                        "created": {
                                                            "description": "Created holds the time the TagEvent was created",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "dockerImageReference": {
                                                            "description": "DockerImageReference is the string that can be used to pull this image",
                                                            "type": "string"
                                                        },
                                                        "generation": {
                                                            "description": "Generation is the spec tag generation that resulted in this tag being updated",
                                                            "format": "int64",
                                                            "type": "integer",
                                                            "minimum": -9223372036854776000,
                                                            "maximum": 9223372036854776000
                                                        },
                                                        "image": {
                                                            "description": "Image is the image",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "created",
                                                        "dockerImageReference",
                                                        "generation",
                                                        "image"
                                                    ],
                                                    "type": "object",
                                                    "additionalProperties": false
                                                },
                                                "type": "array"
                                            },
                                            "tag": {
                                                "description": "Tag is the tag for which the history is recorded",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "items",
                                            "tag"
                                        ],
                                        "type": "object",
                                        "additionalProperties": false
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "dockerImageRepository"
                            ],
                            "type": "object",
                            "additionalProperties": false
                        }
                    },
                    "type": "object",
                    "additionalProperties": false
                },
                "repository": {
                    "description": "Repository is set if spec.repository was set to the outcome of the import",
                    "properties": {
                        "additionalTags": {
                            "description": "AdditionalTags are tags that exist in the repository but were not imported because a maximum limit of automatic imports was applied.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "images": {
                            "description": "Images is a list of images successfully retrieved by the import of the repository.",
                            "items": {
                                "description": "ImageImportStatus describes the result of an image import.",
                                "properties": {
                                    "image": {
                                        "description": "Image is the metadata of that image, if the image was located",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "dockerImageConfig": {
                                                "description": "DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2. Will not be set when the image represents a manifest list.",
                                                "type": "string"
                                            },
                                            "dockerImageLayers": {
                                                "description": "DockerImageLayers represents the layers in the image. May not be set if the image does not define that data or if the image represents a manifest list.",
                                                "items": {
                                                    "description": "ImageLayer represents a single layer of the image. Some images may have multiple layers. Some may have none.",
                                                    "properties": {
                                                        "mediaType": {
                                                            "description": "MediaType of the referenced object.",
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "description": "Name of the layer as defined by the underlying store.",
                                                            "type": "string"
                                                        },
                                                        "size": {
                                                            "description": "Size of the layer in bytes as defined by the underlying store.",
                                                            "format": "int64",
                                                            "type": "integer",
                                                            "minimum": -9223372036854776000,
                                                            "maximum": 9223372036854776000
                                                        }
                                                    },
                                                    "required": [
                                                        "mediaType",
                                                        "name",
                                                        "size"
                                                    ],
                                                    "type": "object",
                                                    "additionalProperties": false
                                                },
                                                "type": "array"
                                            },
                                            "dockerImageManifest": {
                                                "description": "DockerImageManifest is the raw JSON of the manifest",
                                                "type": "string"
                                            },
                                            "dockerImageManifestMediaType": {
                                                "description": "DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2.",
                                                "type": "string"
                                            },
                                            "dockerImageManifests": {
                                                "description": "DockerImageManifests holds information about sub-manifests when the image represents a manifest list. When this field is present, no DockerImageLayers should be specified.",
                                                "items": {
                                                    "description": "ImageManifest represents sub-manifests of a manifest list. The Digest field points to a regular Image object.",
                                                    "properties": {
                                                        "architecture": {
                                                            "description": "Architecture specifies the supported CPU architecture, for example `amd64` or `ppc64le`.",
                                                            "type": "string"
                                                        },
                                                        "digest": {
                                                            "description": "Digest is the unique identifier for the manifest. It refers to an Image object.",
                                                            "type": "string"
                                                        },
                                                        "manifestSize": {
                                                            "description": "ManifestSize represents the size of the raw object contents, in bytes.",
                                                            "format": "int64",
                                                            "type": "integer",
                                                            "minimum": -9223372036854776000,
                                                            "maximum": 9223372036854776000
                                                        },
                                                        "mediaType": {
                                                            "description": "MediaType defines the type of the manifest, possible values are application/vnd.oci.image.manifest.v1+json, application/vnd.docker.distribution.manifest.v2+json or application/vnd.docker.distribution.manifest.v1+json.",
                                                            "type": "string"
                                                        },
                                                        "os": {
                                                            "description": "OS specifies the operating system, for example `linux`.",
                                                            "type": "string"
                                                        },
                                                        "variant": {
                                                            "description": "Variant is an optional field repreenting a variant of the CPU, for example v6 to specify a particular CPU variant of the ARM CPU.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "architecture",
                                                        "digest",
                                                        "manifestSize",
                                                        "mediaType",
                                                        "os"
                                                    ],
                                                    "type": "object",
                                                    "additionalProperties": false
                                                },
                                                "type": "array"
                                            },
                                            "dockerImageMetadata": {
                                                "description": "DockerImageMetadata contains metadata about this image",
                                                "type": "object",
                                                "x-kubernetes-preserve-unknown-fields": true
                                            },
                                            "dockerImageMetadataVersion": {
                                                "description": "DockerImageMetadataVersion conveys the version of the object, which if empty defaults to \"1.0\"",
                                                "type": "string"
                                            },
                                            "dockerImageReference": {
                                                "description": "DockerImageReference is the string that can be used to pull this image.",
                                                "type": "string"
                                            },
                                            "dockerImageSignatures": {
                                                "description": "DockerImageSignatures provides the signatures as opaque blobs. This is a part of manifest schema v1.",
                                                "items": {
                                                    "format": "byte",
                                                    "type": "string",
                                                    "pattern": "^[\\w\\d+\\/=]*$"
                                                },
                                                "type": "array"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "description": "metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                                                "type": "object"
                                            },
                                            "signatures": {
                                                "description": "Signatures holds all signatures of the image.",
                                                "items": {
                                                    "description": "ImageSignature holds a signature of an image. It allows to verify image identity and possibly other claims as long as the signature is trusted. Based on this information it is possible to restrict runnable images to those matching cluster-wide policy. Mandatory fields should be parsed by clients doing image verification. The others are parsed from signature's content by the server. They serve just an informative purpose. \n Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
                                                    "properties": {
                                                        "apiVersion": {
                                                            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                            "type": "string"
                                                        },
                                                        "conditions": {
                                                            "description": "Conditions represent the latest available observations of a signature's current state.",
                                                            "items": {
                                                                "description": "SignatureCondition describes an image signature condition of particular kind at particular probe time.",
                                                                "properties": {
                                                                    "lastProbeTime": {
                                                                        "description": "Last time the condition was checked.",
                                                                        "format": "date-time",
                                                                        "type": "string"
                                                                    },
                                                                    "lastTransitionTime": {
                                                                        "description": "Last time the condition transit from one status to another.",
                                                                        "format": "date-time",
                                                                        "type": "string"
                                                                    },
                                                                    "message": {
                                                                        "description": "Human readable message indicating details about last transition.",
                                                                        "type": "string"
                                                                    },
                                                                    "reason": {
                                                                        "description": "(brief) reason for the condition's last transition.",
                                                                        "type": "string"
                                                                    },
                                                                    "status": {
                                                                        "description": "Status of the condition, one of True, False, Unknown.",
                                                                        "type": "string"
                                                                    },
                                                                    "type": {
                                                                        "description": "Type of signature condition, Complete or Failed.",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "status",
                                                                    "type"
                                                                ],
                                                                "type": "object",
                                                                "additionalProperties": false
                                                            },
                                                            "type": "array"
                                                        },
                                                        "content": {
                                                            "description": "Required: An opaque binary string which is an image's signature.",
                                                            "format": "byte",
                                                            "type": "string",
                                                            "pattern": "^[\\w\\d+\\/=]*$"
                                                        },
                                                        "created": {
                                                            "description": "If specified, it is the time of signature's creation.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "imageIdentity": {
                                                            "description": "A human readable string representing image's identity. It could be a product name and version, or an image pull spec (e.g. \"registry.access.redhat.com/rhel7/rhel:7.2\").",
                                                            "type": "string"
                                                        },
                                                        "issuedBy": {
                                                            "description": "If specified, it holds information about an issuer of signing certificate or key (a person or entity who signed the signing certificate or key).",
                                                            "properties": {
                                                                "commonName": {
                                                                    "description": "Common name (e.g. openshift-signing-service).",
                                                                    "type": "string"
                                                                },
                                                                "organization": {
                                                                    "description": "Organization name.",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object",
                                                            "additionalProperties": false
                                                        },
                                                        "issuedTo": {
                                                            "description": "If specified, it holds information about a subject of signing certificate or key (a person or entity who signed the image).",
                                                            "properties": {
                                                                "commonName": {
                                                                    "description": "Common name (e.g. openshift-signing-service).",
                                                                    "type": "string"
                                                                },
                                                                "organization": {
                                                                    "description": "Organization name.",
                                                                    "type": "string"
                                                                },
                                                                "publicKeyID": {
                                                                    "description": "If present, it is a human readable key id of public key belonging to the subject used to verify image signature. It should contain at least 64 lowest bits of public key's fingerprint (e.g. 0x685ebe62bf278440).",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "publicKeyID"
                                                            ],
                                                            "type": "object",
                                                            "additionalProperties": false
                                                        },
                                                        "kind": {
                                                            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                            "type": "string"
                                                        },
                                                        "metadata": {
                                                            "description": "metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                                                            "type": "object"
                                                        },
                                                        "signedClaims": {
                                                            "additionalProperties": {
                                                                "type": "string"
                                                            },
                                                            "description": "Contains claims from the signature.",
                                                            "type": "object"
                                                        },
                                                        "type": {
                                                            "description": "Required: Describes a type of stored blob.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "content",
                                                        "type"
                                                    ],
                                                    "type": "object",
                                                    "additionalProperties": false
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "type": "object",
                                        "additionalProperties": false
                                    },
                                    "manifests": {
                                        "description": "Manifests holds sub-manifests metadata when importing a manifest list",
                                        "items": {
                                            "description": "Image is an immutable representation of a container image and metadata at a point in time. Images are named by taking a hash of their contents (metadata and content) and any change in format, content, or metadata results in a new name. The images resource is primarily for use by cluster administrators and integrations like the cluster image registry - end users instead access images via the imagestreamtags or imagestreamimages resources. While image metadata is stored in the API, any integration that implements the container image registry API must provide its own storage for the raw manifest data, image config, and layer contents. \n Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "dockerImageConfig": {
                                                    "description": "DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2. Will not be set when the image represents a manifest list.",
                                                    "type": "string"
                                                },
                                                "dockerImageLayers": {
                                                    "description": "DockerImageLayers represents the layers in the image. May not be set if the image does not define that data or if the image represents a manifest list.",
                                                    "items": {
                                                        "description": "ImageLayer represents a single layer of the image. Some images may have multiple layers. Some may have none.",
                                                        "properties": {
                                                            "mediaType": {
                                                                "description": "MediaType of the referenced object.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Name of the layer as defined by the underlying store.",
                                                                "type": "string"
                                                            },
                                                            "size": {
                                                                "description": "Size of the layer in bytes as defined by the underlying store.",
                                                                "format": "int64",
                                                                "type": "integer",
                                                                "minimum": -9223372036854776000,
                                                                "maximum": 9223372036854776000
                                                            }
                                                        },
                                                        "required": [
                                                            "mediaType",
                                                            "name",
                                                            "size"
                                                        ],
                                                        "type": "object",
                                                        "additionalProperties": false
                                                    },
                                                    "type": "array"
                                                },
                                                "dockerImageManifest": {
                                                    "description": "DockerImageManifest is the raw JSON of the manifest",
                                                    "type": "string"
                                                },
                                                "dockerImageManifestMediaType": {
                                                    "description": "DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2.",
                                                    "type": "string"
                                                },
                                                "dockerImageManifests": {
                                                    "description": "DockerImageManifests holds information about sub-manifests when the image represents a manifest list. When this field is present, no DockerImageLayers should be specified.",
                                                    "items": {
                                                        "description": "ImageManifest represents sub-manifests of a manifest list. The Digest field points to a regular Image object.",
                                                        "properties": {
                                                            "architecture": {
                                                                "description": "Architecture specifies the supported CPU architecture, for example `amd64` or `ppc64le`.",
                                                                "type": "string"
                                                            },
                                                            "digest": {
                                                                "description": "Digest is the unique identifier for the manifest. It refers to an Image object.",
                                                                "type": "string"
                                                            },
                                                            "manifestSize": {
                                                                "description": "ManifestSize represents the size of the raw object contents, in bytes.",
                                                                "format": "int64",
                                                                "type": "integer",
                                                                "minimum": -9223372036854776000,
                                                                "maximum": 9223372036854776000
                                                            },
                                                            "mediaType": {
                                                                "description": "MediaType defines the type of the manifest, possible values are application/vnd.oci.image.manifest.v1+json, application/vnd.docker.distribution.manifest.v2+json or application/vnd.docker.distribution.manifest.v1+json.",
                                                                "type": "string"
                                                            },
                                                            "os": {
                                                                "description": "OS specifies the operating system, for example `linux`.",
                                                                "type": "string"
                                                            },
                                                            "variant": {
                                                                "description": "Variant is an optional field repreenting a variant of the CPU, for example v6 to specify a particular CPU variant of the ARM CPU.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "architecture",
                                                            "digest",
                                                            "manifestSize",
                                                            "mediaType",
                                                            "os"
                                                        ],
                                                        "type": "object",
                                                        "additionalProperties": false
                                                    },
                                                    "type": "array"
                                                },
                                                "dockerImageMetadata": {
                                                    "description": "DockerImageMetadata contains metadata about this image",
                                                    "type": "object",
                                                    "x-kubernetes-preserve-unknown-fields": true
                                                },
                                                "dockerImageMetadataVersion": {
                                                    "description": "DockerImageMetadataVersion conveys the version of the object, which if empty defaults to \"1.0\"",
                                                    "type": "string"
                                                },
                                                "dockerImageReference": {
                                                    "description": "DockerImageReference is the string that can be used to pull this image.",
                                                    "type": "string"
                                                },
                                                "dockerImageSignatures": {
                                                    "description": "DockerImageSignatures provides the signatures as opaque blobs. This is a part of manifest schema v1.",
                                                    "items": {
                                                        "format": "byte",
                                                        "type": "string",
                                                        "pattern": "^[\\w\\d+\\/=]*$"
                                                    },
                                                    "type": "array"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                                                    "type": "object"
                                                },
                                                "signatures": {
                                                    "description": "Signatures holds all signatures of the image.",
                                                    "items": {
                                                        "description": "ImageSignature holds a signature of an image. It allows to verify image identity and possibly other claims as long as the signature is trusted. Based on this information it is possible to restrict runnable images to those matching cluster-wide policy. Mandatory fields should be parsed by clients doing image verification. The others are parsed from signature's content by the server. They serve just an informative purpose. \n Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
                                                        "properties": {
                                                            "apiVersion": {
                                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                                "type": "string"
                                                            },
                                                            "conditions": {
                                                                "description": "Conditions represent the latest available observations of a signature's current state.",
                                                                "items": {
                                                                    "description": "SignatureCondition describes an image signature condition of particular kind at particular probe time.",
                                                                    "properties": {
                                                                        "lastProbeTime": {
                                                                            "description": "Last time the condition was checked.",
                                                                            "format": "date-time",
                                                                            "type": "string"
                                                                        },
                                                                        "lastTransitionTime": {
                                                                            "description": "Last time the condition transit from one status to another.",
                                                                            "format": "date-time",
                                                                            "type": "string"
                                                                        },
                                                                        "message": {
                                                                            "description": "Human readable message indicating details about last transition.",
                                                                            "type": "string"
                                                                        },
                                                                        "reason": {
                                                                            "description": "(brief) reason for the condition's last transition.",
                                                                            "type": "string"
                                                                        },
                                                                        "status": {
                                                                            "description": "Status of the condition, one of True, False, Unknown.",
                                                                            "type": "string"
                                                                        },
                                                                        "type": {
                                                                            "description": "Type of signature condition, Complete or Failed.",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "status",
                                                                        "type"
                                                                    ],
                                                                    "type": "object",
                                                                    "additionalProperties": false
                                                                },
                                                                "type": "array"
                                                            },
                                                            "content": {
                                                                "description": "Required: An opaque binary string which is an image's signature.",
                                                                "format": "byte",
                                                                "type": "string",
                                                                "pattern": "^[\\w\\d+\\/=]*$"
                                                            },
                                                            "created": {
                                                                "description": "If specified, it is the time of signature's creation.",
                                                                "format": "date-time",
                                                                "type": "string"
                                                            },
                                                            "imageIdentity": {
                                                                "description": "A human readable string representing image's identity. It could be a product name and version, or an image pull spec (e.g. \"registry.access.redhat.com/rhel7/rhel:7.2\").",
                                                                "type": "string"
                                                            },
                                                            "issuedBy": {
                                                                "description": "If specified, it holds information about an issuer of signing certificate or key (a person or entity who signed the signing certificate or key).",
                                                                "properties": {
                                                                    "commonName": {
                                                                        "description": "Common name (e.g. openshift-signing-service).",
                                                                        "type": "string"
                                                                    },
                                                                    "organization": {
                                                                        "description": "Organization name.",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object",
                                                                "additionalProperties": false
                                                            },
                                                            "issuedTo": {
                                                                "description": "If specified, it holds information about a subject of signing certificate or key (a person or entity who signed the image).",
                                                                "properties": {
                                                                    "commonName": {
                                                                        "description": "Common name (e.g. openshift-signing-service).",
                                                                        "type": "string"
                                                                    },
                                                                    "organization": {
                                                                        "description": "Organization name.",
                                                                        "type": "string"
                                                                    },
                                                                    "publicKeyID": {
                                                                        "description": "If present, it is a human readable key id of public key belonging to the subject used to verify image signature. It should contain at least 64 lowest bits of public key's fingerprint (e.g. 0x685ebe62bf278440).",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "publicKeyID"
                                                                ],
                                                                "type": "object",
                                                                "additionalProperties": false
                                                            },
                                                            "kind": {
                                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                                "type": "string"
                                                            },
                                                            "metadata": {
                                                                "description": "metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                                                                "type": "object"
                                                            },
                                                            "signedClaims": {
                                                                "additionalProperties": {
                                                                    "type": "string"
                                                                },
                                                                "description": "Contains claims from the signature.",
                                                                "type": "object"
                                                            },
                                                            "type": {
                                                                "description": "Required: Describes a type of stored blob.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "content",
                                                            "type"
                                                        ],
                                                        "type": "object",
                                                        "additionalProperties": false
                                                    },
                                                    "type": "array"
                                                }
                                            },
                                            "type": "object",
                                            "additionalProperties": false
                                        },
                                        "type": "array"
                                    },
                                    "status": {
                                        "description": "Status is the status of the image import, including errors encountered while retrieving the image",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "code": {
                                                "description": "Suggested HTTP return code for this status, 0 if not set.",
                                                "format": "int32",
                                                "type": "integer",
                                                "minimum": -2147483648,
                                                "maximum": 2147483647
                                            },
                                            "details": {
                                                "description": "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.",
                                                "properties": {
                                                    "causes": {
                                                        "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
                                                        "items": {
                                                            "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
                                                            "properties": {
                                                                "field": {
                                                                    "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional. \n Examples: \"name\" - the field \"name\" on the current resource \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
                                                                    "type": "string"
                                                                },
                                                                "message": {
                                                                    "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
                                                                    "type": "string"
                                                                },
                                                                "reason": {
                                                                    "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object",
                                                            "additionalProperties": false
                                                        },
                                                        "type": "array"
                                                    },
                                                    "group": {
                                                        "description": "The group attribute of the resource associated with the status StatusReason.",
                                                        "type": "string"
                                                    },
                                                    "kind": {
                                                        "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
                                                        "type": "string"
                                                    },
                                                    "retryAfterSeconds": {
                                                        "description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
                                                        "format": "int32",
                                                        "type": "integer",
                                                        "minimum": -2147483648,
                                                        "maximum": 2147483647
                                                    },
                                                    "uid": {
                                                        "description": "UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object",
                                                "additionalProperties": false
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "message": {
                                                "description": "A human-readable description of the status of this operation.",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "properties": {
                                                    "continue": {
                                                        "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
                                                        "type": "string"
                                                    },
                                                    "remainingItemCount": {
                                                        "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
                                                        "format": "int64",
                                                        "type": "integer",
                                                        "minimum": -9223372036854776000,
                                                        "maximum": 9223372036854776000
                                                    },
                                                    "resourceVersion": {
                                                        "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                                                        "type": "string"
                                                    },
                                                    "selfLink": {
                                                        "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object",
                                                "additionalProperties": false
                                            },
                                            "reason": {
                                                "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
                                                "type": "string"
                                            },
                                            "status": {
                                                "description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object",
                                        "additionalProperties": false
                                    },
                                    "tag": {
                                        "description": "Tag is the tag this image was located under, if any",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object",
                                "additionalProperties": false
                            },
                            "type": "array"
                        },
                        "status": {
                            "description": "Status reflects whether any failure occurred during import",
                            "properties": {
                                "apiVersion": {
                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                    "type": "string"
                                },
                                "code": {
                                    "description": "Suggested HTTP return code for this status, 0 if not set.",
                                    "format": "int32",
                                    "type": "integer",
                                    "minimum": -2147483648,
                                    "maximum": 2147483647
                                },
                                "details": {
                                    "description": "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.",
                                    "properties": {
                                        "causes": {
                                            "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
                                            "items": {
                                                "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
                                                "properties": {
                                                    "field": {
                                                        "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional. \n Examples: \"name\" - the field \"name\" on the current resource \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
                                                        "type": "string"
                                                    },
                                                    "reason": {
                                                        "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object",
                                                "additionalProperties": false
                                            },
                                            "type": "array"
                                        },
                                        "group": {
                                            "description": "The group attribute of the resource associated with the status StatusReason.",
                                            "type": "string"
                                        },
                                        "kind": {
                                            "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
                                            "type": "string"
                                        },
                                        "retryAfterSeconds": {
                                            "description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
                                            "format": "int32",
                                            "type": "integer",
                                            "minimum": -2147483648,
                                            "maximum": 2147483647
                                        },
                                        "uid": {
                                            "description": "UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object",
                                    "additionalProperties": false
                                },
                                "kind": {
                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                    "type": "string"
                                },
                                "message": {
                                    "description": "A human-readable description of the status of this operation.",
                                    "type": "string"
                                },
                                "metadata": {
                                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                    "properties": {
                                        "continue": {
                                            "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
                                            "type": "string"
                                        },
                                        "remainingItemCount": {
                                            "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
                                            "format": "int64",
                                            "type": "integer",
                                            "minimum": -9223372036854776000,
                                            "maximum": 9223372036854776000
                                        },
                                        "resourceVersion": {
                                            "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                                            "type": "string"
                                        },
                                        "selfLink": {
                                            "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object",
                                    "additionalProperties": false
                                },
                                "reason": {
                                    "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                                    "type": "string"
                                }
                            },
                            "type": "object",
                            "additionalProperties": false
                        }
                    },
                    "type": "object",
                    "additionalProperties": false
                }
            },
            "type": "object",
            "additionalProperties": false
        }
    },
    "required": [
        "spec",
        "status"
    ],
    "type": "object",
    "additionalProperties": false,
    "$schema": "http://json-schema.org/draft-04/schema#"
}
