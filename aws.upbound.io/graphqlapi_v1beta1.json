{
  "description": "GraphQLAPI is the Schema for the GraphQLAPIs API. Provides an AppSync GraphQL API.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "GraphQLAPISpec defines the desired state of GraphQLAPI",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "additionalAuthenticationProvider": {
              "description": "One or more additional authentication providers for the GraphqlApi. Defined below.",
              "items": {
                "properties": {
                  "authenticationType": {
                    "description": "Authentication type. Valid values: API_KEY, AWS_IAM, AMAZON_COGNITO_USER_POOLS, OPENID_CONNECT, AWS_LAMBDA",
                    "type": "string"
                  },
                  "lambdaAuthorizerConfig": {
                    "description": "Nested argument containing Lambda authorizer configuration. Defined below.",
                    "items": {
                      "properties": {
                        "authorizerResultTtlInSeconds": {
                          "description": "Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a ttlOverride key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.",
                          "type": "number"
                        },
                        "authorizerUri": {
                          "description": "ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow lambda:InvokeFunction from service principal appsync.amazonaws.com.",
                          "type": "string"
                        },
                        "identityValidationExpression": {
                          "description": "Regular expression for validation of tokens before the Lambda function is called.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "openidConnectConfig": {
                    "description": "Nested argument containing OpenID Connect configuration. Defined below.",
                    "items": {
                      "properties": {
                        "authTtl": {
                          "description": "Number of milliseconds a token is valid after being authenticated.",
                          "type": "number"
                        },
                        "clientId": {
                          "description": "Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.",
                          "type": "string"
                        },
                        "iatTtl": {
                          "description": "Number of milliseconds a token is valid after being issued to a user.",
                          "type": "number"
                        },
                        "issuer": {
                          "description": "Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "userPoolConfig": {
                    "description": "Amazon Cognito User Pool configuration. Defined below.",
                    "items": {
                      "properties": {
                        "appIdClientRegex": {
                          "description": "Regular expression for validating the incoming Amazon Cognito User Pool app client ID.",
                          "type": "string"
                        },
                        "awsRegion": {
                          "description": "AWS region in which the user pool was created.",
                          "type": "string"
                        },
                        "userPoolId": {
                          "description": "User pool ID.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "authenticationType": {
              "description": "Authentication type. Valid values: API_KEY, AWS_IAM, AMAZON_COGNITO_USER_POOLS, OPENID_CONNECT, AWS_LAMBDA",
              "type": "string"
            },
            "lambdaAuthorizerConfig": {
              "description": "Nested argument containing Lambda authorizer configuration. Defined below.",
              "items": {
                "properties": {
                  "authorizerResultTtlInSeconds": {
                    "description": "Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a ttlOverride key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.",
                    "type": "number"
                  },
                  "authorizerUri": {
                    "description": "ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow lambda:InvokeFunction from service principal appsync.amazonaws.com.",
                    "type": "string"
                  },
                  "identityValidationExpression": {
                    "description": "Regular expression for validation of tokens before the Lambda function is called.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "logConfig": {
              "description": "Nested argument containing logging configuration. Defined below.",
              "items": {
                "properties": {
                  "cloudwatchLogsRoleArn": {
                    "description": "Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.",
                    "type": "string"
                  },
                  "cloudwatchLogsRoleArnRef": {
                    "description": "Reference to a Role in iam to populate cloudwatchLogsRoleArn.",
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "cloudwatchLogsRoleArnSelector": {
                    "description": "Selector for a Role in iam to populate cloudwatchLogsRoleArn.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "excludeVerboseContent": {
                    "description": "Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: true, false. Default value: false",
                    "type": "boolean"
                  },
                  "fieldLogLevel": {
                    "description": "Field logging level. Valid values: ALL, ERROR, NONE.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "name": {
              "description": "User-supplied name for the GraphqlApi.",
              "type": "string"
            },
            "openidConnectConfig": {
              "description": "Nested argument containing OpenID Connect configuration. Defined below.",
              "items": {
                "properties": {
                  "authTtl": {
                    "description": "Number of milliseconds a token is valid after being authenticated.",
                    "type": "number"
                  },
                  "clientId": {
                    "description": "Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.",
                    "type": "string"
                  },
                  "iatTtl": {
                    "description": "Number of milliseconds a token is valid after being issued to a user.",
                    "type": "number"
                  },
                  "issuer": {
                    "description": "Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "schema": {
              "description": "Schema definition, in GraphQL schema language format.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "userPoolConfig": {
              "description": "Amazon Cognito User Pool configuration. Defined below.",
              "items": {
                "properties": {
                  "appIdClientRegex": {
                    "description": "Regular expression for validating the incoming Amazon Cognito User Pool app client ID.",
                    "type": "string"
                  },
                  "awsRegion": {
                    "description": "AWS region in which the user pool was created.",
                    "type": "string"
                  },
                  "defaultAction": {
                    "description": "Action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: ALLOW and DENY",
                    "type": "string"
                  },
                  "userPoolId": {
                    "description": "User pool ID.",
                    "type": "string"
                  },
                  "userPoolIdRef": {
                    "description": "Reference to a UserPool in cognitoidp to populate userPoolId.",
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "userPoolIdSelector": {
                    "description": "Selector for a UserPool in cognitoidp to populate userPoolId.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "visibility": {
              "description": "Sets the value of the GraphQL API to public (GLOBAL) or private (PRIVATE). If no value is provided, the visibility will be set to GLOBAL by default. This value cannot be changed once the API has been created.",
              "type": "string"
            },
            "xrayEnabled": {
              "description": "Whether tracing with X-ray is enabled. Defaults to false.",
              "type": "boolean"
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "properties": {
            "additionalAuthenticationProvider": {
              "description": "One or more additional authentication providers for the GraphqlApi. Defined below.",
              "items": {
                "properties": {
                  "authenticationType": {
                    "description": "Authentication type. Valid values: API_KEY, AWS_IAM, AMAZON_COGNITO_USER_POOLS, OPENID_CONNECT, AWS_LAMBDA",
                    "type": "string"
                  },
                  "lambdaAuthorizerConfig": {
                    "description": "Nested argument containing Lambda authorizer configuration. Defined below.",
                    "items": {
                      "properties": {
                        "authorizerResultTtlInSeconds": {
                          "description": "Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a ttlOverride key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.",
                          "type": "number"
                        },
                        "authorizerUri": {
                          "description": "ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow lambda:InvokeFunction from service principal appsync.amazonaws.com.",
                          "type": "string"
                        },
                        "identityValidationExpression": {
                          "description": "Regular expression for validation of tokens before the Lambda function is called.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "openidConnectConfig": {
                    "description": "Nested argument containing OpenID Connect configuration. Defined below.",
                    "items": {
                      "properties": {
                        "authTtl": {
                          "description": "Number of milliseconds a token is valid after being authenticated.",
                          "type": "number"
                        },
                        "clientId": {
                          "description": "Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.",
                          "type": "string"
                        },
                        "iatTtl": {
                          "description": "Number of milliseconds a token is valid after being issued to a user.",
                          "type": "number"
                        },
                        "issuer": {
                          "description": "Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "userPoolConfig": {
                    "description": "Amazon Cognito User Pool configuration. Defined below.",
                    "items": {
                      "properties": {
                        "appIdClientRegex": {
                          "description": "Regular expression for validating the incoming Amazon Cognito User Pool app client ID.",
                          "type": "string"
                        },
                        "awsRegion": {
                          "description": "AWS region in which the user pool was created.",
                          "type": "string"
                        },
                        "userPoolId": {
                          "description": "User pool ID.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "authenticationType": {
              "description": "Authentication type. Valid values: API_KEY, AWS_IAM, AMAZON_COGNITO_USER_POOLS, OPENID_CONNECT, AWS_LAMBDA",
              "type": "string"
            },
            "lambdaAuthorizerConfig": {
              "description": "Nested argument containing Lambda authorizer configuration. Defined below.",
              "items": {
                "properties": {
                  "authorizerResultTtlInSeconds": {
                    "description": "Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a ttlOverride key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.",
                    "type": "number"
                  },
                  "authorizerUri": {
                    "description": "ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow lambda:InvokeFunction from service principal appsync.amazonaws.com.",
                    "type": "string"
                  },
                  "identityValidationExpression": {
                    "description": "Regular expression for validation of tokens before the Lambda function is called.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "logConfig": {
              "description": "Nested argument containing logging configuration. Defined below.",
              "items": {
                "properties": {
                  "cloudwatchLogsRoleArn": {
                    "description": "Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.",
                    "type": "string"
                  },
                  "cloudwatchLogsRoleArnRef": {
                    "description": "Reference to a Role in iam to populate cloudwatchLogsRoleArn.",
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "cloudwatchLogsRoleArnSelector": {
                    "description": "Selector for a Role in iam to populate cloudwatchLogsRoleArn.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "excludeVerboseContent": {
                    "description": "Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: true, false. Default value: false",
                    "type": "boolean"
                  },
                  "fieldLogLevel": {
                    "description": "Field logging level. Valid values: ALL, ERROR, NONE.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "name": {
              "description": "User-supplied name for the GraphqlApi.",
              "type": "string"
            },
            "openidConnectConfig": {
              "description": "Nested argument containing OpenID Connect configuration. Defined below.",
              "items": {
                "properties": {
                  "authTtl": {
                    "description": "Number of milliseconds a token is valid after being authenticated.",
                    "type": "number"
                  },
                  "clientId": {
                    "description": "Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.",
                    "type": "string"
                  },
                  "iatTtl": {
                    "description": "Number of milliseconds a token is valid after being issued to a user.",
                    "type": "number"
                  },
                  "issuer": {
                    "description": "Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "schema": {
              "description": "Schema definition, in GraphQL schema language format.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "userPoolConfig": {
              "description": "Amazon Cognito User Pool configuration. Defined below.",
              "items": {
                "properties": {
                  "appIdClientRegex": {
                    "description": "Regular expression for validating the incoming Amazon Cognito User Pool app client ID.",
                    "type": "string"
                  },
                  "awsRegion": {
                    "description": "AWS region in which the user pool was created.",
                    "type": "string"
                  },
                  "defaultAction": {
                    "description": "Action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: ALLOW and DENY",
                    "type": "string"
                  },
                  "userPoolId": {
                    "description": "User pool ID.",
                    "type": "string"
                  },
                  "userPoolIdRef": {
                    "description": "Reference to a UserPool in cognitoidp to populate userPoolId.",
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "userPoolIdSelector": {
                    "description": "Selector for a UserPool in cognitoidp to populate userPoolId.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "visibility": {
              "description": "Sets the value of the GraphQL API to public (GLOBAL) or private (PRIVATE). If no value is provided, the visibility will be set to GLOBAL by default. This value cannot be changed once the API has been created.",
              "type": "string"
            },
            "xrayEnabled": {
              "description": "Whether tracing with X-ray is enabled. Defaults to false.",
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "spec.forProvider.authenticationType is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authenticationType) || (has(self.initProvider) && has(self.initProvider.authenticationType))"
        },
        {
          "message": "spec.forProvider.name is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "GraphQLAPIStatus defines the observed state of GraphQLAPI.",
      "properties": {
        "atProvider": {
          "properties": {
            "additionalAuthenticationProvider": {
              "description": "One or more additional authentication providers for the GraphqlApi. Defined below.",
              "items": {
                "properties": {
                  "authenticationType": {
                    "description": "Authentication type. Valid values: API_KEY, AWS_IAM, AMAZON_COGNITO_USER_POOLS, OPENID_CONNECT, AWS_LAMBDA",
                    "type": "string"
                  },
                  "lambdaAuthorizerConfig": {
                    "description": "Nested argument containing Lambda authorizer configuration. Defined below.",
                    "items": {
                      "properties": {
                        "authorizerResultTtlInSeconds": {
                          "description": "Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a ttlOverride key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.",
                          "type": "number"
                        },
                        "authorizerUri": {
                          "description": "ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow lambda:InvokeFunction from service principal appsync.amazonaws.com.",
                          "type": "string"
                        },
                        "identityValidationExpression": {
                          "description": "Regular expression for validation of tokens before the Lambda function is called.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "openidConnectConfig": {
                    "description": "Nested argument containing OpenID Connect configuration. Defined below.",
                    "items": {
                      "properties": {
                        "authTtl": {
                          "description": "Number of milliseconds a token is valid after being authenticated.",
                          "type": "number"
                        },
                        "clientId": {
                          "description": "Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.",
                          "type": "string"
                        },
                        "iatTtl": {
                          "description": "Number of milliseconds a token is valid after being issued to a user.",
                          "type": "number"
                        },
                        "issuer": {
                          "description": "Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "userPoolConfig": {
                    "description": "Amazon Cognito User Pool configuration. Defined below.",
                    "items": {
                      "properties": {
                        "appIdClientRegex": {
                          "description": "Regular expression for validating the incoming Amazon Cognito User Pool app client ID.",
                          "type": "string"
                        },
                        "awsRegion": {
                          "description": "AWS region in which the user pool was created.",
                          "type": "string"
                        },
                        "userPoolId": {
                          "description": "User pool ID.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "arn": {
              "description": "ARN",
              "type": "string"
            },
            "authenticationType": {
              "description": "Authentication type. Valid values: API_KEY, AWS_IAM, AMAZON_COGNITO_USER_POOLS, OPENID_CONNECT, AWS_LAMBDA",
              "type": "string"
            },
            "id": {
              "description": "API ID",
              "type": "string"
            },
            "lambdaAuthorizerConfig": {
              "description": "Nested argument containing Lambda authorizer configuration. Defined below.",
              "items": {
                "properties": {
                  "authorizerResultTtlInSeconds": {
                    "description": "Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a ttlOverride key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.",
                    "type": "number"
                  },
                  "authorizerUri": {
                    "description": "ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow lambda:InvokeFunction from service principal appsync.amazonaws.com.",
                    "type": "string"
                  },
                  "identityValidationExpression": {
                    "description": "Regular expression for validation of tokens before the Lambda function is called.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "logConfig": {
              "description": "Nested argument containing logging configuration. Defined below.",
              "items": {
                "properties": {
                  "cloudwatchLogsRoleArn": {
                    "description": "Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.",
                    "type": "string"
                  },
                  "excludeVerboseContent": {
                    "description": "Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: true, false. Default value: false",
                    "type": "boolean"
                  },
                  "fieldLogLevel": {
                    "description": "Field logging level. Valid values: ALL, ERROR, NONE.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "name": {
              "description": "User-supplied name for the GraphqlApi.",
              "type": "string"
            },
            "openidConnectConfig": {
              "description": "Nested argument containing OpenID Connect configuration. Defined below.",
              "items": {
                "properties": {
                  "authTtl": {
                    "description": "Number of milliseconds a token is valid after being authenticated.",
                    "type": "number"
                  },
                  "clientId": {
                    "description": "Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.",
                    "type": "string"
                  },
                  "iatTtl": {
                    "description": "Number of milliseconds a token is valid after being issued to a user.",
                    "type": "number"
                  },
                  "issuer": {
                    "description": "Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "schema": {
              "description": "Schema definition, in GraphQL schema language format.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "uris": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Map of URIs associated with the APIE.g., uris[\"GRAPHQL\"] = https://ID.appsync-api.REGION.amazonaws.com/graphql",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "userPoolConfig": {
              "description": "Amazon Cognito User Pool configuration. Defined below.",
              "items": {
                "properties": {
                  "appIdClientRegex": {
                    "description": "Regular expression for validating the incoming Amazon Cognito User Pool app client ID.",
                    "type": "string"
                  },
                  "awsRegion": {
                    "description": "AWS region in which the user pool was created.",
                    "type": "string"
                  },
                  "defaultAction": {
                    "description": "Action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: ALLOW and DENY",
                    "type": "string"
                  },
                  "userPoolId": {
                    "description": "User pool ID.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "visibility": {
              "description": "Sets the value of the GraphQL API to public (GLOBAL) or private (PRIVATE). If no value is provided, the visibility will be set to GLOBAL by default. This value cannot be changed once the API has been created.",
              "type": "string"
            },
            "xrayEnabled": {
              "description": "Whether tracing with X-ray is enabled. Defaults to false.",
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                "type": "string"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
