{
  "description": "Distribution is the Schema for the Distributions API. Provides a CloudFront web distribution resource.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "DistributionSpec defines the desired state of Distribution",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "aliases": {
              "description": "Extra CNAMEs (alternate domain names), if any, for this distribution.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "comment": {
              "description": "Any comments you want to include about the distribution.",
              "type": "string"
            },
            "continuousDeploymentPolicyId": {
              "description": "Identifier of a continuous deployment policy. This argument should only be set on a production distribution. See the aws_cloudfront_continuous_deployment_policy resource for additional details.",
              "type": "string"
            },
            "customErrorResponse": {
              "description": "One or more custom error response elements (multiples allowed).",
              "items": {
                "properties": {
                  "errorCachingMinTtl": {
                    "description": "Minimum amount of time you want HTTP error codes to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated.",
                    "type": "number"
                  },
                  "errorCode": {
                    "description": "4xx or 5xx HTTP status code that you want to customize.",
                    "type": "number"
                  },
                  "responseCode": {
                    "description": "HTTP status code that you want CloudFront to return with the custom error page to the viewer.",
                    "type": "number"
                  },
                  "responsePagePath": {
                    "description": "Path of the custom error page (for example, /custom_404.html).",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "defaultCacheBehavior": {
              "description": "Default cache behavior for this distribution (maximum one). Requires either cache_policy_id (preferred) or forwarded_values (deprecated) be set.",
              "properties": {
                "allowedMethods": {
                  "description": "Controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                },
                "cachePolicyId": {
                  "description": "Unique identifier of the cache policy that is attached to the cache behavior. If configuring the default_cache_behavior either cache_policy_id or forwarded_values must be set.",
                  "type": "string"
                },
                "cachedMethods": {
                  "description": "Controls whether CloudFront caches the response to requests using the specified HTTP methods.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                },
                "compress": {
                  "description": "Whether you want CloudFront to automatically compress content for web requests that include Accept-Encoding: gzip in the request header (default: false).",
                  "type": "boolean"
                },
                "defaultTtl": {
                  "description": "Default amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request in the absence of an Cache-Control max-age or Expires header.",
                  "type": "number"
                },
                "fieldLevelEncryptionId": {
                  "description": "Field level encryption configuration ID.",
                  "type": "string"
                },
                "forwardedValues": {
                  "description": "The forwarded values configuration that specifies how CloudFront handles query strings, cookies and headers (maximum one).",
                  "properties": {
                    "cookies": {
                      "description": "The forwarded values cookies that specifies how CloudFront handles cookies (maximum one).",
                      "properties": {
                        "forward": {
                          "description": "Whether you want CloudFront to forward cookies to the origin that is associated with this cache behavior. You can specify all, none or whitelist. If whitelist, you must include the subsequent whitelisted_names.",
                          "type": "string"
                        },
                        "whitelistedNames": {
                          "description": "If you have specified whitelist to forward, the whitelisted cookies that you want CloudFront to forward to your origin.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "headers": {
                      "description": "Headers, if any, that you want CloudFront to vary upon for this cache behavior. Specify * to include all headers.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "x-kubernetes-list-type": "set"
                    },
                    "queryString": {
                      "description": "Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior.",
                      "type": "boolean"
                    },
                    "queryStringCacheKeys": {
                      "description": "When specified, along with a value of true for query_string, all query strings are forwarded, however only the query string keys listed in this argument are cached. When omitted with a value of true for query_string, all query string keys are cached.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "functionAssociation": {
                  "description": "A config block that triggers a cloudfront function with specific actions (maximum 2).",
                  "items": {
                    "properties": {
                      "eventType": {
                        "description": "Specific event to trigger this function. Valid values: viewer-request, origin-request, viewer-response, origin-response.",
                        "type": "string"
                      },
                      "functionArn": {
                        "description": "ARN of the CloudFront function.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "lambdaFunctionAssociation": {
                  "description": "A config block that triggers a lambda function with specific actions (maximum 4).",
                  "items": {
                    "properties": {
                      "eventType": {
                        "description": "Specific event to trigger this function. Valid values: viewer-request, origin-request, viewer-response, origin-response.",
                        "type": "string"
                      },
                      "includeBody": {
                        "description": "When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: true, false.",
                        "type": "boolean"
                      },
                      "lambdaArn": {
                        "description": "ARN of the Lambda function.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "maxTtl": {
                  "description": "Maximum amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request to your origin to determine whether the object has been updated. Only effective in the presence of Cache-Control max-age, Cache-Control s-maxage, and Expires headers.",
                  "type": "number"
                },
                "minTtl": {
                  "description": "Minimum amount of time that you want objects to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated. Defaults to 0 seconds.",
                  "type": "number"
                },
                "originRequestPolicyId": {
                  "description": "Unique identifier of the origin request policy that is attached to the behavior.",
                  "type": "string"
                },
                "realtimeLogConfigArn": {
                  "description": "ARN of the real-time log configuration that is attached to this cache behavior.",
                  "type": "string"
                },
                "responseHeadersPolicyId": {
                  "description": "Identifier for a response headers policy.",
                  "type": "string"
                },
                "smoothStreaming": {
                  "description": "Indicates whether you want to distribute media files in Microsoft Smooth Streaming format using the origin that is associated with this cache behavior.",
                  "type": "boolean"
                },
                "targetOriginId": {
                  "description": "Value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.",
                  "type": "string"
                },
                "trustedKeyGroups": {
                  "description": "List of key group IDs that CloudFront can use to validate signed URLs or signed cookies. See the CloudFront User Guide for more information about this feature.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "trustedSigners": {
                  "description": "List of AWS account IDs (or self) that you want to allow to create signed URLs for private content. See the CloudFront User Guide for more information about this feature.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "viewerProtocolPolicy": {
                  "description": "Use this element to specify the protocol that users can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. One of allow-all, https-only, or redirect-to-https.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "defaultRootObject": {
              "description": "Object that you want CloudFront to return (for example, index.html) when an end user requests the root URL.",
              "type": "string"
            },
            "enabled": {
              "description": "Whether the distribution is enabled to accept end user requests for content.",
              "type": "boolean"
            },
            "httpVersion": {
              "description": "Maximum HTTP version to support on the distribution. Allowed values are http1.1, http2, http2and3 and http3. The default is http2.",
              "type": "string"
            },
            "isIpv6Enabled": {
              "description": "Whether the IPv6 is enabled for the distribution.",
              "type": "boolean"
            },
            "loggingConfig": {
              "description": "The logging configuration that controls how logs are written to your distribution (maximum one).",
              "properties": {
                "bucket": {
                  "description": "Amazon S3 bucket to store the access logs in, for example, myawslogbucket.s3.amazonaws.com.",
                  "type": "string"
                },
                "includeCookies": {
                  "description": "Whether to include cookies in access logs (default: false).",
                  "type": "boolean"
                },
                "prefix": {
                  "description": "Prefix to the access log filenames for this distribution, for example, myprefix/.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "orderedCacheBehavior": {
              "description": "Ordered list of cache behaviors resource for this distribution. List from top to bottom in order of precedence. The topmost cache behavior will have precedence 0.",
              "items": {
                "properties": {
                  "allowedMethods": {
                    "description": "Controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  },
                  "cachePolicyId": {
                    "description": "Unique identifier of the cache policy that is attached to the cache behavior. If configuring the default_cache_behavior either cache_policy_id or forwarded_values must be set.",
                    "type": "string"
                  },
                  "cachedMethods": {
                    "description": "Controls whether CloudFront caches the response to requests using the specified HTTP methods.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  },
                  "compress": {
                    "description": "Whether you want CloudFront to automatically compress content for web requests that include Accept-Encoding: gzip in the request header (default: false).",
                    "type": "boolean"
                  },
                  "defaultTtl": {
                    "description": "Default amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request in the absence of an Cache-Control max-age or Expires header.",
                    "type": "number"
                  },
                  "fieldLevelEncryptionId": {
                    "description": "Field level encryption configuration ID.",
                    "type": "string"
                  },
                  "forwardedValues": {
                    "description": "The forwarded values configuration that specifies how CloudFront handles query strings, cookies and headers (maximum one).",
                    "properties": {
                      "cookies": {
                        "description": "The forwarded values cookies that specifies how CloudFront handles cookies (maximum one).",
                        "properties": {
                          "forward": {
                            "description": "Whether you want CloudFront to forward cookies to the origin that is associated with this cache behavior. You can specify all, none or whitelist. If whitelist, you must include the subsequent whitelisted_names.",
                            "type": "string"
                          },
                          "whitelistedNames": {
                            "description": "If you have specified whitelist to forward, the whitelisted cookies that you want CloudFront to forward to your origin.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "x-kubernetes-list-type": "set"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "headers": {
                        "description": "Headers, if any, that you want CloudFront to vary upon for this cache behavior. Specify * to include all headers.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "set"
                      },
                      "queryString": {
                        "description": "Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior.",
                        "type": "boolean"
                      },
                      "queryStringCacheKeys": {
                        "description": "When specified, along with a value of true for query_string, all query strings are forwarded, however only the query string keys listed in this argument are cached. When omitted with a value of true for query_string, all query string keys are cached.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "functionAssociation": {
                    "description": "A config block that triggers a cloudfront function with specific actions (maximum 2).",
                    "items": {
                      "properties": {
                        "eventType": {
                          "description": "Specific event to trigger this function. Valid values: viewer-request, origin-request, viewer-response, origin-response.",
                          "type": "string"
                        },
                        "functionArn": {
                          "description": "ARN of the CloudFront function.",
                          "type": "string"
                        },
                        "functionArnRef": {
                          "description": "Reference to a Function in cloudfront to populate functionArn.",
                          "properties": {
                            "name": {
                              "description": "Name of the referenced object.",
                              "type": "string"
                            },
                            "policy": {
                              "description": "Policies for referencing.",
                              "properties": {
                                "resolution": {
                                  "default": "Required",
                                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ],
                                  "type": "string"
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        },
                        "functionArnSelector": {
                          "description": "Selector for a Function in cloudfront to populate functionArn.",
                          "properties": {
                            "matchControllerRef": {
                              "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                              "type": "boolean"
                            },
                            "matchLabels": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "MatchLabels ensures an object with matching labels is selected.",
                              "type": "object"
                            },
                            "policy": {
                              "description": "Policies for selection.",
                              "properties": {
                                "resolution": {
                                  "default": "Required",
                                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ],
                                  "type": "string"
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "lambdaFunctionAssociation": {
                    "description": "A config block that triggers a lambda function with specific actions (maximum 4).",
                    "items": {
                      "properties": {
                        "eventType": {
                          "description": "Specific event to trigger this function. Valid values: viewer-request, origin-request, viewer-response, origin-response.",
                          "type": "string"
                        },
                        "includeBody": {
                          "description": "When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: true, false.",
                          "type": "boolean"
                        },
                        "lambdaArn": {
                          "description": "ARN of the Lambda function.",
                          "type": "string"
                        },
                        "lambdaArnRef": {
                          "description": "Reference to a Function in lambda to populate lambdaArn.",
                          "properties": {
                            "name": {
                              "description": "Name of the referenced object.",
                              "type": "string"
                            },
                            "policy": {
                              "description": "Policies for referencing.",
                              "properties": {
                                "resolution": {
                                  "default": "Required",
                                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ],
                                  "type": "string"
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        },
                        "lambdaArnSelector": {
                          "description": "Selector for a Function in lambda to populate lambdaArn.",
                          "properties": {
                            "matchControllerRef": {
                              "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                              "type": "boolean"
                            },
                            "matchLabels": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "MatchLabels ensures an object with matching labels is selected.",
                              "type": "object"
                            },
                            "policy": {
                              "description": "Policies for selection.",
                              "properties": {
                                "resolution": {
                                  "default": "Required",
                                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ],
                                  "type": "string"
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "maxTtl": {
                    "description": "Maximum amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request to your origin to determine whether the object has been updated. Only effective in the presence of Cache-Control max-age, Cache-Control s-maxage, and Expires headers.",
                    "type": "number"
                  },
                  "minTtl": {
                    "description": "Minimum amount of time that you want objects to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated. Defaults to 0 seconds.",
                    "type": "number"
                  },
                  "originRequestPolicyId": {
                    "description": "Unique identifier of the origin request policy that is attached to the behavior.",
                    "type": "string"
                  },
                  "pathPattern": {
                    "description": "Pattern (for example, images/*.jpg) that specifies which requests you want this cache behavior to apply to.",
                    "type": "string"
                  },
                  "realtimeLogConfigArn": {
                    "description": "ARN of the real-time log configuration that is attached to this cache behavior.",
                    "type": "string"
                  },
                  "responseHeadersPolicyId": {
                    "description": "Identifier for a response headers policy.",
                    "type": "string"
                  },
                  "smoothStreaming": {
                    "description": "Indicates whether you want to distribute media files in Microsoft Smooth Streaming format using the origin that is associated with this cache behavior.",
                    "type": "boolean"
                  },
                  "targetOriginId": {
                    "description": "Value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.",
                    "type": "string"
                  },
                  "trustedKeyGroups": {
                    "description": "List of key group IDs that CloudFront can use to validate signed URLs or signed cookies. See the CloudFront User Guide for more information about this feature.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "trustedSigners": {
                    "description": "List of AWS account IDs (or self) that you want to allow to create signed URLs for private content. See the CloudFront User Guide for more information about this feature.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "viewerProtocolPolicy": {
                    "description": "Use this element to specify the protocol that users can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. One of allow-all, https-only, or redirect-to-https.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "origin": {
              "description": "One or more origins for this distribution (multiples allowed).",
              "items": {
                "properties": {
                  "connectionAttempts": {
                    "description": "Number of times that CloudFront attempts to connect to the origin. Must be between 1-3. Defaults to 3.",
                    "type": "number"
                  },
                  "connectionTimeout": {
                    "description": "Number of seconds that CloudFront waits when trying to establish a connection to the origin. Must be between 1-10. Defaults to 10.",
                    "type": "number"
                  },
                  "customHeader": {
                    "description": "One or more sub-resources with name and value parameters that specify header data that will be sent to the origin (multiples allowed).",
                    "items": {
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "customOriginConfig": {
                    "description": "The CloudFront custom origin configuration information. If an S3 origin is required, use origin_access_control_id or s3_origin_config instead.",
                    "properties": {
                      "httpPort": {
                        "description": "HTTP port the custom origin listens on.",
                        "type": "number"
                      },
                      "httpsPort": {
                        "description": "HTTPS port the custom origin listens on.",
                        "type": "number"
                      },
                      "originKeepaliveTimeout": {
                        "description": "The Custom KeepAlive timeout, in seconds. By default, AWS enforces an upper limit of 60. But you can request an increase. Defaults to 5.",
                        "type": "number"
                      },
                      "originProtocolPolicy": {
                        "description": "Origin protocol policy to apply to your origin. One of http-only, https-only, or match-viewer.",
                        "type": "string"
                      },
                      "originReadTimeout": {
                        "description": "The Custom Read timeout, in seconds. By default, AWS enforces an upper limit of 60. But you can request an increase. Defaults to 30.",
                        "type": "number"
                      },
                      "originSslProtocols": {
                        "description": "List of SSL/TLS protocols that CloudFront can use when connecting to your origin over HTTPS. Valid values: SSLv3, TLSv1, TLSv1.1, TLSv1.2. For more information, see Minimum Origin SSL Protocol in the Amazon CloudFront Developer Guide.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "set"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "domainName": {
                    "description": "DNS domain name of either the S3 bucket, or web site of your custom origin.",
                    "type": "string"
                  },
                  "originAccessControlId": {
                    "description": "Unique identifier of a CloudFront origin access control for this origin.",
                    "type": "string"
                  },
                  "originAccessControlIdRef": {
                    "description": "Reference to a OriginAccessControl in cloudfront to populate originAccessControlId.",
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "originAccessControlIdSelector": {
                    "description": "Selector for a OriginAccessControl in cloudfront to populate originAccessControlId.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "originId": {
                    "description": "Unique identifier for the origin.",
                    "type": "string"
                  },
                  "originPath": {
                    "description": "Optional element that causes CloudFront to request your content from a directory in your Amazon S3 bucket or your custom origin.",
                    "type": "string"
                  },
                  "originShield": {
                    "description": "CloudFront Origin Shield configuration information. Using Origin Shield can help reduce the load on your origin. For more information, see Using Origin Shield in the Amazon CloudFront Developer Guide.",
                    "properties": {
                      "enabled": {
                        "description": "Whether the distribution is enabled to accept end user requests for content.",
                        "type": "boolean"
                      },
                      "originShieldRegion": {
                        "description": "AWS Region for Origin Shield. To specify a region, use the region code, not the region name. For example, specify the US East (Ohio) region as us-east-2.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "s3OriginConfig": {
                    "description": "CloudFront S3 origin configuration information. If a custom origin is required, use custom_origin_config instead.",
                    "properties": {
                      "originAccessIdentity": {
                        "description": "The CloudFront origin access identity to associate with the origin.",
                        "type": "string"
                      },
                      "originAccessIdentityRef": {
                        "description": "Reference to a OriginAccessIdentity in cloudfront to populate originAccessIdentity.",
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "properties": {
                              "resolution": {
                                "default": "Required",
                                "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ],
                                "type": "string"
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object",
                        "additionalProperties": false
                      },
                      "originAccessIdentitySelector": {
                        "description": "Selector for a OriginAccessIdentity in cloudfront to populate originAccessIdentity.",
                        "properties": {
                          "matchControllerRef": {
                            "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                            "type": "boolean"
                          },
                          "matchLabels": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "MatchLabels ensures an object with matching labels is selected.",
                            "type": "object"
                          },
                          "policy": {
                            "description": "Policies for selection.",
                            "properties": {
                              "resolution": {
                                "default": "Required",
                                "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ],
                                "type": "string"
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "vpcOriginConfig": {
                    "description": "The VPC origin configuration.",
                    "properties": {
                      "originKeepaliveTimeout": {
                        "description": "The Custom KeepAlive timeout, in seconds. By default, AWS enforces an upper limit of 60. But you can request an increase. Defaults to 5.",
                        "type": "number"
                      },
                      "originReadTimeout": {
                        "description": "The Custom Read timeout, in seconds. By default, AWS enforces an upper limit of 60. But you can request an increase. Defaults to 30.",
                        "type": "number"
                      },
                      "vpcOriginId": {
                        "description": "The VPC origin ID.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "originGroup": {
              "description": "One or more origin_group for this distribution (multiples allowed).",
              "items": {
                "properties": {
                  "failoverCriteria": {
                    "description": "The failover criteria for when to failover to the secondary origin.",
                    "properties": {
                      "statusCodes": {
                        "description": "List of HTTP status codes for the origin group.",
                        "items": {
                          "type": "number"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "set"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "member": {
                    "description": "Ordered member configuration blocks assigned to the origin group, where the first member is the primary origin. You must specify two members.",
                    "items": {
                      "properties": {
                        "originId": {
                          "description": "Unique identifier for the origin.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "originId": {
                    "description": "Unique identifier for the origin.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "priceClass": {
              "description": "Price class for this distribution. One of PriceClass_All, PriceClass_200, PriceClass_100.",
              "type": "string"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "restrictions": {
              "description": "The restriction configuration for this distribution (maximum one).",
              "properties": {
                "geoRestriction": {
                  "properties": {
                    "locations": {
                      "description": "ISO 3166-1-alpha-2 codes for which you want CloudFront either to distribute your content (whitelist) or not distribute your content (blacklist). If the type is specified as none an empty array can be used.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "x-kubernetes-list-type": "set"
                    },
                    "restrictionType": {
                      "description": "Method that you want to use to restrict distribution of your content by country: none, whitelist, or blacklist.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "retainOnDelete": {
              "description": "If this is set, the distribution needs to be deleted manually afterwards. Default: false.",
              "type": "boolean"
            },
            "staging": {
              "description": "A Boolean that indicates whether this is a staging distribution. Defaults to false.",
              "type": "boolean"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "viewerCertificate": {
              "description": "The SSL configuration for this distribution (maximum one).",
              "properties": {
                "acmCertificateArn": {
                  "description": "ARN of the AWS Certificate Manager certificate that you wish to use with this distribution. Specify this, cloudfront_default_certificate, or iam_certificate_id.  The ACM certificate must be in  US-EAST-1.",
                  "type": "string"
                },
                "cloudfrontDefaultCertificate": {
                  "description": "true if you want viewers to use HTTPS to request your objects and you're using the CloudFront domain name for your distribution. Specify this, acm_certificate_arn, or iam_certificate_id.",
                  "type": "boolean"
                },
                "iamCertificateId": {
                  "description": "IAM certificate identifier of the custom viewer certificate for this distribution if you are using a custom domain. Specify this, acm_certificate_arn, or cloudfront_default_certificate.",
                  "type": "string"
                },
                "minimumProtocolVersion": {
                  "description": "Minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections. Can only be set if cloudfront_default_certificate = false. See all possible values in this table under \"Security policy.\" Some examples include: TLSv1.2_2019 and TLSv1.2_2021. Default: TLSv1. NOTE: If you are using a custom certificate (specified with acm_certificate_arn or iam_certificate_id), and have specified sni-only in ssl_support_method, TLSv1 or later must be specified. If you have specified vip in ssl_support_method, only SSLv3 or TLSv1 can be specified. If you have specified cloudfront_default_certificate, TLSv1 must be specified.",
                  "type": "string"
                },
                "sslSupportMethod": {
                  "description": "How you want CloudFront to serve HTTPS requests. One of vip, sni-only, or static-ip. Required if you specify acm_certificate_arn or iam_certificate_id. NOTE: vip causes CloudFront to use a dedicated IP address and may incur extra charges.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "waitForDeployment": {
              "description": "If enabled, the resource will wait for the distribution status to change from InProgress to Deployed. Setting this tofalse will skip the process. Default: true.",
              "type": "boolean"
            },
            "webAclId": {
              "description": "Unique identifier that specifies the AWS WAF web ACL, if any, to associate with this distribution. To specify a web ACL created using the latest version of AWS WAF (WAFv2), use the ACL ARN, for example aws_wafv2_web_acl.example.arn. To specify a web ACL created using AWS WAF Classic, use the ACL ID, for example aws_waf_web_acl.example.id. The WAF Web ACL must exist in the WAF Global (CloudFront) region and the credentials configuring this argument must have waf:GetWebACL permissions assigned.",
              "type": "string"
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "properties": {
            "aliases": {
              "description": "Extra CNAMEs (alternate domain names), if any, for this distribution.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "comment": {
              "description": "Any comments you want to include about the distribution.",
              "type": "string"
            },
            "continuousDeploymentPolicyId": {
              "description": "Identifier of a continuous deployment policy. This argument should only be set on a production distribution. See the aws_cloudfront_continuous_deployment_policy resource for additional details.",
              "type": "string"
            },
            "customErrorResponse": {
              "description": "One or more custom error response elements (multiples allowed).",
              "items": {
                "properties": {
                  "errorCachingMinTtl": {
                    "description": "Minimum amount of time you want HTTP error codes to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated.",
                    "type": "number"
                  },
                  "errorCode": {
                    "description": "4xx or 5xx HTTP status code that you want to customize.",
                    "type": "number"
                  },
                  "responseCode": {
                    "description": "HTTP status code that you want CloudFront to return with the custom error page to the viewer.",
                    "type": "number"
                  },
                  "responsePagePath": {
                    "description": "Path of the custom error page (for example, /custom_404.html).",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "defaultCacheBehavior": {
              "description": "Default cache behavior for this distribution (maximum one). Requires either cache_policy_id (preferred) or forwarded_values (deprecated) be set.",
              "properties": {
                "allowedMethods": {
                  "description": "Controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                },
                "cachePolicyId": {
                  "description": "Unique identifier of the cache policy that is attached to the cache behavior. If configuring the default_cache_behavior either cache_policy_id or forwarded_values must be set.",
                  "type": "string"
                },
                "cachedMethods": {
                  "description": "Controls whether CloudFront caches the response to requests using the specified HTTP methods.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                },
                "compress": {
                  "description": "Whether you want CloudFront to automatically compress content for web requests that include Accept-Encoding: gzip in the request header (default: false).",
                  "type": "boolean"
                },
                "defaultTtl": {
                  "description": "Default amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request in the absence of an Cache-Control max-age or Expires header.",
                  "type": "number"
                },
                "fieldLevelEncryptionId": {
                  "description": "Field level encryption configuration ID.",
                  "type": "string"
                },
                "forwardedValues": {
                  "description": "The forwarded values configuration that specifies how CloudFront handles query strings, cookies and headers (maximum one).",
                  "properties": {
                    "cookies": {
                      "description": "The forwarded values cookies that specifies how CloudFront handles cookies (maximum one).",
                      "properties": {
                        "forward": {
                          "description": "Whether you want CloudFront to forward cookies to the origin that is associated with this cache behavior. You can specify all, none or whitelist. If whitelist, you must include the subsequent whitelisted_names.",
                          "type": "string"
                        },
                        "whitelistedNames": {
                          "description": "If you have specified whitelist to forward, the whitelisted cookies that you want CloudFront to forward to your origin.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "headers": {
                      "description": "Headers, if any, that you want CloudFront to vary upon for this cache behavior. Specify * to include all headers.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "x-kubernetes-list-type": "set"
                    },
                    "queryString": {
                      "description": "Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior.",
                      "type": "boolean"
                    },
                    "queryStringCacheKeys": {
                      "description": "When specified, along with a value of true for query_string, all query strings are forwarded, however only the query string keys listed in this argument are cached. When omitted with a value of true for query_string, all query string keys are cached.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "functionAssociation": {
                  "description": "A config block that triggers a cloudfront function with specific actions (maximum 2).",
                  "items": {
                    "properties": {
                      "eventType": {
                        "description": "Specific event to trigger this function. Valid values: viewer-request, origin-request, viewer-response, origin-response.",
                        "type": "string"
                      },
                      "functionArn": {
                        "description": "ARN of the CloudFront function.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "lambdaFunctionAssociation": {
                  "description": "A config block that triggers a lambda function with specific actions (maximum 4).",
                  "items": {
                    "properties": {
                      "eventType": {
                        "description": "Specific event to trigger this function. Valid values: viewer-request, origin-request, viewer-response, origin-response.",
                        "type": "string"
                      },
                      "includeBody": {
                        "description": "When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: true, false.",
                        "type": "boolean"
                      },
                      "lambdaArn": {
                        "description": "ARN of the Lambda function.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "maxTtl": {
                  "description": "Maximum amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request to your origin to determine whether the object has been updated. Only effective in the presence of Cache-Control max-age, Cache-Control s-maxage, and Expires headers.",
                  "type": "number"
                },
                "minTtl": {
                  "description": "Minimum amount of time that you want objects to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated. Defaults to 0 seconds.",
                  "type": "number"
                },
                "originRequestPolicyId": {
                  "description": "Unique identifier of the origin request policy that is attached to the behavior.",
                  "type": "string"
                },
                "realtimeLogConfigArn": {
                  "description": "ARN of the real-time log configuration that is attached to this cache behavior.",
                  "type": "string"
                },
                "responseHeadersPolicyId": {
                  "description": "Identifier for a response headers policy.",
                  "type": "string"
                },
                "smoothStreaming": {
                  "description": "Indicates whether you want to distribute media files in Microsoft Smooth Streaming format using the origin that is associated with this cache behavior.",
                  "type": "boolean"
                },
                "targetOriginId": {
                  "description": "Value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.",
                  "type": "string"
                },
                "trustedKeyGroups": {
                  "description": "List of key group IDs that CloudFront can use to validate signed URLs or signed cookies. See the CloudFront User Guide for more information about this feature.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "trustedSigners": {
                  "description": "List of AWS account IDs (or self) that you want to allow to create signed URLs for private content. See the CloudFront User Guide for more information about this feature.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "viewerProtocolPolicy": {
                  "description": "Use this element to specify the protocol that users can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. One of allow-all, https-only, or redirect-to-https.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "defaultRootObject": {
              "description": "Object that you want CloudFront to return (for example, index.html) when an end user requests the root URL.",
              "type": "string"
            },
            "enabled": {
              "description": "Whether the distribution is enabled to accept end user requests for content.",
              "type": "boolean"
            },
            "httpVersion": {
              "description": "Maximum HTTP version to support on the distribution. Allowed values are http1.1, http2, http2and3 and http3. The default is http2.",
              "type": "string"
            },
            "isIpv6Enabled": {
              "description": "Whether the IPv6 is enabled for the distribution.",
              "type": "boolean"
            },
            "loggingConfig": {
              "description": "The logging configuration that controls how logs are written to your distribution (maximum one).",
              "properties": {
                "bucket": {
                  "description": "Amazon S3 bucket to store the access logs in, for example, myawslogbucket.s3.amazonaws.com.",
                  "type": "string"
                },
                "includeCookies": {
                  "description": "Whether to include cookies in access logs (default: false).",
                  "type": "boolean"
                },
                "prefix": {
                  "description": "Prefix to the access log filenames for this distribution, for example, myprefix/.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "orderedCacheBehavior": {
              "description": "Ordered list of cache behaviors resource for this distribution. List from top to bottom in order of precedence. The topmost cache behavior will have precedence 0.",
              "items": {
                "properties": {
                  "allowedMethods": {
                    "description": "Controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  },
                  "cachePolicyId": {
                    "description": "Unique identifier of the cache policy that is attached to the cache behavior. If configuring the default_cache_behavior either cache_policy_id or forwarded_values must be set.",
                    "type": "string"
                  },
                  "cachedMethods": {
                    "description": "Controls whether CloudFront caches the response to requests using the specified HTTP methods.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  },
                  "compress": {
                    "description": "Whether you want CloudFront to automatically compress content for web requests that include Accept-Encoding: gzip in the request header (default: false).",
                    "type": "boolean"
                  },
                  "defaultTtl": {
                    "description": "Default amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request in the absence of an Cache-Control max-age or Expires header.",
                    "type": "number"
                  },
                  "fieldLevelEncryptionId": {
                    "description": "Field level encryption configuration ID.",
                    "type": "string"
                  },
                  "forwardedValues": {
                    "description": "The forwarded values configuration that specifies how CloudFront handles query strings, cookies and headers (maximum one).",
                    "properties": {
                      "cookies": {
                        "description": "The forwarded values cookies that specifies how CloudFront handles cookies (maximum one).",
                        "properties": {
                          "forward": {
                            "description": "Whether you want CloudFront to forward cookies to the origin that is associated with this cache behavior. You can specify all, none or whitelist. If whitelist, you must include the subsequent whitelisted_names.",
                            "type": "string"
                          },
                          "whitelistedNames": {
                            "description": "If you have specified whitelist to forward, the whitelisted cookies that you want CloudFront to forward to your origin.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "x-kubernetes-list-type": "set"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "headers": {
                        "description": "Headers, if any, that you want CloudFront to vary upon for this cache behavior. Specify * to include all headers.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "set"
                      },
                      "queryString": {
                        "description": "Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior.",
                        "type": "boolean"
                      },
                      "queryStringCacheKeys": {
                        "description": "When specified, along with a value of true for query_string, all query strings are forwarded, however only the query string keys listed in this argument are cached. When omitted with a value of true for query_string, all query string keys are cached.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "functionAssociation": {
                    "description": "A config block that triggers a cloudfront function with specific actions (maximum 2).",
                    "items": {
                      "properties": {
                        "eventType": {
                          "description": "Specific event to trigger this function. Valid values: viewer-request, origin-request, viewer-response, origin-response.",
                          "type": "string"
                        },
                        "functionArn": {
                          "description": "ARN of the CloudFront function.",
                          "type": "string"
                        },
                        "functionArnRef": {
                          "description": "Reference to a Function in cloudfront to populate functionArn.",
                          "properties": {
                            "name": {
                              "description": "Name of the referenced object.",
                              "type": "string"
                            },
                            "policy": {
                              "description": "Policies for referencing.",
                              "properties": {
                                "resolution": {
                                  "default": "Required",
                                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ],
                                  "type": "string"
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        },
                        "functionArnSelector": {
                          "description": "Selector for a Function in cloudfront to populate functionArn.",
                          "properties": {
                            "matchControllerRef": {
                              "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                              "type": "boolean"
                            },
                            "matchLabels": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "MatchLabels ensures an object with matching labels is selected.",
                              "type": "object"
                            },
                            "policy": {
                              "description": "Policies for selection.",
                              "properties": {
                                "resolution": {
                                  "default": "Required",
                                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ],
                                  "type": "string"
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "lambdaFunctionAssociation": {
                    "description": "A config block that triggers a lambda function with specific actions (maximum 4).",
                    "items": {
                      "properties": {
                        "eventType": {
                          "description": "Specific event to trigger this function. Valid values: viewer-request, origin-request, viewer-response, origin-response.",
                          "type": "string"
                        },
                        "includeBody": {
                          "description": "When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: true, false.",
                          "type": "boolean"
                        },
                        "lambdaArn": {
                          "description": "ARN of the Lambda function.",
                          "type": "string"
                        },
                        "lambdaArnRef": {
                          "description": "Reference to a Function in lambda to populate lambdaArn.",
                          "properties": {
                            "name": {
                              "description": "Name of the referenced object.",
                              "type": "string"
                            },
                            "policy": {
                              "description": "Policies for referencing.",
                              "properties": {
                                "resolution": {
                                  "default": "Required",
                                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ],
                                  "type": "string"
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        },
                        "lambdaArnSelector": {
                          "description": "Selector for a Function in lambda to populate lambdaArn.",
                          "properties": {
                            "matchControllerRef": {
                              "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                              "type": "boolean"
                            },
                            "matchLabels": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "MatchLabels ensures an object with matching labels is selected.",
                              "type": "object"
                            },
                            "policy": {
                              "description": "Policies for selection.",
                              "properties": {
                                "resolution": {
                                  "default": "Required",
                                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ],
                                  "type": "string"
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "maxTtl": {
                    "description": "Maximum amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request to your origin to determine whether the object has been updated. Only effective in the presence of Cache-Control max-age, Cache-Control s-maxage, and Expires headers.",
                    "type": "number"
                  },
                  "minTtl": {
                    "description": "Minimum amount of time that you want objects to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated. Defaults to 0 seconds.",
                    "type": "number"
                  },
                  "originRequestPolicyId": {
                    "description": "Unique identifier of the origin request policy that is attached to the behavior.",
                    "type": "string"
                  },
                  "pathPattern": {
                    "description": "Pattern (for example, images/*.jpg) that specifies which requests you want this cache behavior to apply to.",
                    "type": "string"
                  },
                  "realtimeLogConfigArn": {
                    "description": "ARN of the real-time log configuration that is attached to this cache behavior.",
                    "type": "string"
                  },
                  "responseHeadersPolicyId": {
                    "description": "Identifier for a response headers policy.",
                    "type": "string"
                  },
                  "smoothStreaming": {
                    "description": "Indicates whether you want to distribute media files in Microsoft Smooth Streaming format using the origin that is associated with this cache behavior.",
                    "type": "boolean"
                  },
                  "targetOriginId": {
                    "description": "Value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.",
                    "type": "string"
                  },
                  "trustedKeyGroups": {
                    "description": "List of key group IDs that CloudFront can use to validate signed URLs or signed cookies. See the CloudFront User Guide for more information about this feature.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "trustedSigners": {
                    "description": "List of AWS account IDs (or self) that you want to allow to create signed URLs for private content. See the CloudFront User Guide for more information about this feature.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "viewerProtocolPolicy": {
                    "description": "Use this element to specify the protocol that users can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. One of allow-all, https-only, or redirect-to-https.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "origin": {
              "description": "One or more origins for this distribution (multiples allowed).",
              "items": {
                "properties": {
                  "connectionAttempts": {
                    "description": "Number of times that CloudFront attempts to connect to the origin. Must be between 1-3. Defaults to 3.",
                    "type": "number"
                  },
                  "connectionTimeout": {
                    "description": "Number of seconds that CloudFront waits when trying to establish a connection to the origin. Must be between 1-10. Defaults to 10.",
                    "type": "number"
                  },
                  "customHeader": {
                    "description": "One or more sub-resources with name and value parameters that specify header data that will be sent to the origin (multiples allowed).",
                    "items": {
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "customOriginConfig": {
                    "description": "The CloudFront custom origin configuration information. If an S3 origin is required, use origin_access_control_id or s3_origin_config instead.",
                    "properties": {
                      "httpPort": {
                        "description": "HTTP port the custom origin listens on.",
                        "type": "number"
                      },
                      "httpsPort": {
                        "description": "HTTPS port the custom origin listens on.",
                        "type": "number"
                      },
                      "originKeepaliveTimeout": {
                        "description": "The Custom KeepAlive timeout, in seconds. By default, AWS enforces an upper limit of 60. But you can request an increase. Defaults to 5.",
                        "type": "number"
                      },
                      "originProtocolPolicy": {
                        "description": "Origin protocol policy to apply to your origin. One of http-only, https-only, or match-viewer.",
                        "type": "string"
                      },
                      "originReadTimeout": {
                        "description": "The Custom Read timeout, in seconds. By default, AWS enforces an upper limit of 60. But you can request an increase. Defaults to 30.",
                        "type": "number"
                      },
                      "originSslProtocols": {
                        "description": "List of SSL/TLS protocols that CloudFront can use when connecting to your origin over HTTPS. Valid values: SSLv3, TLSv1, TLSv1.1, TLSv1.2. For more information, see Minimum Origin SSL Protocol in the Amazon CloudFront Developer Guide.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "set"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "domainName": {
                    "description": "DNS domain name of either the S3 bucket, or web site of your custom origin.",
                    "type": "string"
                  },
                  "originAccessControlId": {
                    "description": "Unique identifier of a CloudFront origin access control for this origin.",
                    "type": "string"
                  },
                  "originAccessControlIdRef": {
                    "description": "Reference to a OriginAccessControl in cloudfront to populate originAccessControlId.",
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "originAccessControlIdSelector": {
                    "description": "Selector for a OriginAccessControl in cloudfront to populate originAccessControlId.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "originId": {
                    "description": "Unique identifier for the origin.",
                    "type": "string"
                  },
                  "originPath": {
                    "description": "Optional element that causes CloudFront to request your content from a directory in your Amazon S3 bucket or your custom origin.",
                    "type": "string"
                  },
                  "originShield": {
                    "description": "CloudFront Origin Shield configuration information. Using Origin Shield can help reduce the load on your origin. For more information, see Using Origin Shield in the Amazon CloudFront Developer Guide.",
                    "properties": {
                      "enabled": {
                        "description": "Whether the distribution is enabled to accept end user requests for content.",
                        "type": "boolean"
                      },
                      "originShieldRegion": {
                        "description": "AWS Region for Origin Shield. To specify a region, use the region code, not the region name. For example, specify the US East (Ohio) region as us-east-2.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "s3OriginConfig": {
                    "description": "CloudFront S3 origin configuration information. If a custom origin is required, use custom_origin_config instead.",
                    "properties": {
                      "originAccessIdentity": {
                        "description": "The CloudFront origin access identity to associate with the origin.",
                        "type": "string"
                      },
                      "originAccessIdentityRef": {
                        "description": "Reference to a OriginAccessIdentity in cloudfront to populate originAccessIdentity.",
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "properties": {
                              "resolution": {
                                "default": "Required",
                                "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ],
                                "type": "string"
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object",
                        "additionalProperties": false
                      },
                      "originAccessIdentitySelector": {
                        "description": "Selector for a OriginAccessIdentity in cloudfront to populate originAccessIdentity.",
                        "properties": {
                          "matchControllerRef": {
                            "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                            "type": "boolean"
                          },
                          "matchLabels": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "MatchLabels ensures an object with matching labels is selected.",
                            "type": "object"
                          },
                          "policy": {
                            "description": "Policies for selection.",
                            "properties": {
                              "resolution": {
                                "default": "Required",
                                "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ],
                                "type": "string"
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "vpcOriginConfig": {
                    "description": "The VPC origin configuration.",
                    "properties": {
                      "originKeepaliveTimeout": {
                        "description": "The Custom KeepAlive timeout, in seconds. By default, AWS enforces an upper limit of 60. But you can request an increase. Defaults to 5.",
                        "type": "number"
                      },
                      "originReadTimeout": {
                        "description": "The Custom Read timeout, in seconds. By default, AWS enforces an upper limit of 60. But you can request an increase. Defaults to 30.",
                        "type": "number"
                      },
                      "vpcOriginId": {
                        "description": "The VPC origin ID.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "originGroup": {
              "description": "One or more origin_group for this distribution (multiples allowed).",
              "items": {
                "properties": {
                  "failoverCriteria": {
                    "description": "The failover criteria for when to failover to the secondary origin.",
                    "properties": {
                      "statusCodes": {
                        "description": "List of HTTP status codes for the origin group.",
                        "items": {
                          "type": "number"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "set"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "member": {
                    "description": "Ordered member configuration blocks assigned to the origin group, where the first member is the primary origin. You must specify two members.",
                    "items": {
                      "properties": {
                        "originId": {
                          "description": "Unique identifier for the origin.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "originId": {
                    "description": "Unique identifier for the origin.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "priceClass": {
              "description": "Price class for this distribution. One of PriceClass_All, PriceClass_200, PriceClass_100.",
              "type": "string"
            },
            "restrictions": {
              "description": "The restriction configuration for this distribution (maximum one).",
              "properties": {
                "geoRestriction": {
                  "properties": {
                    "locations": {
                      "description": "ISO 3166-1-alpha-2 codes for which you want CloudFront either to distribute your content (whitelist) or not distribute your content (blacklist). If the type is specified as none an empty array can be used.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "x-kubernetes-list-type": "set"
                    },
                    "restrictionType": {
                      "description": "Method that you want to use to restrict distribution of your content by country: none, whitelist, or blacklist.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "retainOnDelete": {
              "description": "If this is set, the distribution needs to be deleted manually afterwards. Default: false.",
              "type": "boolean"
            },
            "staging": {
              "description": "A Boolean that indicates whether this is a staging distribution. Defaults to false.",
              "type": "boolean"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "viewerCertificate": {
              "description": "The SSL configuration for this distribution (maximum one).",
              "properties": {
                "acmCertificateArn": {
                  "description": "ARN of the AWS Certificate Manager certificate that you wish to use with this distribution. Specify this, cloudfront_default_certificate, or iam_certificate_id.  The ACM certificate must be in  US-EAST-1.",
                  "type": "string"
                },
                "cloudfrontDefaultCertificate": {
                  "description": "true if you want viewers to use HTTPS to request your objects and you're using the CloudFront domain name for your distribution. Specify this, acm_certificate_arn, or iam_certificate_id.",
                  "type": "boolean"
                },
                "iamCertificateId": {
                  "description": "IAM certificate identifier of the custom viewer certificate for this distribution if you are using a custom domain. Specify this, acm_certificate_arn, or cloudfront_default_certificate.",
                  "type": "string"
                },
                "minimumProtocolVersion": {
                  "description": "Minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections. Can only be set if cloudfront_default_certificate = false. See all possible values in this table under \"Security policy.\" Some examples include: TLSv1.2_2019 and TLSv1.2_2021. Default: TLSv1. NOTE: If you are using a custom certificate (specified with acm_certificate_arn or iam_certificate_id), and have specified sni-only in ssl_support_method, TLSv1 or later must be specified. If you have specified vip in ssl_support_method, only SSLv3 or TLSv1 can be specified. If you have specified cloudfront_default_certificate, TLSv1 must be specified.",
                  "type": "string"
                },
                "sslSupportMethod": {
                  "description": "How you want CloudFront to serve HTTPS requests. One of vip, sni-only, or static-ip. Required if you specify acm_certificate_arn or iam_certificate_id. NOTE: vip causes CloudFront to use a dedicated IP address and may incur extra charges.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "waitForDeployment": {
              "description": "If enabled, the resource will wait for the distribution status to change from InProgress to Deployed. Setting this tofalse will skip the process. Default: true.",
              "type": "boolean"
            },
            "webAclId": {
              "description": "Unique identifier that specifies the AWS WAF web ACL, if any, to associate with this distribution. To specify a web ACL created using the latest version of AWS WAF (WAFv2), use the ACL ARN, for example aws_wafv2_web_acl.example.arn. To specify a web ACL created using AWS WAF Classic, use the ACL ID, for example aws_waf_web_acl.example.id. The WAF Web ACL must exist in the WAF Global (CloudFront) region and the credentials configuring this argument must have waf:GetWebACL permissions assigned.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which\ncontains a name, metadata and a reference to secret store config to\nwhich any connection details for this managed resource should be written.\nConnection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used\nfor this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.annotations\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.labels\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret.\n- Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.\nThis field is planned to be replaced in a future release in favor of\nPublishConnectionDetailsTo. Currently, both could be set independently\nand connection details would be published to both without affecting\neach other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "spec.forProvider.defaultCacheBehavior is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.defaultCacheBehavior) || (has(self.initProvider) && has(self.initProvider.defaultCacheBehavior))"
        },
        {
          "message": "spec.forProvider.enabled is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))"
        },
        {
          "message": "spec.forProvider.origin is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.origin) || (has(self.initProvider) && has(self.initProvider.origin))"
        },
        {
          "message": "spec.forProvider.restrictions is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.restrictions) || (has(self.initProvider) && has(self.initProvider.restrictions))"
        },
        {
          "message": "spec.forProvider.viewerCertificate is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.viewerCertificate) || (has(self.initProvider) && has(self.initProvider.viewerCertificate))"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "DistributionStatus defines the observed state of Distribution.",
      "properties": {
        "atProvider": {
          "properties": {
            "aliases": {
              "description": "Extra CNAMEs (alternate domain names), if any, for this distribution.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "arn": {
              "description": "ARN for the distribution. For example: arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5, where 123456789012 is your AWS account ID.",
              "type": "string"
            },
            "callerReference": {
              "description": "Internal value used by CloudFront to allow future updates to the distribution configuration.",
              "type": "string"
            },
            "comment": {
              "description": "Any comments you want to include about the distribution.",
              "type": "string"
            },
            "continuousDeploymentPolicyId": {
              "description": "Identifier of a continuous deployment policy. This argument should only be set on a production distribution. See the aws_cloudfront_continuous_deployment_policy resource for additional details.",
              "type": "string"
            },
            "customErrorResponse": {
              "description": "One or more custom error response elements (multiples allowed).",
              "items": {
                "properties": {
                  "errorCachingMinTtl": {
                    "description": "Minimum amount of time you want HTTP error codes to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated.",
                    "type": "number"
                  },
                  "errorCode": {
                    "description": "4xx or 5xx HTTP status code that you want to customize.",
                    "type": "number"
                  },
                  "responseCode": {
                    "description": "HTTP status code that you want CloudFront to return with the custom error page to the viewer.",
                    "type": "number"
                  },
                  "responsePagePath": {
                    "description": "Path of the custom error page (for example, /custom_404.html).",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "defaultCacheBehavior": {
              "description": "Default cache behavior for this distribution (maximum one). Requires either cache_policy_id (preferred) or forwarded_values (deprecated) be set.",
              "properties": {
                "allowedMethods": {
                  "description": "Controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                },
                "cachePolicyId": {
                  "description": "Unique identifier of the cache policy that is attached to the cache behavior. If configuring the default_cache_behavior either cache_policy_id or forwarded_values must be set.",
                  "type": "string"
                },
                "cachedMethods": {
                  "description": "Controls whether CloudFront caches the response to requests using the specified HTTP methods.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                },
                "compress": {
                  "description": "Whether you want CloudFront to automatically compress content for web requests that include Accept-Encoding: gzip in the request header (default: false).",
                  "type": "boolean"
                },
                "defaultTtl": {
                  "description": "Default amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request in the absence of an Cache-Control max-age or Expires header.",
                  "type": "number"
                },
                "fieldLevelEncryptionId": {
                  "description": "Field level encryption configuration ID.",
                  "type": "string"
                },
                "forwardedValues": {
                  "description": "The forwarded values configuration that specifies how CloudFront handles query strings, cookies and headers (maximum one).",
                  "properties": {
                    "cookies": {
                      "description": "The forwarded values cookies that specifies how CloudFront handles cookies (maximum one).",
                      "properties": {
                        "forward": {
                          "description": "Whether you want CloudFront to forward cookies to the origin that is associated with this cache behavior. You can specify all, none or whitelist. If whitelist, you must include the subsequent whitelisted_names.",
                          "type": "string"
                        },
                        "whitelistedNames": {
                          "description": "If you have specified whitelist to forward, the whitelisted cookies that you want CloudFront to forward to your origin.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "headers": {
                      "description": "Headers, if any, that you want CloudFront to vary upon for this cache behavior. Specify * to include all headers.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "x-kubernetes-list-type": "set"
                    },
                    "queryString": {
                      "description": "Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior.",
                      "type": "boolean"
                    },
                    "queryStringCacheKeys": {
                      "description": "When specified, along with a value of true for query_string, all query strings are forwarded, however only the query string keys listed in this argument are cached. When omitted with a value of true for query_string, all query string keys are cached.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "functionAssociation": {
                  "description": "A config block that triggers a cloudfront function with specific actions (maximum 2).",
                  "items": {
                    "properties": {
                      "eventType": {
                        "description": "Specific event to trigger this function. Valid values: viewer-request, origin-request, viewer-response, origin-response.",
                        "type": "string"
                      },
                      "functionArn": {
                        "description": "ARN of the CloudFront function.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "lambdaFunctionAssociation": {
                  "description": "A config block that triggers a lambda function with specific actions (maximum 4).",
                  "items": {
                    "properties": {
                      "eventType": {
                        "description": "Specific event to trigger this function. Valid values: viewer-request, origin-request, viewer-response, origin-response.",
                        "type": "string"
                      },
                      "includeBody": {
                        "description": "When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: true, false.",
                        "type": "boolean"
                      },
                      "lambdaArn": {
                        "description": "ARN of the Lambda function.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "maxTtl": {
                  "description": "Maximum amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request to your origin to determine whether the object has been updated. Only effective in the presence of Cache-Control max-age, Cache-Control s-maxage, and Expires headers.",
                  "type": "number"
                },
                "minTtl": {
                  "description": "Minimum amount of time that you want objects to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated. Defaults to 0 seconds.",
                  "type": "number"
                },
                "originRequestPolicyId": {
                  "description": "Unique identifier of the origin request policy that is attached to the behavior.",
                  "type": "string"
                },
                "realtimeLogConfigArn": {
                  "description": "ARN of the real-time log configuration that is attached to this cache behavior.",
                  "type": "string"
                },
                "responseHeadersPolicyId": {
                  "description": "Identifier for a response headers policy.",
                  "type": "string"
                },
                "smoothStreaming": {
                  "description": "Indicates whether you want to distribute media files in Microsoft Smooth Streaming format using the origin that is associated with this cache behavior.",
                  "type": "boolean"
                },
                "targetOriginId": {
                  "description": "Value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.",
                  "type": "string"
                },
                "trustedKeyGroups": {
                  "description": "List of key group IDs that CloudFront can use to validate signed URLs or signed cookies. See the CloudFront User Guide for more information about this feature.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "trustedSigners": {
                  "description": "List of AWS account IDs (or self) that you want to allow to create signed URLs for private content. See the CloudFront User Guide for more information about this feature.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "viewerProtocolPolicy": {
                  "description": "Use this element to specify the protocol that users can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. One of allow-all, https-only, or redirect-to-https.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "defaultRootObject": {
              "description": "Object that you want CloudFront to return (for example, index.html) when an end user requests the root URL.",
              "type": "string"
            },
            "domainName": {
              "description": "DNS domain name of either the S3 bucket, or web site of your custom origin.",
              "type": "string"
            },
            "enabled": {
              "description": "Whether the distribution is enabled to accept end user requests for content.",
              "type": "boolean"
            },
            "etag": {
              "description": "Current version of the distribution's information. For example: E2QWRUHAPOMQZL.",
              "type": "string"
            },
            "hostedZoneId": {
              "description": "CloudFront Route 53 zone ID that can be used to route an Alias Resource Record Set to. This attribute is simply an alias for the zone ID Z2FDTNDATAQYW2.",
              "type": "string"
            },
            "httpVersion": {
              "description": "Maximum HTTP version to support on the distribution. Allowed values are http1.1, http2, http2and3 and http3. The default is http2.",
              "type": "string"
            },
            "id": {
              "description": "Identifier for the distribution. For example: EDFDVBD632BHDS5.",
              "type": "string"
            },
            "inProgressValidationBatches": {
              "description": "Number of invalidation batches currently in progress.",
              "type": "number"
            },
            "isIpv6Enabled": {
              "description": "Whether the IPv6 is enabled for the distribution.",
              "type": "boolean"
            },
            "lastModifiedTime": {
              "description": "Date and time the distribution was last modified.",
              "type": "string"
            },
            "loggingConfig": {
              "description": "The logging configuration that controls how logs are written to your distribution (maximum one).",
              "properties": {
                "bucket": {
                  "description": "Amazon S3 bucket to store the access logs in, for example, myawslogbucket.s3.amazonaws.com.",
                  "type": "string"
                },
                "includeCookies": {
                  "description": "Whether to include cookies in access logs (default: false).",
                  "type": "boolean"
                },
                "prefix": {
                  "description": "Prefix to the access log filenames for this distribution, for example, myprefix/.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "orderedCacheBehavior": {
              "description": "Ordered list of cache behaviors resource for this distribution. List from top to bottom in order of precedence. The topmost cache behavior will have precedence 0.",
              "items": {
                "properties": {
                  "allowedMethods": {
                    "description": "Controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  },
                  "cachePolicyId": {
                    "description": "Unique identifier of the cache policy that is attached to the cache behavior. If configuring the default_cache_behavior either cache_policy_id or forwarded_values must be set.",
                    "type": "string"
                  },
                  "cachedMethods": {
                    "description": "Controls whether CloudFront caches the response to requests using the specified HTTP methods.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  },
                  "compress": {
                    "description": "Whether you want CloudFront to automatically compress content for web requests that include Accept-Encoding: gzip in the request header (default: false).",
                    "type": "boolean"
                  },
                  "defaultTtl": {
                    "description": "Default amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request in the absence of an Cache-Control max-age or Expires header.",
                    "type": "number"
                  },
                  "fieldLevelEncryptionId": {
                    "description": "Field level encryption configuration ID.",
                    "type": "string"
                  },
                  "forwardedValues": {
                    "description": "The forwarded values configuration that specifies how CloudFront handles query strings, cookies and headers (maximum one).",
                    "properties": {
                      "cookies": {
                        "description": "The forwarded values cookies that specifies how CloudFront handles cookies (maximum one).",
                        "properties": {
                          "forward": {
                            "description": "Whether you want CloudFront to forward cookies to the origin that is associated with this cache behavior. You can specify all, none or whitelist. If whitelist, you must include the subsequent whitelisted_names.",
                            "type": "string"
                          },
                          "whitelistedNames": {
                            "description": "If you have specified whitelist to forward, the whitelisted cookies that you want CloudFront to forward to your origin.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "x-kubernetes-list-type": "set"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "headers": {
                        "description": "Headers, if any, that you want CloudFront to vary upon for this cache behavior. Specify * to include all headers.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "set"
                      },
                      "queryString": {
                        "description": "Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior.",
                        "type": "boolean"
                      },
                      "queryStringCacheKeys": {
                        "description": "When specified, along with a value of true for query_string, all query strings are forwarded, however only the query string keys listed in this argument are cached. When omitted with a value of true for query_string, all query string keys are cached.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "functionAssociation": {
                    "description": "A config block that triggers a cloudfront function with specific actions (maximum 2).",
                    "items": {
                      "properties": {
                        "eventType": {
                          "description": "Specific event to trigger this function. Valid values: viewer-request, origin-request, viewer-response, origin-response.",
                          "type": "string"
                        },
                        "functionArn": {
                          "description": "ARN of the CloudFront function.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "lambdaFunctionAssociation": {
                    "description": "A config block that triggers a lambda function with specific actions (maximum 4).",
                    "items": {
                      "properties": {
                        "eventType": {
                          "description": "Specific event to trigger this function. Valid values: viewer-request, origin-request, viewer-response, origin-response.",
                          "type": "string"
                        },
                        "includeBody": {
                          "description": "When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: true, false.",
                          "type": "boolean"
                        },
                        "lambdaArn": {
                          "description": "ARN of the Lambda function.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "maxTtl": {
                    "description": "Maximum amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request to your origin to determine whether the object has been updated. Only effective in the presence of Cache-Control max-age, Cache-Control s-maxage, and Expires headers.",
                    "type": "number"
                  },
                  "minTtl": {
                    "description": "Minimum amount of time that you want objects to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated. Defaults to 0 seconds.",
                    "type": "number"
                  },
                  "originRequestPolicyId": {
                    "description": "Unique identifier of the origin request policy that is attached to the behavior.",
                    "type": "string"
                  },
                  "pathPattern": {
                    "description": "Pattern (for example, images/*.jpg) that specifies which requests you want this cache behavior to apply to.",
                    "type": "string"
                  },
                  "realtimeLogConfigArn": {
                    "description": "ARN of the real-time log configuration that is attached to this cache behavior.",
                    "type": "string"
                  },
                  "responseHeadersPolicyId": {
                    "description": "Identifier for a response headers policy.",
                    "type": "string"
                  },
                  "smoothStreaming": {
                    "description": "Indicates whether you want to distribute media files in Microsoft Smooth Streaming format using the origin that is associated with this cache behavior.",
                    "type": "boolean"
                  },
                  "targetOriginId": {
                    "description": "Value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.",
                    "type": "string"
                  },
                  "trustedKeyGroups": {
                    "description": "List of key group IDs that CloudFront can use to validate signed URLs or signed cookies. See the CloudFront User Guide for more information about this feature.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "trustedSigners": {
                    "description": "List of AWS account IDs (or self) that you want to allow to create signed URLs for private content. See the CloudFront User Guide for more information about this feature.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "viewerProtocolPolicy": {
                    "description": "Use this element to specify the protocol that users can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. One of allow-all, https-only, or redirect-to-https.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "origin": {
              "description": "One or more origins for this distribution (multiples allowed).",
              "items": {
                "properties": {
                  "connectionAttempts": {
                    "description": "Number of times that CloudFront attempts to connect to the origin. Must be between 1-3. Defaults to 3.",
                    "type": "number"
                  },
                  "connectionTimeout": {
                    "description": "Number of seconds that CloudFront waits when trying to establish a connection to the origin. Must be between 1-10. Defaults to 10.",
                    "type": "number"
                  },
                  "customHeader": {
                    "description": "One or more sub-resources with name and value parameters that specify header data that will be sent to the origin (multiples allowed).",
                    "items": {
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "customOriginConfig": {
                    "description": "The CloudFront custom origin configuration information. If an S3 origin is required, use origin_access_control_id or s3_origin_config instead.",
                    "properties": {
                      "httpPort": {
                        "description": "HTTP port the custom origin listens on.",
                        "type": "number"
                      },
                      "httpsPort": {
                        "description": "HTTPS port the custom origin listens on.",
                        "type": "number"
                      },
                      "originKeepaliveTimeout": {
                        "description": "The Custom KeepAlive timeout, in seconds. By default, AWS enforces an upper limit of 60. But you can request an increase. Defaults to 5.",
                        "type": "number"
                      },
                      "originProtocolPolicy": {
                        "description": "Origin protocol policy to apply to your origin. One of http-only, https-only, or match-viewer.",
                        "type": "string"
                      },
                      "originReadTimeout": {
                        "description": "The Custom Read timeout, in seconds. By default, AWS enforces an upper limit of 60. But you can request an increase. Defaults to 30.",
                        "type": "number"
                      },
                      "originSslProtocols": {
                        "description": "List of SSL/TLS protocols that CloudFront can use when connecting to your origin over HTTPS. Valid values: SSLv3, TLSv1, TLSv1.1, TLSv1.2. For more information, see Minimum Origin SSL Protocol in the Amazon CloudFront Developer Guide.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "set"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "domainName": {
                    "description": "DNS domain name of either the S3 bucket, or web site of your custom origin.",
                    "type": "string"
                  },
                  "originAccessControlId": {
                    "description": "Unique identifier of a CloudFront origin access control for this origin.",
                    "type": "string"
                  },
                  "originId": {
                    "description": "Unique identifier for the origin.",
                    "type": "string"
                  },
                  "originPath": {
                    "description": "Optional element that causes CloudFront to request your content from a directory in your Amazon S3 bucket or your custom origin.",
                    "type": "string"
                  },
                  "originShield": {
                    "description": "CloudFront Origin Shield configuration information. Using Origin Shield can help reduce the load on your origin. For more information, see Using Origin Shield in the Amazon CloudFront Developer Guide.",
                    "properties": {
                      "enabled": {
                        "description": "Whether the distribution is enabled to accept end user requests for content.",
                        "type": "boolean"
                      },
                      "originShieldRegion": {
                        "description": "AWS Region for Origin Shield. To specify a region, use the region code, not the region name. For example, specify the US East (Ohio) region as us-east-2.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "s3OriginConfig": {
                    "description": "CloudFront S3 origin configuration information. If a custom origin is required, use custom_origin_config instead.",
                    "properties": {
                      "originAccessIdentity": {
                        "description": "The CloudFront origin access identity to associate with the origin.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "vpcOriginConfig": {
                    "description": "The VPC origin configuration.",
                    "properties": {
                      "originKeepaliveTimeout": {
                        "description": "The Custom KeepAlive timeout, in seconds. By default, AWS enforces an upper limit of 60. But you can request an increase. Defaults to 5.",
                        "type": "number"
                      },
                      "originReadTimeout": {
                        "description": "The Custom Read timeout, in seconds. By default, AWS enforces an upper limit of 60. But you can request an increase. Defaults to 30.",
                        "type": "number"
                      },
                      "vpcOriginId": {
                        "description": "The VPC origin ID.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "originGroup": {
              "description": "One or more origin_group for this distribution (multiples allowed).",
              "items": {
                "properties": {
                  "failoverCriteria": {
                    "description": "The failover criteria for when to failover to the secondary origin.",
                    "properties": {
                      "statusCodes": {
                        "description": "List of HTTP status codes for the origin group.",
                        "items": {
                          "type": "number"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "set"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "member": {
                    "description": "Ordered member configuration blocks assigned to the origin group, where the first member is the primary origin. You must specify two members.",
                    "items": {
                      "properties": {
                        "originId": {
                          "description": "Unique identifier for the origin.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "originId": {
                    "description": "Unique identifier for the origin.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "priceClass": {
              "description": "Price class for this distribution. One of PriceClass_All, PriceClass_200, PriceClass_100.",
              "type": "string"
            },
            "restrictions": {
              "description": "The restriction configuration for this distribution (maximum one).",
              "properties": {
                "geoRestriction": {
                  "properties": {
                    "locations": {
                      "description": "ISO 3166-1-alpha-2 codes for which you want CloudFront either to distribute your content (whitelist) or not distribute your content (blacklist). If the type is specified as none an empty array can be used.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "x-kubernetes-list-type": "set"
                    },
                    "restrictionType": {
                      "description": "Method that you want to use to restrict distribution of your content by country: none, whitelist, or blacklist.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "retainOnDelete": {
              "description": "If this is set, the distribution needs to be deleted manually afterwards. Default: false.",
              "type": "boolean"
            },
            "staging": {
              "description": "A Boolean that indicates whether this is a staging distribution. Defaults to false.",
              "type": "boolean"
            },
            "status": {
              "description": "Current status of the distribution. Deployed if the distribution's information is fully propagated throughout the Amazon CloudFront system.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "trustedKeyGroups": {
              "description": "List of key group IDs that CloudFront can use to validate signed URLs or signed cookies. See the CloudFront User Guide for more information about this feature.",
              "items": {
                "properties": {
                  "enabled": {
                    "description": "Whether the distribution is enabled to accept end user requests for content.",
                    "type": "boolean"
                  },
                  "items": {
                    "description": "List of nested attributes for each key group.",
                    "items": {
                      "properties": {
                        "keyGroupId": {
                          "description": "ID of the key group that contains the public keys.",
                          "type": "string"
                        },
                        "keyPairIds": {
                          "description": "Set of CloudFront key pair IDs.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "trustedSigners": {
              "description": "List of AWS account IDs (or self) that you want to allow to create signed URLs for private content. See the CloudFront User Guide for more information about this feature.",
              "items": {
                "properties": {
                  "enabled": {
                    "description": "Whether the distribution is enabled to accept end user requests for content.",
                    "type": "boolean"
                  },
                  "items": {
                    "description": "List of nested attributes for each key group.",
                    "items": {
                      "properties": {
                        "awsAccountNumber": {
                          "description": "AWS account ID or self",
                          "type": "string"
                        },
                        "keyPairIds": {
                          "description": "Set of CloudFront key pair IDs.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "viewerCertificate": {
              "description": "The SSL configuration for this distribution (maximum one).",
              "properties": {
                "acmCertificateArn": {
                  "description": "ARN of the AWS Certificate Manager certificate that you wish to use with this distribution. Specify this, cloudfront_default_certificate, or iam_certificate_id.  The ACM certificate must be in  US-EAST-1.",
                  "type": "string"
                },
                "cloudfrontDefaultCertificate": {
                  "description": "true if you want viewers to use HTTPS to request your objects and you're using the CloudFront domain name for your distribution. Specify this, acm_certificate_arn, or iam_certificate_id.",
                  "type": "boolean"
                },
                "iamCertificateId": {
                  "description": "IAM certificate identifier of the custom viewer certificate for this distribution if you are using a custom domain. Specify this, acm_certificate_arn, or cloudfront_default_certificate.",
                  "type": "string"
                },
                "minimumProtocolVersion": {
                  "description": "Minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections. Can only be set if cloudfront_default_certificate = false. See all possible values in this table under \"Security policy.\" Some examples include: TLSv1.2_2019 and TLSv1.2_2021. Default: TLSv1. NOTE: If you are using a custom certificate (specified with acm_certificate_arn or iam_certificate_id), and have specified sni-only in ssl_support_method, TLSv1 or later must be specified. If you have specified vip in ssl_support_method, only SSLv3 or TLSv1 can be specified. If you have specified cloudfront_default_certificate, TLSv1 must be specified.",
                  "type": "string"
                },
                "sslSupportMethod": {
                  "description": "How you want CloudFront to serve HTTPS requests. One of vip, sni-only, or static-ip. Required if you specify acm_certificate_arn or iam_certificate_id. NOTE: vip causes CloudFront to use a dedicated IP address and may incur extra charges.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "waitForDeployment": {
              "description": "If enabled, the resource will wait for the distribution status to change from InProgress to Deployed. Setting this tofalse will skip the process. Default: true.",
              "type": "boolean"
            },
            "webAclId": {
              "description": "Unique identifier that specifies the AWS WAF web ACL, if any, to associate with this distribution. To specify a web ACL created using the latest version of AWS WAF (WAFv2), use the ACL ARN, for example aws_wafv2_web_acl.example.arn. To specify a web ACL created using AWS WAF Classic, use the ACL ID, for example aws_waf_web_acl.example.id. The WAF Web ACL must exist in the WAF Global (CloudFront) region and the credentials configuring this argument must have waf:GetWebACL permissions assigned.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
