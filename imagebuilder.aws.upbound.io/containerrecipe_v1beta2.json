{
  "description": "ContainerRecipe is the Schema for the ContainerRecipes API. Manage an Image Builder Container Recipe",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ContainerRecipeSpec defines the desired state of ContainerRecipe",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "component": {
              "description": "Ordered configuration block(s) with components for the container recipe. Detailed below.",
              "items": {
                "properties": {
                  "componentArn": {
                    "description": "Amazon Resource Name (ARN) of the Image Builder Component to associate.",
                    "type": "string"
                  },
                  "componentArnRef": {
                    "description": "Reference to a Component in imagebuilder to populate componentArn.",
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "componentArnSelector": {
                    "description": "Selector for a Component in imagebuilder to populate componentArn.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "parameter": {
                    "description": "Configuration block(s) for parameters to configure the component. Detailed below.",
                    "items": {
                      "properties": {
                        "name": {
                          "description": "The name of the component parameter.",
                          "type": "string"
                        },
                        "value": {
                          "description": "The value for the named component parameter.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "containerType": {
              "description": "The type of the container to create. Valid values: DOCKER.",
              "type": "string"
            },
            "description": {
              "description": "The description of the container recipe.",
              "type": "string"
            },
            "dockerfileTemplateData": {
              "description": "The Dockerfile template used to build the image as an inline data blob.",
              "type": "string"
            },
            "dockerfileTemplateUri": {
              "description": "The Amazon S3 URI for the Dockerfile that will be used to build the container image.",
              "type": "string"
            },
            "instanceConfiguration": {
              "description": "Configuration block used to configure an instance for building and testing container images. Detailed below.",
              "properties": {
                "blockDeviceMapping": {
                  "description": "Configuration block(s) with block device mappings for the container recipe. Detailed below.",
                  "items": {
                    "properties": {
                      "deviceName": {
                        "description": "Name of the device. For example, /dev/sda or /dev/xvdb.",
                        "type": "string"
                      },
                      "ebs": {
                        "description": "Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.",
                        "properties": {
                          "deleteOnTermination": {
                            "description": "Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.",
                            "type": "string"
                          },
                          "encrypted": {
                            "description": "Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.",
                            "type": "string"
                          },
                          "iops": {
                            "description": "Number of Input/Output (I/O) operations per second to provision for an io1 or io2 volume.",
                            "type": "number"
                          },
                          "kmsKeyId": {
                            "description": "Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.",
                            "type": "string"
                          },
                          "snapshotId": {
                            "description": "Identifier of the EC2 Volume Snapshot.",
                            "type": "string"
                          },
                          "throughput": {
                            "description": "For GP3 volumes only. The throughput in MiB/s that the volume supports.",
                            "type": "number"
                          },
                          "volumeSize": {
                            "description": "Size of the volume, in GiB.",
                            "type": "number"
                          },
                          "volumeType": {
                            "description": "Type of the volume. For example, gp2 or io2.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "noDevice": {
                        "description": "Set to true to remove a mapping from the parent image.",
                        "type": "boolean"
                      },
                      "virtualName": {
                        "description": "Virtual device name. For example, ephemeral0. Instance store volumes are numbered starting from 0.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "image": {
                  "description": "The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "kmsKeyId": {
              "description": "The KMS key used to encrypt the container image.",
              "type": "string"
            },
            "kmsKeyIdRef": {
              "description": "Reference to a Key in kms to populate kmsKeyId.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "kmsKeyIdSelector": {
              "description": "Selector for a Key in kms to populate kmsKeyId.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "The name of the container recipe.",
              "type": "string"
            },
            "parentImage": {
              "description": "The base image for the container recipe.",
              "type": "string"
            },
            "platformOverride": {
              "description": "Specifies the operating system platform when you use a custom base image.",
              "type": "string"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "targetRepository": {
              "description": "The destination repository for the container image. Detailed below.",
              "properties": {
                "repositoryName": {
                  "description": "The name of the container repository where the output container image is stored. This name is prefixed by the repository location.",
                  "type": "string"
                },
                "repositoryNameRef": {
                  "description": "Reference to a Repository in ecr to populate repositoryName.",
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "properties": {
                        "resolution": {
                          "default": "Required",
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "enum": [
                            "Required",
                            "Optional"
                          ],
                          "type": "string"
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "repositoryNameSelector": {
                  "description": "Selector for a Repository in ecr to populate repositoryName.",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "properties": {
                        "resolution": {
                          "default": "Required",
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "enum": [
                            "Required",
                            "Optional"
                          ],
                          "type": "string"
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "service": {
                  "description": "The service in which this image is registered. Valid values: ECR.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "version": {
              "description": "Version of the container recipe.",
              "type": "string"
            },
            "workingDirectory": {
              "description": "The working directory to be used during build and test workflows.",
              "type": "string"
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "properties": {
            "component": {
              "description": "Ordered configuration block(s) with components for the container recipe. Detailed below.",
              "items": {
                "properties": {
                  "componentArn": {
                    "description": "Amazon Resource Name (ARN) of the Image Builder Component to associate.",
                    "type": "string"
                  },
                  "componentArnRef": {
                    "description": "Reference to a Component in imagebuilder to populate componentArn.",
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "componentArnSelector": {
                    "description": "Selector for a Component in imagebuilder to populate componentArn.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "parameter": {
                    "description": "Configuration block(s) for parameters to configure the component. Detailed below.",
                    "items": {
                      "properties": {
                        "name": {
                          "description": "The name of the component parameter.",
                          "type": "string"
                        },
                        "value": {
                          "description": "The value for the named component parameter.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "containerType": {
              "description": "The type of the container to create. Valid values: DOCKER.",
              "type": "string"
            },
            "description": {
              "description": "The description of the container recipe.",
              "type": "string"
            },
            "dockerfileTemplateData": {
              "description": "The Dockerfile template used to build the image as an inline data blob.",
              "type": "string"
            },
            "dockerfileTemplateUri": {
              "description": "The Amazon S3 URI for the Dockerfile that will be used to build the container image.",
              "type": "string"
            },
            "instanceConfiguration": {
              "description": "Configuration block used to configure an instance for building and testing container images. Detailed below.",
              "properties": {
                "blockDeviceMapping": {
                  "description": "Configuration block(s) with block device mappings for the container recipe. Detailed below.",
                  "items": {
                    "properties": {
                      "deviceName": {
                        "description": "Name of the device. For example, /dev/sda or /dev/xvdb.",
                        "type": "string"
                      },
                      "ebs": {
                        "description": "Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.",
                        "properties": {
                          "deleteOnTermination": {
                            "description": "Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.",
                            "type": "string"
                          },
                          "encrypted": {
                            "description": "Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.",
                            "type": "string"
                          },
                          "iops": {
                            "description": "Number of Input/Output (I/O) operations per second to provision for an io1 or io2 volume.",
                            "type": "number"
                          },
                          "kmsKeyId": {
                            "description": "Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.",
                            "type": "string"
                          },
                          "snapshotId": {
                            "description": "Identifier of the EC2 Volume Snapshot.",
                            "type": "string"
                          },
                          "throughput": {
                            "description": "For GP3 volumes only. The throughput in MiB/s that the volume supports.",
                            "type": "number"
                          },
                          "volumeSize": {
                            "description": "Size of the volume, in GiB.",
                            "type": "number"
                          },
                          "volumeType": {
                            "description": "Type of the volume. For example, gp2 or io2.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "noDevice": {
                        "description": "Set to true to remove a mapping from the parent image.",
                        "type": "boolean"
                      },
                      "virtualName": {
                        "description": "Virtual device name. For example, ephemeral0. Instance store volumes are numbered starting from 0.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "image": {
                  "description": "The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "kmsKeyId": {
              "description": "The KMS key used to encrypt the container image.",
              "type": "string"
            },
            "kmsKeyIdRef": {
              "description": "Reference to a Key in kms to populate kmsKeyId.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "kmsKeyIdSelector": {
              "description": "Selector for a Key in kms to populate kmsKeyId.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "The name of the container recipe.",
              "type": "string"
            },
            "parentImage": {
              "description": "The base image for the container recipe.",
              "type": "string"
            },
            "platformOverride": {
              "description": "Specifies the operating system platform when you use a custom base image.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "targetRepository": {
              "description": "The destination repository for the container image. Detailed below.",
              "properties": {
                "repositoryName": {
                  "description": "The name of the container repository where the output container image is stored. This name is prefixed by the repository location.",
                  "type": "string"
                },
                "repositoryNameRef": {
                  "description": "Reference to a Repository in ecr to populate repositoryName.",
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "properties": {
                        "resolution": {
                          "default": "Required",
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "enum": [
                            "Required",
                            "Optional"
                          ],
                          "type": "string"
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "repositoryNameSelector": {
                  "description": "Selector for a Repository in ecr to populate repositoryName.",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "properties": {
                        "resolution": {
                          "default": "Required",
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "enum": [
                            "Required",
                            "Optional"
                          ],
                          "type": "string"
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "service": {
                  "description": "The service in which this image is registered. Valid values: ECR.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "version": {
              "description": "Version of the container recipe.",
              "type": "string"
            },
            "workingDirectory": {
              "description": "The working directory to be used during build and test workflows.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which\ncontains a name, metadata and a reference to secret store config to\nwhich any connection details for this managed resource should be written.\nConnection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used\nfor this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.annotations\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.labels\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret.\n- Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.\nThis field is planned to be replaced in a future release in favor of\nPublishConnectionDetailsTo. Currently, both could be set independently\nand connection details would be published to both without affecting\neach other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "spec.forProvider.component is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.component) || (has(self.initProvider) && has(self.initProvider.component))"
        },
        {
          "message": "spec.forProvider.containerType is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.containerType) || (has(self.initProvider) && has(self.initProvider.containerType))"
        },
        {
          "message": "spec.forProvider.name is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))"
        },
        {
          "message": "spec.forProvider.parentImage is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.parentImage) || (has(self.initProvider) && has(self.initProvider.parentImage))"
        },
        {
          "message": "spec.forProvider.targetRepository is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.targetRepository) || (has(self.initProvider) && has(self.initProvider.targetRepository))"
        },
        {
          "message": "spec.forProvider.version is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) && has(self.initProvider.version))"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "ContainerRecipeStatus defines the observed state of ContainerRecipe.",
      "properties": {
        "atProvider": {
          "properties": {
            "arn": {
              "description": "Amazon Resource Name (ARN) of the container recipe.",
              "type": "string"
            },
            "component": {
              "description": "Ordered configuration block(s) with components for the container recipe. Detailed below.",
              "items": {
                "properties": {
                  "componentArn": {
                    "description": "Amazon Resource Name (ARN) of the Image Builder Component to associate.",
                    "type": "string"
                  },
                  "parameter": {
                    "description": "Configuration block(s) for parameters to configure the component. Detailed below.",
                    "items": {
                      "properties": {
                        "name": {
                          "description": "The name of the component parameter.",
                          "type": "string"
                        },
                        "value": {
                          "description": "The value for the named component parameter.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "containerType": {
              "description": "The type of the container to create. Valid values: DOCKER.",
              "type": "string"
            },
            "dateCreated": {
              "description": "Date the container recipe was created.",
              "type": "string"
            },
            "description": {
              "description": "The description of the container recipe.",
              "type": "string"
            },
            "dockerfileTemplateData": {
              "description": "The Dockerfile template used to build the image as an inline data blob.",
              "type": "string"
            },
            "dockerfileTemplateUri": {
              "description": "The Amazon S3 URI for the Dockerfile that will be used to build the container image.",
              "type": "string"
            },
            "encrypted": {
              "description": "A flag that indicates if the target container is encrypted.",
              "type": "boolean"
            },
            "id": {
              "type": "string"
            },
            "instanceConfiguration": {
              "description": "Configuration block used to configure an instance for building and testing container images. Detailed below.",
              "properties": {
                "blockDeviceMapping": {
                  "description": "Configuration block(s) with block device mappings for the container recipe. Detailed below.",
                  "items": {
                    "properties": {
                      "deviceName": {
                        "description": "Name of the device. For example, /dev/sda or /dev/xvdb.",
                        "type": "string"
                      },
                      "ebs": {
                        "description": "Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.",
                        "properties": {
                          "deleteOnTermination": {
                            "description": "Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.",
                            "type": "string"
                          },
                          "encrypted": {
                            "description": "Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.",
                            "type": "string"
                          },
                          "iops": {
                            "description": "Number of Input/Output (I/O) operations per second to provision for an io1 or io2 volume.",
                            "type": "number"
                          },
                          "kmsKeyId": {
                            "description": "Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.",
                            "type": "string"
                          },
                          "snapshotId": {
                            "description": "Identifier of the EC2 Volume Snapshot.",
                            "type": "string"
                          },
                          "throughput": {
                            "description": "For GP3 volumes only. The throughput in MiB/s that the volume supports.",
                            "type": "number"
                          },
                          "volumeSize": {
                            "description": "Size of the volume, in GiB.",
                            "type": "number"
                          },
                          "volumeType": {
                            "description": "Type of the volume. For example, gp2 or io2.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "noDevice": {
                        "description": "Set to true to remove a mapping from the parent image.",
                        "type": "boolean"
                      },
                      "virtualName": {
                        "description": "Virtual device name. For example, ephemeral0. Instance store volumes are numbered starting from 0.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "image": {
                  "description": "The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "kmsKeyId": {
              "description": "The KMS key used to encrypt the container image.",
              "type": "string"
            },
            "name": {
              "description": "The name of the container recipe.",
              "type": "string"
            },
            "owner": {
              "description": "Owner of the container recipe.",
              "type": "string"
            },
            "parentImage": {
              "description": "The base image for the container recipe.",
              "type": "string"
            },
            "platform": {
              "description": "Platform of the container recipe.",
              "type": "string"
            },
            "platformOverride": {
              "description": "Specifies the operating system platform when you use a custom base image.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "targetRepository": {
              "description": "The destination repository for the container image. Detailed below.",
              "properties": {
                "repositoryName": {
                  "description": "The name of the container repository where the output container image is stored. This name is prefixed by the repository location.",
                  "type": "string"
                },
                "service": {
                  "description": "The service in which this image is registered. Valid values: ECR.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "version": {
              "description": "Version of the container recipe.",
              "type": "string"
            },
            "workingDirectory": {
              "description": "The working directory to be used during build and test workflows.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
