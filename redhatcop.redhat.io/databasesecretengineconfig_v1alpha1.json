{
  "description": "DatabaseSecretEngineConfig is the Schema for the databasesecretengineconfigs API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "DatabaseSecretEngineConfigSpec defines the desired state of DatabaseSecretEngineConfig",
      "properties": {
        "allowedRoles": {
          "default": [
            "*"
          ],
          "description": "AllowedRoles List of the roles allowed to use this connection. Defaults to empty (no roles), if contains a \"*\" any role can use this connection. kubebuilder:validation:UniqueItems=true",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "authentication": {
          "description": "Authentication is the kube auth configuration to be used to execute this request",
          "properties": {
            "namespace": {
              "description": "Namespace is the Vault namespace to be used in all the operations withing this connection/authentication. Only available in Vault Enterprise.",
              "type": "string"
            },
            "path": {
              "default": "kubernetes",
              "description": "Path is the path of the role used for this kube auth authentication. The operator will try to authenticate at {[namespace/]}auth/{spec.path}",
              "pattern": "^(?:/?[\\w;:@&=\\$-\\.\\+]*)+/?",
              "type": "string"
            },
            "role": {
              "description": "Role the role to be used during authentication",
              "type": "string"
            },
            "serviceAccount": {
              "default": {
                "name": "default"
              },
              "description": "ServiceAccount is the service account used for the kube auth authentication",
              "properties": {
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                }
              },
              "type": "object",
              "x-kubernetes-map-type": "atomic",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "connection": {
          "description": "Connection represents the information needed to connect to Vault. This operator uses the standard Vault environment variables to connect to Vault. If you need to override those settings and for example connect to a different Vault instance, you can do with this section of the CR.",
          "properties": {
            "address": {
              "description": "Address Address of the Vault server expressed as a URL and port, for example: https://127.0.0.1:8200/",
              "type": "string"
            },
            "maxRetries": {
              "description": "MaxRetries Maximum number of retries when certain error codes are encountered. The default is 2, for three total attempts. Set this to 0 or less to disable retrying. Error codes that are retried are 412 (client consistency requirement not satisfied) and all 5xx except for 501 (not implemented).",
              "type": "integer"
            },
            "tLSConfig": {
              "properties": {
                "cacert": {
                  "description": "Cacert Path to a PEM-encoded CA certificate file on the local disk. This file is used to verify the Vault server's SSL certificate. This environment variable takes precedence over a cert passed via the secret.",
                  "type": "string"
                },
                "skipVerify": {
                  "description": "SkipVerify Do not verify Vault's presented certificate before communicating with it. Setting this variable is not recommended and voids Vault's security model.",
                  "type": "boolean"
                },
                "tlsSecret": {
                  "description": "TLSSecret namespace-local secret containing the tls material for the connection. the expected keys for the secret are: ca bundle -> \"ca.crt\", certificate -> \"tls.crt\", key -> \"tls.key\"",
                  "properties": {
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "x-kubernetes-map-type": "atomic",
                  "additionalProperties": false
                },
                "tlsServerName": {
                  "description": "TLSServerName Name to use as the SNI host when connecting via TLS.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "timeOut": {
              "description": "Timeout Timeout variable. The default value is 60s.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "connectionURL": {
          "description": "ConnectionURL Specifies the connection string used to connect to the database. Some plugins use url rather than connection_url. This allows for simple templating of the username and password of the root user. Typically, this is done by including a \"{{\"username\"}}\", \"{{\"name\"}}\", and/or \"{{\"password\"}}\" field within the string. These fields are typically be replaced with the values in the username and password fields.",
          "type": "string"
        },
        "databaseSpecificConfig": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "DatabaseSpecificConfig this are the configuration specific to each database type",
          "type": "object",
          "x-kubernetes-map-type": "granular"
        },
        "disableEscaping": {
          "description": "DisableEscaping Determines whether special characters in the username and password fields will be escaped. Useful for alternate connection string formats like ADO. More information regarding this parameter can be found on the databases secrets engine docs. Defaults to false",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the obejct created in Vault. If this is specified it takes precedence over {metatada.name}",
          "pattern": "'[a-z0-9]([-a-z0-9]*[a-z0-9])?'",
          "type": "string"
        },
        "passwordPolicy": {
          "description": "PasswordPolicy The name of the password policy to use when generating passwords for this database. If not specified, this will use a default policy defined as: 20 characters with at least 1 uppercase, 1 lowercase, 1 number, and 1 dash character.",
          "type": "string"
        },
        "path": {
          "description": "Path at which to make the configuration. The final path in Vault will be {[spec.authentication.namespace]}/{spec.path}/config/{metadata.name}. The authentication role must have the following capabilities = [ \"create\", \"read\", \"update\", \"delete\"] on that path.",
          "pattern": "^(?:/?[\\w;:@&=\\$-\\.\\+]*)+/?",
          "type": "string"
        },
        "pluginName": {
          "description": "PluginName Specifies the name of the plugin to use for this connection.",
          "type": "string"
        },
        "pluginVersion": {
          "description": "PluginVersion Specifies the semantic version of the plugin to use for this connection.",
          "type": "string"
        },
        "rootCredentials": {
          "description": "RootCredentials specifies how to retrieve the credentials for this DatabaseEngine connection.",
          "properties": {
            "passwordKey": {
              "default": "password",
              "description": "PasswordKey key to be used when retrieving the password, required with VaultSecrets and Kubernetes secrets, ignored with RandomSecret",
              "type": "string"
            },
            "randomSecret": {
              "description": "RandomSecret retrieves the credentials from the Vault secret corresponding to this RandomSecret. This will map the \"username\" and \"password\" keys of the secret to the username and password of this config. All other keys will be ignored. If the RandomSecret is refreshed the operator retrieves the new secret from Vault and updates this configuration. Only one of RootCredentialsFromVaultSecret or RootCredentialsFromSecret or RootCredentialsFromRandomSecret can be specified. When using randomSecret a username must be specified in the spec.username password: Specifies the password to use when connecting with the username. This value will not be returned by Vault when performing a read upon the configuration. This is typically used in the connection_url field via the templating directive \"{{\"password\"}}\"\".",
              "properties": {
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                }
              },
              "type": "object",
              "x-kubernetes-map-type": "atomic",
              "additionalProperties": false
            },
            "secret": {
              "description": "Secret retrieves the credentials from a Kubernetes secret. The secret must be of basicauth type (https://kubernetes.io/docs/concepts/configuration/secret/#basic-authentication-secret). This will map the \"username\" and \"password\" keys of the secret to the username and password of this config. If the kubernetes secret is updated, this configuration will also be updated. All other keys will be ignored. Only one of RootCredentialsFromVaultSecret or RootCredentialsFromSecret or RootCredentialsFromRandomSecret can be specified. username: Specifies the name of the user to use as the \"root\" user when connecting to the database. This \"root\" user is used to create/update/delete users managed by these plugins, so you will need to ensure that this user has permissions to manipulate users appropriate to the database. This is typically used in the connection_url field via the templating directive \"{{\"username\"}}\" or \"{{\"name\"}}\". password: Specifies the password to use when connecting with the username. This value will not be returned by Vault when performing a read upon the configuration. This is typically used in the connection_url field via the templating directive \"{{\"password\"}}\". If username is provided as spec.username, it takes precedence over the username retrieved from the referenced secret",
              "properties": {
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                }
              },
              "type": "object",
              "x-kubernetes-map-type": "atomic",
              "additionalProperties": false
            },
            "usernameKey": {
              "default": "username",
              "description": "UsernameKey key to be used when retrieving the username, optional with VaultSecrets and Kubernetes secrets, ignored with RandomSecret",
              "type": "string"
            },
            "vaultSecret": {
              "description": "VaultSecret retrieves the credentials from a Vault secret. This will map the \"username\" and \"password\" keys of the secret to the username and password of this config. All other keys will be ignored. Only one of RootCredentialsFromVaultSecret or RootCredentialsFromSecret or RootCredentialsFromRandomSecret can be specified. username: Specifies the name of the user to use as the \"root\" user when connecting to the database. This \"root\" user is used to create/update/delete users managed by these plugins, so you will need to ensure that this user has permissions to manipulate users appropriate to the database. This is typically used in the connection_url field via the templating directive \"{{\"username\"}}\" or \"{{\"name\"}}\". password: Specifies the password to use when connecting with the username. This value will not be returned by Vault when performing a read upon the configuration. This is typically used in the connection_url field via the templating directive \"{{\"password\"}}\". If username is provided as spec.username, it takes precedence over the username retrieved from the referenced secret",
              "properties": {
                "path": {
                  "description": "Path is the path to the secret",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "rootPasswordRotation": {
          "properties": {
            "enable": {
              "description": "Enabled whether the toot password should be rotated with the rotation statement. If set to true the root password will be rotated immediately.",
              "type": "boolean"
            },
            "rotationPeriod": {
              "description": "RotationPeriod if this value is set, the root password will be rotated approximately with teh requested frequency.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "rootRotationStatements": {
          "description": "RootRotationStatements Specifies the database statements to be executed to rotate the root user's credentials. See the plugin's API page for more information on support and formatting for this parameter. kubebuilder:validation:UniqueItems=true",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "username": {
          "description": "Username Specifies the name of the user to use as the \"root\" user when connecting to the database. This \"root\" user is used to create/update/delete users managed by these plugins, so you will need to ensure that this user has permissions to manipulate users appropriate to the database. This is typically used in the connection_url field via the templating directive \"{{\"username\"}}\" or \"{{\"name\"}}\" If username is provided it takes precedence over the username retrieved from the referenced secrets",
          "type": "string"
        },
        "verifyConnection": {
          "description": "VerifyConnection Specifies if the connection is verified during initial configuration. Defaults to true.",
          "type": "boolean"
        }
      },
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "DatabaseSecretEngineConfigStatus defines the observed state of DatabaseSecretEngineConfig",
      "properties": {
        "conditions": {
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "lastRootPasswordRotation": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
