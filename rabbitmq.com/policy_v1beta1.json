{
  "description": "Policy is the Schema for the policies API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "PolicySpec defines the desired state of Policy\nhttps://www.rabbitmq.com/parameters.html#policies",
      "properties": {
        "applyTo": {
          "default": "all",
          "description": "What this policy applies to: 'queues', 'classic_queues', 'quorum_queues', 'streams', 'exchanges', or 'all'.\nDefault to 'all'.",
          "enum": [
            "queues",
            "classic_queues",
            "quorum_queues",
            "streams",
            "exchanges",
            "all"
          ],
          "type": "string"
        },
        "definition": {
          "description": "Policy definition. Required property.",
          "type": "object",
          "x-kubernetes-preserve-unknown-fields": true
        },
        "name": {
          "description": "Required property; cannot be updated",
          "type": "string"
        },
        "pattern": {
          "description": "Regular expression pattern used to match queues and exchanges, e.g. \"^amq.\".\nRequired property.",
          "type": "string"
        },
        "priority": {
          "default": 0,
          "description": "Default to '0'.\nIn the event that more than one policy can match a given exchange or queue, the policy with the greatest priority applies.",
          "type": "integer"
        },
        "rabbitmqClusterReference": {
          "description": "Reference to the RabbitmqCluster that the policy will be created in.\nRequired property.",
          "properties": {
            "connectionSecret": {
              "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
              "properties": {
                "name": {
                  "default": "",
                  "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                }
              },
              "type": "object",
              "x-kubernetes-map-type": "atomic",
              "additionalProperties": false
            },
            "name": {
              "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "vhost": {
          "default": "/",
          "description": "Default to vhost '/'; cannot be updated",
          "type": "string"
        }
      },
      "required": [
        "definition",
        "name",
        "pattern",
        "rabbitmqClusterReference"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "PolicyStatus defines the observed state of Policy",
      "properties": {
        "conditions": {
          "items": {
            "properties": {
              "lastTransitionTime": {
                "description": "The last time this Condition status changed.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "Full text reason for current status of the condition.",
                "type": "string"
              },
              "reason": {
                "description": "One word, camel-case reason for current status of the condition.",
                "type": "string"
              },
              "status": {
                "description": "True, False, or Unknown",
                "type": "string"
              },
              "type": {
                "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                "type": "string"
              }
            },
            "required": [
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent successful generation observed for this Policy. It corresponds to the\nPolicy's generation, which is updated on mutation by the API Server.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
