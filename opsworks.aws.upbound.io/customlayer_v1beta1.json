{
  "description": "CustomLayer is the Schema for the CustomLayers API. Provides an OpsWorks custom layer resource.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "CustomLayerSpec defines the desired state of CustomLayer",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "autoAssignElasticIps": {
              "description": "Whether to automatically assign an elastic IP address to the layer's instances.",
              "type": "boolean"
            },
            "autoAssignPublicIps": {
              "description": "For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.",
              "type": "boolean"
            },
            "autoHealing": {
              "description": "Whether to enable auto-healing for the layer.",
              "type": "boolean"
            },
            "cloudwatchConfiguration": {
              "description": "Will create an EBS volume and connect it to the layer's instances. See Cloudwatch Configuration.",
              "items": {
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  },
                  "logStreams": {
                    "description": "A block the specifies how an opsworks logs look like. See Log Streams.",
                    "items": {
                      "properties": {
                        "batchCount": {
                          "description": "Specifies the max number of log events in a batch, up to 10000. The default value is 1000.",
                          "type": "number"
                        },
                        "batchSize": {
                          "description": "Specifies the maximum size of log events in a batch, in bytes, up to 1048576 bytes. The default value is 32768 bytes.",
                          "type": "number"
                        },
                        "bufferDuration": {
                          "description": "Specifies the time duration for the batching of log events. The minimum value is 5000 and default value is 5000.",
                          "type": "number"
                        },
                        "datetimeFormat": {
                          "description": "Specifies how the timestamp is extracted from logs. For more information, see the CloudWatch Logs Agent Reference (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AgentReference.html).",
                          "type": "string"
                        },
                        "encoding": {
                          "description": "Specifies the encoding of the log file so that the file can be read correctly. The default is utf_8.",
                          "type": "string"
                        },
                        "file": {
                          "description": "Specifies log files that you want to push to CloudWatch Logs. File can point to a specific file or multiple files (by using wild card characters such as /var/log/system.log*).",
                          "type": "string"
                        },
                        "fileFingerprintLines": {
                          "description": "Specifies the range of lines for identifying a file. The valid values are one number, or two dash-delimited numbers, such as 1, 2-5. The default value is 1.",
                          "type": "string"
                        },
                        "initialPosition": {
                          "description": "Specifies where to start to read data (start_of_file or end_of_file). The default is start_of_file.",
                          "type": "string"
                        },
                        "logGroupName": {
                          "description": "Specifies the destination log group. A log group is created automatically if it doesn't already exist.",
                          "type": "string"
                        },
                        "multilineStartPattern": {
                          "description": "Specifies the pattern for identifying the start of a log message.",
                          "type": "string"
                        },
                        "timeZone": {
                          "description": "Specifies the time zone of log event time stamps.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "customConfigureRecipes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "customDeployRecipes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "customInstanceProfileArn": {
              "description": "The ARN of an IAM profile that will be used for the layer's instances.",
              "type": "string"
            },
            "customJson": {
              "description": "Custom JSON attributes to apply to the layer.",
              "type": "string"
            },
            "customSecurityGroupIdRefs": {
              "description": "References to SecurityGroup in ec2 to populate customSecurityGroupIds.",
              "items": {
                "description": "A Reference to a named object.",
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "properties": {
                      "resolution": {
                        "default": "Required",
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "enum": [
                          "Required",
                          "Optional"
                        ],
                        "type": "string"
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "customSecurityGroupIdSelector": {
              "description": "Selector for a list of SecurityGroup in ec2 to populate customSecurityGroupIds.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "customSecurityGroupIds": {
              "description": "Ids for a set of security groups to apply to the layer's instances.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "customSetupRecipes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "customShutdownRecipes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "customUndeployRecipes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "drainElbOnShutdown": {
              "description": "Whether to enable Elastic Load Balancing connection draining.",
              "type": "boolean"
            },
            "ebsVolume": {
              "description": "Will create an EBS volume and connect it to the layer's instances. See EBS Volume.",
              "items": {
                "properties": {
                  "encrypted": {
                    "description": "Encrypt the volume.",
                    "type": "boolean"
                  },
                  "iops": {
                    "description": "For PIOPS volumes, the IOPS per disk.",
                    "type": "number"
                  },
                  "mountPoint": {
                    "description": "The path to mount the EBS volume on the layer's instances.",
                    "type": "string"
                  },
                  "numberOfDisks": {
                    "description": "The number of disks to use for the EBS volume.",
                    "type": "number"
                  },
                  "raidLevel": {
                    "description": "The RAID level to use for the volume.",
                    "type": "string"
                  },
                  "size": {
                    "description": "The size of the volume in gigabytes.",
                    "type": "number"
                  },
                  "type": {
                    "description": "The type of volume to create. This may be standard (the default), io1 or gp2.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "elasticLoadBalancer": {
              "description": "Name of an Elastic Load Balancer to attach to this layer",
              "type": "string"
            },
            "installUpdatesOnBoot": {
              "description": "Whether to install OS and package updates on each instance when it boots.",
              "type": "boolean"
            },
            "instanceShutdownTimeout": {
              "description": "The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.",
              "type": "number"
            },
            "loadBasedAutoScaling": {
              "description": "Load-based auto scaling configuration. See Load Based AutoScaling",
              "items": {
                "properties": {
                  "downscaling": {
                    "description": "The downscaling settings, as defined below, used for load-based autoscaling",
                    "items": {
                      "properties": {
                        "alarms": {
                          "description": "Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "cpuThreshold": {
                          "description": "The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.",
                          "type": "number"
                        },
                        "ignoreMetricsTime": {
                          "description": "The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks Stacks should ignore metrics and suppress additional scaling events.",
                          "type": "number"
                        },
                        "instanceCount": {
                          "description": "The number of instances to add or remove when the load exceeds a threshold.",
                          "type": "number"
                        },
                        "loadThreshold": {
                          "description": "The load threshold. A value of -1 disables the threshold.",
                          "type": "number"
                        },
                        "memoryThreshold": {
                          "description": "The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.",
                          "type": "number"
                        },
                        "thresholdsWaitTime": {
                          "description": "The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "enable": {
                    "description": "Whether load-based auto scaling is enabled for the layer.",
                    "type": "boolean"
                  },
                  "upscaling": {
                    "description": "The upscaling settings, as defined below, used for load-based autoscaling",
                    "items": {
                      "properties": {
                        "alarms": {
                          "description": "Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "cpuThreshold": {
                          "description": "The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.",
                          "type": "number"
                        },
                        "ignoreMetricsTime": {
                          "description": "The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks Stacks should ignore metrics and suppress additional scaling events.",
                          "type": "number"
                        },
                        "instanceCount": {
                          "description": "The number of instances to add or remove when the load exceeds a threshold.",
                          "type": "number"
                        },
                        "loadThreshold": {
                          "description": "The load threshold. A value of -1 disables the threshold.",
                          "type": "number"
                        },
                        "memoryThreshold": {
                          "description": "The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.",
                          "type": "number"
                        },
                        "thresholdsWaitTime": {
                          "description": "The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "name": {
              "description": "A human-readable name for the layer.",
              "type": "string"
            },
            "shortName": {
              "description": "A short, machine-readable name for the layer, which will be used to identify it in the Chef node JSON.",
              "type": "string"
            },
            "stackId": {
              "description": "ID of the stack the layer will belong to.",
              "type": "string"
            },
            "stackIdRef": {
              "description": "Reference to a Stack in opsworks to populate stackId.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "stackIdSelector": {
              "description": "Selector for a Stack in opsworks to populate stackId.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "systemPackages": {
              "description": "Names of a set of system packages to install on the layer's instances.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "useEbsOptimizedInstances": {
              "description": "Whether to use EBS-optimized instances.",
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "properties": {
            "autoAssignElasticIps": {
              "description": "Whether to automatically assign an elastic IP address to the layer's instances.",
              "type": "boolean"
            },
            "autoAssignPublicIps": {
              "description": "For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.",
              "type": "boolean"
            },
            "autoHealing": {
              "description": "Whether to enable auto-healing for the layer.",
              "type": "boolean"
            },
            "cloudwatchConfiguration": {
              "description": "Will create an EBS volume and connect it to the layer's instances. See Cloudwatch Configuration.",
              "items": {
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  },
                  "logStreams": {
                    "description": "A block the specifies how an opsworks logs look like. See Log Streams.",
                    "items": {
                      "properties": {
                        "batchCount": {
                          "description": "Specifies the max number of log events in a batch, up to 10000. The default value is 1000.",
                          "type": "number"
                        },
                        "batchSize": {
                          "description": "Specifies the maximum size of log events in a batch, in bytes, up to 1048576 bytes. The default value is 32768 bytes.",
                          "type": "number"
                        },
                        "bufferDuration": {
                          "description": "Specifies the time duration for the batching of log events. The minimum value is 5000 and default value is 5000.",
                          "type": "number"
                        },
                        "datetimeFormat": {
                          "description": "Specifies how the timestamp is extracted from logs. For more information, see the CloudWatch Logs Agent Reference (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AgentReference.html).",
                          "type": "string"
                        },
                        "encoding": {
                          "description": "Specifies the encoding of the log file so that the file can be read correctly. The default is utf_8.",
                          "type": "string"
                        },
                        "file": {
                          "description": "Specifies log files that you want to push to CloudWatch Logs. File can point to a specific file or multiple files (by using wild card characters such as /var/log/system.log*).",
                          "type": "string"
                        },
                        "fileFingerprintLines": {
                          "description": "Specifies the range of lines for identifying a file. The valid values are one number, or two dash-delimited numbers, such as 1, 2-5. The default value is 1.",
                          "type": "string"
                        },
                        "initialPosition": {
                          "description": "Specifies where to start to read data (start_of_file or end_of_file). The default is start_of_file.",
                          "type": "string"
                        },
                        "logGroupName": {
                          "description": "Specifies the destination log group. A log group is created automatically if it doesn't already exist.",
                          "type": "string"
                        },
                        "multilineStartPattern": {
                          "description": "Specifies the pattern for identifying the start of a log message.",
                          "type": "string"
                        },
                        "timeZone": {
                          "description": "Specifies the time zone of log event time stamps.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "customConfigureRecipes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "customDeployRecipes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "customInstanceProfileArn": {
              "description": "The ARN of an IAM profile that will be used for the layer's instances.",
              "type": "string"
            },
            "customJson": {
              "description": "Custom JSON attributes to apply to the layer.",
              "type": "string"
            },
            "customSecurityGroupIdRefs": {
              "description": "References to SecurityGroup in ec2 to populate customSecurityGroupIds.",
              "items": {
                "description": "A Reference to a named object.",
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "properties": {
                      "resolution": {
                        "default": "Required",
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "enum": [
                          "Required",
                          "Optional"
                        ],
                        "type": "string"
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "customSecurityGroupIdSelector": {
              "description": "Selector for a list of SecurityGroup in ec2 to populate customSecurityGroupIds.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "customSecurityGroupIds": {
              "description": "Ids for a set of security groups to apply to the layer's instances.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "customSetupRecipes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "customShutdownRecipes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "customUndeployRecipes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "drainElbOnShutdown": {
              "description": "Whether to enable Elastic Load Balancing connection draining.",
              "type": "boolean"
            },
            "ebsVolume": {
              "description": "Will create an EBS volume and connect it to the layer's instances. See EBS Volume.",
              "items": {
                "properties": {
                  "encrypted": {
                    "description": "Encrypt the volume.",
                    "type": "boolean"
                  },
                  "iops": {
                    "description": "For PIOPS volumes, the IOPS per disk.",
                    "type": "number"
                  },
                  "mountPoint": {
                    "description": "The path to mount the EBS volume on the layer's instances.",
                    "type": "string"
                  },
                  "numberOfDisks": {
                    "description": "The number of disks to use for the EBS volume.",
                    "type": "number"
                  },
                  "raidLevel": {
                    "description": "The RAID level to use for the volume.",
                    "type": "string"
                  },
                  "size": {
                    "description": "The size of the volume in gigabytes.",
                    "type": "number"
                  },
                  "type": {
                    "description": "The type of volume to create. This may be standard (the default), io1 or gp2.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "elasticLoadBalancer": {
              "description": "Name of an Elastic Load Balancer to attach to this layer",
              "type": "string"
            },
            "installUpdatesOnBoot": {
              "description": "Whether to install OS and package updates on each instance when it boots.",
              "type": "boolean"
            },
            "instanceShutdownTimeout": {
              "description": "The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.",
              "type": "number"
            },
            "loadBasedAutoScaling": {
              "description": "Load-based auto scaling configuration. See Load Based AutoScaling",
              "items": {
                "properties": {
                  "downscaling": {
                    "description": "The downscaling settings, as defined below, used for load-based autoscaling",
                    "items": {
                      "properties": {
                        "alarms": {
                          "description": "Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "cpuThreshold": {
                          "description": "The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.",
                          "type": "number"
                        },
                        "ignoreMetricsTime": {
                          "description": "The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks Stacks should ignore metrics and suppress additional scaling events.",
                          "type": "number"
                        },
                        "instanceCount": {
                          "description": "The number of instances to add or remove when the load exceeds a threshold.",
                          "type": "number"
                        },
                        "loadThreshold": {
                          "description": "The load threshold. A value of -1 disables the threshold.",
                          "type": "number"
                        },
                        "memoryThreshold": {
                          "description": "The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.",
                          "type": "number"
                        },
                        "thresholdsWaitTime": {
                          "description": "The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "enable": {
                    "description": "Whether load-based auto scaling is enabled for the layer.",
                    "type": "boolean"
                  },
                  "upscaling": {
                    "description": "The upscaling settings, as defined below, used for load-based autoscaling",
                    "items": {
                      "properties": {
                        "alarms": {
                          "description": "Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "cpuThreshold": {
                          "description": "The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.",
                          "type": "number"
                        },
                        "ignoreMetricsTime": {
                          "description": "The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks Stacks should ignore metrics and suppress additional scaling events.",
                          "type": "number"
                        },
                        "instanceCount": {
                          "description": "The number of instances to add or remove when the load exceeds a threshold.",
                          "type": "number"
                        },
                        "loadThreshold": {
                          "description": "The load threshold. A value of -1 disables the threshold.",
                          "type": "number"
                        },
                        "memoryThreshold": {
                          "description": "The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.",
                          "type": "number"
                        },
                        "thresholdsWaitTime": {
                          "description": "The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "name": {
              "description": "A human-readable name for the layer.",
              "type": "string"
            },
            "shortName": {
              "description": "A short, machine-readable name for the layer, which will be used to identify it in the Chef node JSON.",
              "type": "string"
            },
            "stackId": {
              "description": "ID of the stack the layer will belong to.",
              "type": "string"
            },
            "stackIdRef": {
              "description": "Reference to a Stack in opsworks to populate stackId.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "stackIdSelector": {
              "description": "Selector for a Stack in opsworks to populate stackId.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "systemPackages": {
              "description": "Names of a set of system packages to install on the layer's instances.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "useEbsOptimizedInstances": {
              "description": "Whether to use EBS-optimized instances.",
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which\ncontains a name, metadata and a reference to secret store config to\nwhich any connection details for this managed resource should be written.\nConnection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used\nfor this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.annotations\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.labels\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret.\n- Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.\nThis field is planned to be replaced in a future release in favor of\nPublishConnectionDetailsTo. Currently, both could be set independently\nand connection details would be published to both without affecting\neach other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "spec.forProvider.name is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))"
        },
        {
          "message": "spec.forProvider.shortName is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.shortName) || (has(self.initProvider) && has(self.initProvider.shortName))"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "CustomLayerStatus defines the observed state of CustomLayer.",
      "properties": {
        "atProvider": {
          "properties": {
            "arn": {
              "description": "The Amazon Resource Name(ARN) of the layer.",
              "type": "string"
            },
            "autoAssignElasticIps": {
              "description": "Whether to automatically assign an elastic IP address to the layer's instances.",
              "type": "boolean"
            },
            "autoAssignPublicIps": {
              "description": "For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.",
              "type": "boolean"
            },
            "autoHealing": {
              "description": "Whether to enable auto-healing for the layer.",
              "type": "boolean"
            },
            "cloudwatchConfiguration": {
              "description": "Will create an EBS volume and connect it to the layer's instances. See Cloudwatch Configuration.",
              "items": {
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  },
                  "logStreams": {
                    "description": "A block the specifies how an opsworks logs look like. See Log Streams.",
                    "items": {
                      "properties": {
                        "batchCount": {
                          "description": "Specifies the max number of log events in a batch, up to 10000. The default value is 1000.",
                          "type": "number"
                        },
                        "batchSize": {
                          "description": "Specifies the maximum size of log events in a batch, in bytes, up to 1048576 bytes. The default value is 32768 bytes.",
                          "type": "number"
                        },
                        "bufferDuration": {
                          "description": "Specifies the time duration for the batching of log events. The minimum value is 5000 and default value is 5000.",
                          "type": "number"
                        },
                        "datetimeFormat": {
                          "description": "Specifies how the timestamp is extracted from logs. For more information, see the CloudWatch Logs Agent Reference (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AgentReference.html).",
                          "type": "string"
                        },
                        "encoding": {
                          "description": "Specifies the encoding of the log file so that the file can be read correctly. The default is utf_8.",
                          "type": "string"
                        },
                        "file": {
                          "description": "Specifies log files that you want to push to CloudWatch Logs. File can point to a specific file or multiple files (by using wild card characters such as /var/log/system.log*).",
                          "type": "string"
                        },
                        "fileFingerprintLines": {
                          "description": "Specifies the range of lines for identifying a file. The valid values are one number, or two dash-delimited numbers, such as 1, 2-5. The default value is 1.",
                          "type": "string"
                        },
                        "initialPosition": {
                          "description": "Specifies where to start to read data (start_of_file or end_of_file). The default is start_of_file.",
                          "type": "string"
                        },
                        "logGroupName": {
                          "description": "Specifies the destination log group. A log group is created automatically if it doesn't already exist.",
                          "type": "string"
                        },
                        "multilineStartPattern": {
                          "description": "Specifies the pattern for identifying the start of a log message.",
                          "type": "string"
                        },
                        "timeZone": {
                          "description": "Specifies the time zone of log event time stamps.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "customConfigureRecipes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "customDeployRecipes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "customInstanceProfileArn": {
              "description": "The ARN of an IAM profile that will be used for the layer's instances.",
              "type": "string"
            },
            "customJson": {
              "description": "Custom JSON attributes to apply to the layer.",
              "type": "string"
            },
            "customSecurityGroupIds": {
              "description": "Ids for a set of security groups to apply to the layer's instances.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "customSetupRecipes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "customShutdownRecipes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "customUndeployRecipes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "drainElbOnShutdown": {
              "description": "Whether to enable Elastic Load Balancing connection draining.",
              "type": "boolean"
            },
            "ebsVolume": {
              "description": "Will create an EBS volume and connect it to the layer's instances. See EBS Volume.",
              "items": {
                "properties": {
                  "encrypted": {
                    "description": "Encrypt the volume.",
                    "type": "boolean"
                  },
                  "iops": {
                    "description": "For PIOPS volumes, the IOPS per disk.",
                    "type": "number"
                  },
                  "mountPoint": {
                    "description": "The path to mount the EBS volume on the layer's instances.",
                    "type": "string"
                  },
                  "numberOfDisks": {
                    "description": "The number of disks to use for the EBS volume.",
                    "type": "number"
                  },
                  "raidLevel": {
                    "description": "The RAID level to use for the volume.",
                    "type": "string"
                  },
                  "size": {
                    "description": "The size of the volume in gigabytes.",
                    "type": "number"
                  },
                  "type": {
                    "description": "The type of volume to create. This may be standard (the default), io1 or gp2.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "elasticLoadBalancer": {
              "description": "Name of an Elastic Load Balancer to attach to this layer",
              "type": "string"
            },
            "id": {
              "description": "The id of the layer.",
              "type": "string"
            },
            "installUpdatesOnBoot": {
              "description": "Whether to install OS and package updates on each instance when it boots.",
              "type": "boolean"
            },
            "instanceShutdownTimeout": {
              "description": "The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.",
              "type": "number"
            },
            "loadBasedAutoScaling": {
              "description": "Load-based auto scaling configuration. See Load Based AutoScaling",
              "items": {
                "properties": {
                  "downscaling": {
                    "description": "The downscaling settings, as defined below, used for load-based autoscaling",
                    "items": {
                      "properties": {
                        "alarms": {
                          "description": "Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "cpuThreshold": {
                          "description": "The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.",
                          "type": "number"
                        },
                        "ignoreMetricsTime": {
                          "description": "The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks Stacks should ignore metrics and suppress additional scaling events.",
                          "type": "number"
                        },
                        "instanceCount": {
                          "description": "The number of instances to add or remove when the load exceeds a threshold.",
                          "type": "number"
                        },
                        "loadThreshold": {
                          "description": "The load threshold. A value of -1 disables the threshold.",
                          "type": "number"
                        },
                        "memoryThreshold": {
                          "description": "The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.",
                          "type": "number"
                        },
                        "thresholdsWaitTime": {
                          "description": "The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "enable": {
                    "description": "Whether load-based auto scaling is enabled for the layer.",
                    "type": "boolean"
                  },
                  "upscaling": {
                    "description": "The upscaling settings, as defined below, used for load-based autoscaling",
                    "items": {
                      "properties": {
                        "alarms": {
                          "description": "Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "cpuThreshold": {
                          "description": "The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.",
                          "type": "number"
                        },
                        "ignoreMetricsTime": {
                          "description": "The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks Stacks should ignore metrics and suppress additional scaling events.",
                          "type": "number"
                        },
                        "instanceCount": {
                          "description": "The number of instances to add or remove when the load exceeds a threshold.",
                          "type": "number"
                        },
                        "loadThreshold": {
                          "description": "The load threshold. A value of -1 disables the threshold.",
                          "type": "number"
                        },
                        "memoryThreshold": {
                          "description": "The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.",
                          "type": "number"
                        },
                        "thresholdsWaitTime": {
                          "description": "The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "name": {
              "description": "A human-readable name for the layer.",
              "type": "string"
            },
            "shortName": {
              "description": "A short, machine-readable name for the layer, which will be used to identify it in the Chef node JSON.",
              "type": "string"
            },
            "stackId": {
              "description": "ID of the stack the layer will belong to.",
              "type": "string"
            },
            "systemPackages": {
              "description": "Names of a set of system packages to install on the layer's instances.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "useEbsOptimizedInstances": {
              "description": "Whether to use EBS-optimized instances.",
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
