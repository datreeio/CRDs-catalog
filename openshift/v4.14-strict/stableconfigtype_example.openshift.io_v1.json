{
    "description": "StableConfigType is a stable config type that may include TechPreviewNoUpgrade fields. \n Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
    "properties": {
        "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
        },
        "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
        },
        "metadata": {
            "type": "object"
        },
        "spec": {
            "description": "spec is the specification of the desired behavior of the StableConfigType.",
            "properties": {
                "celUnion": {
                    "description": "celUnion demonstrates how to validate a discrminated union using CEL",
                    "properties": {
                        "optionalMember": {
                            "description": "optionalMember is a union member that is optional.",
                            "type": "string"
                        },
                        "requiredMember": {
                            "description": "requiredMember is a union member that is required.",
                            "type": "string"
                        },
                        "type": {
                            "description": "type determines which of the union members should be populated.",
                            "enum": [
                                "RequiredMember",
                                "OptionalMember",
                                "EmptyMember"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object",
                    "x-kubernetes-validations": [
                        {
                            "message": "requiredMember is required when type is RequiredMember, and forbidden otherwise",
                            "rule": "has(self.type) && self.type == 'RequiredMember' ?  has(self.requiredMember) : !has(self.requiredMember)"
                        },
                        {
                            "message": "optionalMember is forbidden when type is not OptionalMember",
                            "rule": "has(self.type) && self.type == 'OptionalMember' ?  true : !has(self.optionalMember)"
                        }
                    ],
                    "additionalProperties": false
                },
                "evolvingUnion": {
                    "description": "evolvingUnion demonstrates how to phase in new values into discriminated union",
                    "properties": {
                        "type": {
                            "description": "type is the discriminator. It has different values for Default and for TechPreviewNoUpgrade",
                            "type": "string"
                        }
                    },
                    "type": "object",
                    "additionalProperties": false
                },
                "immutableField": {
                    "description": "immutableField is a field that is immutable once the object has been created. It is required at all times.",
                    "type": "string",
                    "x-kubernetes-validations": [
                        {
                            "message": "immutableField is immutable",
                            "rule": "self == oldSelf"
                        }
                    ]
                },
                "optionalImmutableField": {
                    "description": "optionalImmutableField is a field that is immutable once set. It is optional but may not be changed once set.",
                    "type": "string",
                    "x-kubernetes-validations": [
                        {
                            "message": "optionalImmutableField is immutable once set",
                            "rule": "oldSelf == '' || self == oldSelf"
                        }
                    ]
                },
                "stableField": {
                    "description": "stableField is a field that is present on default clusters and on tech preview clusters \n If empty, the platform will choose a good default, which may change over time without notice.",
                    "type": "string"
                }
            },
            "required": [
                "immutableField"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "status": {
            "description": "status is the most recently observed status of the StableConfigType.",
            "properties": {
                "conditions": {
                    "description": "Represents the observations of a foo's current state. Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"",
                    "items": {
                        "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                        "properties": {
                            "lastTransitionTime": {
                                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "message": {
                                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                                "type": "string"
                            },
                            "observedGeneration": {
                                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                                "format": "int64",
                                "type": "integer",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                            },
                            "reason": {
                                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                                "type": "string"
                            },
                            "status": {
                                "description": "status of the condition, one of True, False, Unknown.",
                                "type": "string"
                            },
                            "type": {
                                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                                "type": "string"
                            }
                        },
                        "required": [
                            "lastTransitionTime",
                            "message",
                            "reason",
                            "status",
                            "type"
                        ],
                        "type": "object",
                        "additionalProperties": false
                    },
                    "type": "array",
                    "x-kubernetes-list-map-keys": [
                        "type"
                    ],
                    "x-kubernetes-list-type": "map"
                },
                "immutableField": {
                    "description": "immutableField is a field that is immutable once the object has been created. It is required at all times.",
                    "type": "string",
                    "x-kubernetes-validations": [
                        {
                            "message": "immutableField is immutable",
                            "rule": "self == oldSelf"
                        }
                    ]
                }
            },
            "type": "object",
            "additionalProperties": false
        }
    },
    "type": "object",
    "additionalProperties": false,
    "$schema": "http://json-schema.org/draft-04/schema#"
}
