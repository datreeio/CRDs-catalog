{
  "description": "Datasource is the Schema for the Datasources API. Provides an AppSync Data Source.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "DatasourceSpec defines the desired state of Datasource",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "apiId": {
              "description": "API ID for the GraphQL API for the data source.",
              "type": "string"
            },
            "apiIdRef": {
              "description": "Reference to a GraphQLAPI in appsync to populate apiId.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "apiIdSelector": {
              "description": "Selector for a GraphQLAPI in appsync to populate apiId.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "description": {
              "description": "Description of the data source.",
              "type": "string"
            },
            "dynamodbConfig": {
              "description": "DynamoDB settings. See DynamoDB Config",
              "items": {
                "properties": {
                  "deltaSyncConfig": {
                    "description": "The DeltaSyncConfig for a versioned data source. See Delta Sync Config",
                    "items": {
                      "properties": {
                        "baseTableTtl": {
                          "description": "The number of minutes that an Item is stored in the data source.",
                          "type": "number"
                        },
                        "deltaSyncTableName": {
                          "description": "The table name.",
                          "type": "string"
                        },
                        "deltaSyncTableTtl": {
                          "description": "The number of minutes that a Delta Sync log entry is stored in the Delta Sync table.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "region": {
                    "description": "AWS region of the DynamoDB table. Defaults to current region.",
                    "type": "string"
                  },
                  "tableName": {
                    "description": "Name of the DynamoDB table.",
                    "type": "string"
                  },
                  "tableNameRef": {
                    "description": "Reference to a Table in dynamodb to populate tableName.",
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "tableNameSelector": {
                    "description": "Selector for a Table in dynamodb to populate tableName.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "useCallerCredentials": {
                    "description": "Set to true to use Amazon Cognito credentials with this data source.",
                    "type": "boolean"
                  },
                  "versioned": {
                    "description": "Detects Conflict Detection and Resolution with this data source.",
                    "type": "boolean"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "elasticsearchConfig": {
              "description": "Amazon Elasticsearch settings. See ElasticSearch Config",
              "items": {
                "properties": {
                  "endpoint": {
                    "description": "HTTP endpoint of the Elasticsearch domain.",
                    "type": "string"
                  },
                  "region": {
                    "description": "AWS region of the DynamoDB table. Defaults to current region.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "eventBridgeConfig": {
              "description": "AWS EventBridge settings. See Event Bridge Config",
              "items": {
                "properties": {
                  "eventBusArn": {
                    "description": "ARN for the EventBridge bus.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "httpConfig": {
              "description": "HTTP settings. See HTTP Config",
              "items": {
                "properties": {
                  "authorizationConfig": {
                    "description": "Authorization configuration in case the HTTP endpoint requires authorization. See Authorization Config.",
                    "items": {
                      "properties": {
                        "authorizationType": {
                          "description": "Authorization type that the HTTP endpoint requires. Default values is AWS_IAM.",
                          "type": "string"
                        },
                        "awsIamConfig": {
                          "description": "Identity and Access Management (IAM) settings. See AWS IAM Config.",
                          "items": {
                            "properties": {
                              "signingRegion": {
                                "description": "Signing Amazon Web Services Region for IAM authorization.",
                                "type": "string"
                              },
                              "signingServiceName": {
                                "description": "Signing service name for IAM authorization.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "endpoint": {
                    "description": "HTTP endpoint of the Elasticsearch domain.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lambdaConfig": {
              "description": "AWS Lambda settings. See Lambda Config",
              "items": {
                "properties": {
                  "functionArn": {
                    "description": "ARN for the Lambda function.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "opensearchserviceConfig": {
              "description": "Amazon OpenSearch Service settings. See OpenSearch Service Config",
              "items": {
                "properties": {
                  "endpoint": {
                    "description": "HTTP endpoint of the Elasticsearch domain.",
                    "type": "string"
                  },
                  "region": {
                    "description": "AWS region of the DynamoDB table. Defaults to current region.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "region": {
              "description": "AWS region of the DynamoDB table. Defaults to current region. Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "relationalDatabaseConfig": {
              "description": "AWS RDS settings. See Relational Database Config",
              "items": {
                "properties": {
                  "httpEndpointConfig": {
                    "description": "Amazon RDS HTTP endpoint configuration. See HTTP Endpoint Config.",
                    "items": {
                      "properties": {
                        "awsSecretStoreArn": {
                          "description": "AWS secret store ARN for database credentials.",
                          "type": "string"
                        },
                        "databaseName": {
                          "description": "Logical database name.",
                          "type": "string"
                        },
                        "dbClusterIdentifier": {
                          "description": "Amazon RDS cluster identifier.",
                          "type": "string"
                        },
                        "region": {
                          "description": "AWS region of the DynamoDB table. Defaults to current region.",
                          "type": "string"
                        },
                        "schema": {
                          "description": "Logical schema name.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "sourceType": {
                    "description": "Source type for the relational database. Valid values: RDS_HTTP_ENDPOINT.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "serviceRoleArn": {
              "description": "IAM service role ARN for the data source. Required if type is specified as AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, AMAZON_EVENTBRIDGE, or AMAZON_OPENSEARCH_SERVICE.",
              "type": "string"
            },
            "serviceRoleArnRef": {
              "description": "Reference to a Role in iam to populate serviceRoleArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "serviceRoleArnSelector": {
              "description": "Selector for a Role in iam to populate serviceRoleArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "type": {
              "description": "Type of the Data Source. Valid values: AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, HTTP, NONE, RELATIONAL_DATABASE, AMAZON_EVENTBRIDGE, AMAZON_OPENSEARCH_SERVICE.",
              "type": "string"
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "properties": {
            "description": {
              "description": "Description of the data source.",
              "type": "string"
            },
            "dynamodbConfig": {
              "description": "DynamoDB settings. See DynamoDB Config",
              "items": {
                "properties": {
                  "deltaSyncConfig": {
                    "description": "The DeltaSyncConfig for a versioned data source. See Delta Sync Config",
                    "items": {
                      "properties": {
                        "baseTableTtl": {
                          "description": "The number of minutes that an Item is stored in the data source.",
                          "type": "number"
                        },
                        "deltaSyncTableName": {
                          "description": "The table name.",
                          "type": "string"
                        },
                        "deltaSyncTableTtl": {
                          "description": "The number of minutes that a Delta Sync log entry is stored in the Delta Sync table.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "tableName": {
                    "description": "Name of the DynamoDB table.",
                    "type": "string"
                  },
                  "tableNameRef": {
                    "description": "Reference to a Table in dynamodb to populate tableName.",
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "tableNameSelector": {
                    "description": "Selector for a Table in dynamodb to populate tableName.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "useCallerCredentials": {
                    "description": "Set to true to use Amazon Cognito credentials with this data source.",
                    "type": "boolean"
                  },
                  "versioned": {
                    "description": "Detects Conflict Detection and Resolution with this data source.",
                    "type": "boolean"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "elasticsearchConfig": {
              "description": "Amazon Elasticsearch settings. See ElasticSearch Config",
              "items": {
                "properties": {
                  "endpoint": {
                    "description": "HTTP endpoint of the Elasticsearch domain.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "eventBridgeConfig": {
              "description": "AWS EventBridge settings. See Event Bridge Config",
              "items": {
                "properties": {
                  "eventBusArn": {
                    "description": "ARN for the EventBridge bus.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "httpConfig": {
              "description": "HTTP settings. See HTTP Config",
              "items": {
                "properties": {
                  "authorizationConfig": {
                    "description": "Authorization configuration in case the HTTP endpoint requires authorization. See Authorization Config.",
                    "items": {
                      "properties": {
                        "authorizationType": {
                          "description": "Authorization type that the HTTP endpoint requires. Default values is AWS_IAM.",
                          "type": "string"
                        },
                        "awsIamConfig": {
                          "description": "Identity and Access Management (IAM) settings. See AWS IAM Config.",
                          "items": {
                            "properties": {
                              "signingRegion": {
                                "description": "Signing Amazon Web Services Region for IAM authorization.",
                                "type": "string"
                              },
                              "signingServiceName": {
                                "description": "Signing service name for IAM authorization.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "endpoint": {
                    "description": "HTTP endpoint of the Elasticsearch domain.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "lambdaConfig": {
              "description": "AWS Lambda settings. See Lambda Config",
              "items": {
                "properties": {
                  "functionArn": {
                    "description": "ARN for the Lambda function.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "opensearchserviceConfig": {
              "description": "Amazon OpenSearch Service settings. See OpenSearch Service Config",
              "items": {
                "properties": {
                  "endpoint": {
                    "description": "HTTP endpoint of the Elasticsearch domain.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "relationalDatabaseConfig": {
              "description": "AWS RDS settings. See Relational Database Config",
              "items": {
                "properties": {
                  "httpEndpointConfig": {
                    "description": "Amazon RDS HTTP endpoint configuration. See HTTP Endpoint Config.",
                    "items": {
                      "properties": {
                        "awsSecretStoreArn": {
                          "description": "AWS secret store ARN for database credentials.",
                          "type": "string"
                        },
                        "databaseName": {
                          "description": "Logical database name.",
                          "type": "string"
                        },
                        "dbClusterIdentifier": {
                          "description": "Amazon RDS cluster identifier.",
                          "type": "string"
                        },
                        "schema": {
                          "description": "Logical schema name.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "sourceType": {
                    "description": "Source type for the relational database. Valid values: RDS_HTTP_ENDPOINT.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "serviceRoleArn": {
              "description": "IAM service role ARN for the data source. Required if type is specified as AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, AMAZON_EVENTBRIDGE, or AMAZON_OPENSEARCH_SERVICE.",
              "type": "string"
            },
            "serviceRoleArnRef": {
              "description": "Reference to a Role in iam to populate serviceRoleArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "serviceRoleArnSelector": {
              "description": "Selector for a Role in iam to populate serviceRoleArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "type": {
              "description": "Type of the Data Source. Valid values: AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, HTTP, NONE, RELATIONAL_DATABASE, AMAZON_EVENTBRIDGE, AMAZON_OPENSEARCH_SERVICE.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "spec.forProvider.type is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "DatasourceStatus defines the observed state of Datasource.",
      "properties": {
        "atProvider": {
          "properties": {
            "apiId": {
              "description": "API ID for the GraphQL API for the data source.",
              "type": "string"
            },
            "arn": {
              "description": "ARN",
              "type": "string"
            },
            "description": {
              "description": "Description of the data source.",
              "type": "string"
            },
            "dynamodbConfig": {
              "description": "DynamoDB settings. See DynamoDB Config",
              "items": {
                "properties": {
                  "deltaSyncConfig": {
                    "description": "The DeltaSyncConfig for a versioned data source. See Delta Sync Config",
                    "items": {
                      "properties": {
                        "baseTableTtl": {
                          "description": "The number of minutes that an Item is stored in the data source.",
                          "type": "number"
                        },
                        "deltaSyncTableName": {
                          "description": "The table name.",
                          "type": "string"
                        },
                        "deltaSyncTableTtl": {
                          "description": "The number of minutes that a Delta Sync log entry is stored in the Delta Sync table.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "region": {
                    "description": "AWS region of the DynamoDB table. Defaults to current region.",
                    "type": "string"
                  },
                  "tableName": {
                    "description": "Name of the DynamoDB table.",
                    "type": "string"
                  },
                  "useCallerCredentials": {
                    "description": "Set to true to use Amazon Cognito credentials with this data source.",
                    "type": "boolean"
                  },
                  "versioned": {
                    "description": "Detects Conflict Detection and Resolution with this data source.",
                    "type": "boolean"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "elasticsearchConfig": {
              "description": "Amazon Elasticsearch settings. See ElasticSearch Config",
              "items": {
                "properties": {
                  "endpoint": {
                    "description": "HTTP endpoint of the Elasticsearch domain.",
                    "type": "string"
                  },
                  "region": {
                    "description": "AWS region of the DynamoDB table. Defaults to current region.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "eventBridgeConfig": {
              "description": "AWS EventBridge settings. See Event Bridge Config",
              "items": {
                "properties": {
                  "eventBusArn": {
                    "description": "ARN for the EventBridge bus.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "httpConfig": {
              "description": "HTTP settings. See HTTP Config",
              "items": {
                "properties": {
                  "authorizationConfig": {
                    "description": "Authorization configuration in case the HTTP endpoint requires authorization. See Authorization Config.",
                    "items": {
                      "properties": {
                        "authorizationType": {
                          "description": "Authorization type that the HTTP endpoint requires. Default values is AWS_IAM.",
                          "type": "string"
                        },
                        "awsIamConfig": {
                          "description": "Identity and Access Management (IAM) settings. See AWS IAM Config.",
                          "items": {
                            "properties": {
                              "signingRegion": {
                                "description": "Signing Amazon Web Services Region for IAM authorization.",
                                "type": "string"
                              },
                              "signingServiceName": {
                                "description": "Signing service name for IAM authorization.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "endpoint": {
                    "description": "HTTP endpoint of the Elasticsearch domain.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "id": {
              "type": "string"
            },
            "lambdaConfig": {
              "description": "AWS Lambda settings. See Lambda Config",
              "items": {
                "properties": {
                  "functionArn": {
                    "description": "ARN for the Lambda function.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "opensearchserviceConfig": {
              "description": "Amazon OpenSearch Service settings. See OpenSearch Service Config",
              "items": {
                "properties": {
                  "endpoint": {
                    "description": "HTTP endpoint of the Elasticsearch domain.",
                    "type": "string"
                  },
                  "region": {
                    "description": "AWS region of the DynamoDB table. Defaults to current region.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "relationalDatabaseConfig": {
              "description": "AWS RDS settings. See Relational Database Config",
              "items": {
                "properties": {
                  "httpEndpointConfig": {
                    "description": "Amazon RDS HTTP endpoint configuration. See HTTP Endpoint Config.",
                    "items": {
                      "properties": {
                        "awsSecretStoreArn": {
                          "description": "AWS secret store ARN for database credentials.",
                          "type": "string"
                        },
                        "databaseName": {
                          "description": "Logical database name.",
                          "type": "string"
                        },
                        "dbClusterIdentifier": {
                          "description": "Amazon RDS cluster identifier.",
                          "type": "string"
                        },
                        "region": {
                          "description": "AWS region of the DynamoDB table. Defaults to current region.",
                          "type": "string"
                        },
                        "schema": {
                          "description": "Logical schema name.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "sourceType": {
                    "description": "Source type for the relational database. Valid values: RDS_HTTP_ENDPOINT.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "serviceRoleArn": {
              "description": "IAM service role ARN for the data source. Required if type is specified as AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, AMAZON_EVENTBRIDGE, or AMAZON_OPENSEARCH_SERVICE.",
              "type": "string"
            },
            "type": {
              "description": "Type of the Data Source. Valid values: AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, HTTP, NONE, RELATIONAL_DATABASE, AMAZON_EVENTBRIDGE, AMAZON_OPENSEARCH_SERVICE.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                "type": "string"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
