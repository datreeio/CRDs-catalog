{
  "description": "OCIManagedControlPlane is the Schema for the ocimanagedcontrolplane API.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "OCIManagedControlPlaneSpec defines the desired state of OCIManagedControlPlane. The properties are generated from https://docs.oracle.com/en-us/iaas/api/#/en/containerengine/20180222/datatypes/CreateClusterDetails",
      "properties": {
        "clusterOptions": {
          "description": "ClusterOptions defines Optional attributes for the cluster.",
          "properties": {
            "addOnOptions": {
              "description": "AddOnOptions defines the properties that define options for supported add-ons.",
              "properties": {
                "isKubernetesDashboardEnabled": {
                  "description": "IsKubernetesDashboardEnabled defines whether or not to enable the Kubernetes Dashboard add-on.",
                  "type": "boolean"
                },
                "isTillerEnabled": {
                  "description": "IsKubernetesDashboardEnabled defines whether or not to enable the Tiller add-on.",
                  "type": "boolean"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "admissionControllerOptions": {
              "description": "AdmissionControllerOptions defines the properties that define supported admission controllers.",
              "properties": {
                "isPodSecurityPolicyEnabled": {
                  "description": "IsPodSecurityPolicyEnabled defines whether or not to enable the Pod Security Policy admission controller.",
                  "type": "boolean"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "clusterPodNetworkOptions": {
          "description": "ClusterPodNetworkOptions defines the available CNIs and network options for existing and new node pools of the cluster",
          "items": {
            "description": "ClusterPodNetworkOptions defines the available CNIs and network options for existing and new node pools of the cluster",
            "properties": {
              "cniType": {
                "description": "The CNI to be used are OCI_VCN_IP_NATIVE and FLANNEL_OVERLAY",
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "controlPlaneEndpoint": {
          "description": "ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.",
          "properties": {
            "host": {
              "description": "The hostname on which the API server is serving.",
              "type": "string"
            },
            "port": {
              "description": "The port on which the API server is serving.",
              "format": "int32",
              "type": "integer"
            }
          },
          "required": [
            "host",
            "port"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "id": {
          "description": "ID of the OKEcluster.",
          "type": "string"
        },
        "imagePolicyConfig": {
          "description": "ImagePolicyConfig defines the properties that define a image verification policy.",
          "properties": {
            "isPolicyEnabled": {
              "description": "IsPolicyEnabled defines Whether the image verification policy is enabled.",
              "type": "boolean"
            },
            "keyDetails": {
              "description": "KeyDetails defines a list of KMS key details.",
              "items": {
                "description": "KeyDetails defines the properties that define the kms keys used by OKE for Image Signature verification.",
                "properties": {
                  "keyDetails": {
                    "description": "KmsKeyId defines the OCID of the KMS key that will be used to verify whether the images are signed by an approved source.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "kmsKeyId": {
          "description": "KmsKeyId defines the OCID of the KMS key to be used as the master encryption key for Kubernetes secret encryption. When used,",
          "type": "string"
        },
        "version": {
          "description": "Version represents the version of the Kubernetes Cluster Control Plane.",
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "OCIManagedControlPlaneStatus defines the observed state of OCIManagedControlPlane",
      "properties": {
        "conditions": {
          "description": "NetworkSpec encapsulates all things related to OCI network.",
          "items": {
            "description": "Condition defines an observation of a Cluster API resource operational state.",
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A human readable message indicating details about the transition. This field may be empty.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.",
                "type": "string"
              },
              "severity": {
                "description": "Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "initialized": {
          "description": "Initialized denotes whether or not the control plane has the uploaded kubernetes config-map.",
          "type": "boolean"
        },
        "ready": {
          "type": "boolean"
        },
        "version": {
          "description": "Version represents the current Kubernetes version for the control plane.",
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
