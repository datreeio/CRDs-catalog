{
  "description": "Cluster is the Schema for the Clusters API. Provides a Redshift Cluster resource.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ClusterSpec defines the desired state of Cluster",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "allowVersionUpgrade": {
              "description": "If true , major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. Default is true.",
              "type": "boolean"
            },
            "applyImmediately": {
              "description": "Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is false.",
              "type": "boolean"
            },
            "aquaConfigurationStatus": {
              "description": "The value represents how the cluster is configured to use AQUA (Advanced Query Accelerator) after the cluster is restored.\nNo longer supported by the AWS API.\nAlways returns auto.",
              "type": "string"
            },
            "automatedSnapshotRetentionPeriod": {
              "description": "The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with create-cluster-snapshot. Default is 1.",
              "type": "number"
            },
            "availabilityZone": {
              "description": "The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency. Can only be changed if availability_zone_relocation_enabled is true.",
              "type": "string"
            },
            "availabilityZoneRelocationEnabled": {
              "description": "If true, the cluster can be relocated to another availabity zone, either automatically by AWS or when requested. Default is false. Available for use on clusters from the RA3 instance family.",
              "type": "boolean"
            },
            "clusterParameterGroupName": {
              "description": "The name of the parameter group to be associated with this cluster.",
              "type": "string"
            },
            "clusterPublicKey": {
              "description": "The public key for the cluster",
              "type": "string"
            },
            "clusterRevisionNumber": {
              "description": "The specific revision number of the database in the cluster",
              "type": "string"
            },
            "clusterSubnetGroupName": {
              "description": "The name of a cluster subnet group to be associated with this cluster. If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).",
              "type": "string"
            },
            "clusterType": {
              "description": "The cluster type to use. Either single-node or multi-node.",
              "type": "string"
            },
            "clusterVersion": {
              "description": "The version of the Amazon Redshift engine software that you want to deploy on the cluster.\nThe version selected runs on all the nodes in the cluster.",
              "type": "string"
            },
            "databaseName": {
              "description": "The name of the first database to be created when the cluster is created.\nIf you do not provide a name, Amazon Redshift will create a default database called dev.",
              "type": "string"
            },
            "defaultIamRoleArn": {
              "description": "The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was created.",
              "type": "string"
            },
            "defaultIamRoleArnRef": {
              "description": "Reference to a Role in iam to populate defaultIamRoleArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "defaultIamRoleArnSelector": {
              "description": "Selector for a Role in iam to populate defaultIamRoleArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "elasticIp": {
              "description": "The Elastic IP (EIP) address for the cluster.",
              "type": "string"
            },
            "encrypted": {
              "description": "If true , the data in the cluster is encrypted at rest.",
              "type": "boolean"
            },
            "endpoint": {
              "description": "The connection endpoint",
              "type": "string"
            },
            "enhancedVpcRouting": {
              "description": "If true , enhanced VPC routing is enabled.",
              "type": "boolean"
            },
            "finalSnapshotIdentifier": {
              "description": "The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, skip_final_snapshot must be false.",
              "type": "string"
            },
            "iamRoleRefs": {
              "description": "References to Role in iam to populate iamRoles.",
              "items": {
                "description": "A Reference to a named object.",
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "properties": {
                      "resolution": {
                        "default": "Required",
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "enum": [
                          "Required",
                          "Optional"
                        ],
                        "type": "string"
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "iamRoleSelector": {
              "description": "Selector for a list of Role in iam to populate iamRoles.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "iamRoles": {
              "description": "A list of IAM Role ARNs to associate with the cluster. A Maximum of 10 can be associated to the cluster at any time.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "kmsKeyId": {
              "description": "The ARN for the KMS encryption key. When specifying kms_key_id, encrypted needs to be set to true.",
              "type": "string"
            },
            "kmsKeyIdRef": {
              "description": "Reference to a Key in kms to populate kmsKeyId.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "kmsKeyIdSelector": {
              "description": "Selector for a Key in kms to populate kmsKeyId.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "logging": {
              "description": "Logging, documented below.",
              "properties": {
                "bucketName": {
                  "description": "The name of an existing S3 bucket where the log files are to be stored. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions.\nFor more information on the permissions required for the bucket, please read the AWS documentation",
                  "type": "string"
                },
                "enable": {
                  "description": "Enables logging information such as queries and connection attempts, for the specified Amazon Redshift cluster.",
                  "type": "boolean"
                },
                "logDestinationType": {
                  "description": "The log destination type. An enum with possible values of s3 and cloudwatch.",
                  "type": "string"
                },
                "logExports": {
                  "description": "The collection of exported log types. Log types include the connection log, user log and user activity log. Required when log_destination_type is cloudwatch. Valid log types are connectionlog, userlog, and useractivitylog.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                },
                "s3KeyPrefix": {
                  "description": "The prefix applied to the log file names.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "maintenanceTrackName": {
              "description": "The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the MaintenanceTrack value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of  a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks. Default value is current.",
              "type": "string"
            },
            "manageMasterPassword": {
              "description": "Whether to use AWS SecretsManager to manage the cluster admin credentials.\nConflicts with master_password.\nOne of master_password or manage_master_password is required unless snapshot_identifier is provided.",
              "type": "boolean"
            },
            "manualSnapshotRetentionPeriod": {
              "description": "The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots. Valid values are between -1 and 3653. Default value is -1.",
              "type": "number"
            },
            "masterPasswordSecretKmsKeyId": {
              "description": "ID of the KMS key used to encrypt the cluster admin credentials secret.",
              "type": "string"
            },
            "masterPasswordSecretRef": {
              "description": "Password for the master DB user.\nConflicts with manage_master_password.\nOne of master_password or manage_master_password is required unless snapshot_identifier is provided.\nNote that this may show up in logs, and it will be stored in the state file.\nPassword must contain at least 8 characters and contain at least one uppercase letter, one lowercase letter, and one number.",
              "properties": {
                "key": {
                  "description": "The key to select.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the secret.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "name",
                "namespace"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "masterUsername": {
              "description": "Username for the master DB user.",
              "type": "string"
            },
            "multiAz": {
              "description": "Specifies if the Redshift cluster is multi-AZ.",
              "type": "boolean"
            },
            "nodeType": {
              "description": "The node type to be provisioned for the cluster.",
              "type": "string"
            },
            "numberOfNodes": {
              "description": "The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node. Default is 1.",
              "type": "number"
            },
            "ownerAccount": {
              "description": "The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.",
              "type": "string"
            },
            "port": {
              "description": "The port number on which the cluster accepts incoming connections. Valid values are between 1115 and 65535.\nThe cluster is accessible only via the JDBC and ODBC connection strings.\nPart of the connection string requires the port on which the cluster will listen for incoming connections.\nDefault port is 5439.",
              "type": "number"
            },
            "preferredMaintenanceWindow": {
              "description": "The weekly time range (in UTC) during which automated cluster maintenance can occur.\nFormat: ddd:hh24:mi-ddd:hh24:mi",
              "type": "string"
            },
            "publiclyAccessible": {
              "description": "If true, the cluster can be accessed from a public network. Default is true.",
              "type": "boolean"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "skipFinalSnapshot": {
              "description": "Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If true , a final cluster snapshot is not created. If false , a final cluster snapshot is created before the cluster is deleted. Default is false.",
              "type": "boolean"
            },
            "snapshotArn": {
              "description": "The ARN of the snapshot from which to create the new cluster. Conflicts with snapshot_identifier.",
              "type": "string"
            },
            "snapshotClusterIdentifier": {
              "description": "The name of the cluster the source snapshot was created from.",
              "type": "string"
            },
            "snapshotCopy": {
              "description": "Configuration of automatic copy of snapshots from one region to another. Documented below.",
              "properties": {
                "destinationRegion": {
                  "description": "The destination region that you want to copy snapshots to.",
                  "type": "string"
                },
                "grantName": {
                  "description": "The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.",
                  "type": "string"
                },
                "retentionPeriod": {
                  "description": "The number of days to retain automated snapshots in the destination region after they are copied from the source region. Defaults to 7.",
                  "type": "number"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "snapshotIdentifier": {
              "description": "The name of the snapshot from which to create the new cluster.  Conflicts with snapshot_arn.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "vpcSecurityGroupIdRefs": {
              "description": "References to SecurityGroup in ec2 to populate vpcSecurityGroupIds.",
              "items": {
                "description": "A Reference to a named object.",
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "properties": {
                      "resolution": {
                        "default": "Required",
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "enum": [
                          "Required",
                          "Optional"
                        ],
                        "type": "string"
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "vpcSecurityGroupIdSelector": {
              "description": "Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "vpcSecurityGroupIds": {
              "description": "A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "properties": {
            "allowVersionUpgrade": {
              "description": "If true , major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. Default is true.",
              "type": "boolean"
            },
            "applyImmediately": {
              "description": "Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is false.",
              "type": "boolean"
            },
            "aquaConfigurationStatus": {
              "description": "The value represents how the cluster is configured to use AQUA (Advanced Query Accelerator) after the cluster is restored.\nNo longer supported by the AWS API.\nAlways returns auto.",
              "type": "string"
            },
            "automatedSnapshotRetentionPeriod": {
              "description": "The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with create-cluster-snapshot. Default is 1.",
              "type": "number"
            },
            "availabilityZone": {
              "description": "The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency. Can only be changed if availability_zone_relocation_enabled is true.",
              "type": "string"
            },
            "availabilityZoneRelocationEnabled": {
              "description": "If true, the cluster can be relocated to another availabity zone, either automatically by AWS or when requested. Default is false. Available for use on clusters from the RA3 instance family.",
              "type": "boolean"
            },
            "clusterParameterGroupName": {
              "description": "The name of the parameter group to be associated with this cluster.",
              "type": "string"
            },
            "clusterPublicKey": {
              "description": "The public key for the cluster",
              "type": "string"
            },
            "clusterRevisionNumber": {
              "description": "The specific revision number of the database in the cluster",
              "type": "string"
            },
            "clusterSubnetGroupName": {
              "description": "The name of a cluster subnet group to be associated with this cluster. If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).",
              "type": "string"
            },
            "clusterType": {
              "description": "The cluster type to use. Either single-node or multi-node.",
              "type": "string"
            },
            "clusterVersion": {
              "description": "The version of the Amazon Redshift engine software that you want to deploy on the cluster.\nThe version selected runs on all the nodes in the cluster.",
              "type": "string"
            },
            "databaseName": {
              "description": "The name of the first database to be created when the cluster is created.\nIf you do not provide a name, Amazon Redshift will create a default database called dev.",
              "type": "string"
            },
            "defaultIamRoleArn": {
              "description": "The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was created.",
              "type": "string"
            },
            "defaultIamRoleArnRef": {
              "description": "Reference to a Role in iam to populate defaultIamRoleArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "defaultIamRoleArnSelector": {
              "description": "Selector for a Role in iam to populate defaultIamRoleArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "elasticIp": {
              "description": "The Elastic IP (EIP) address for the cluster.",
              "type": "string"
            },
            "encrypted": {
              "description": "If true , the data in the cluster is encrypted at rest.",
              "type": "boolean"
            },
            "endpoint": {
              "description": "The connection endpoint",
              "type": "string"
            },
            "enhancedVpcRouting": {
              "description": "If true , enhanced VPC routing is enabled.",
              "type": "boolean"
            },
            "finalSnapshotIdentifier": {
              "description": "The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, skip_final_snapshot must be false.",
              "type": "string"
            },
            "iamRoleRefs": {
              "description": "References to Role in iam to populate iamRoles.",
              "items": {
                "description": "A Reference to a named object.",
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "properties": {
                      "resolution": {
                        "default": "Required",
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "enum": [
                          "Required",
                          "Optional"
                        ],
                        "type": "string"
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "iamRoleSelector": {
              "description": "Selector for a list of Role in iam to populate iamRoles.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "iamRoles": {
              "description": "A list of IAM Role ARNs to associate with the cluster. A Maximum of 10 can be associated to the cluster at any time.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "kmsKeyId": {
              "description": "The ARN for the KMS encryption key. When specifying kms_key_id, encrypted needs to be set to true.",
              "type": "string"
            },
            "kmsKeyIdRef": {
              "description": "Reference to a Key in kms to populate kmsKeyId.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "kmsKeyIdSelector": {
              "description": "Selector for a Key in kms to populate kmsKeyId.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "logging": {
              "description": "Logging, documented below.",
              "properties": {
                "bucketName": {
                  "description": "The name of an existing S3 bucket where the log files are to be stored. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions.\nFor more information on the permissions required for the bucket, please read the AWS documentation",
                  "type": "string"
                },
                "enable": {
                  "description": "Enables logging information such as queries and connection attempts, for the specified Amazon Redshift cluster.",
                  "type": "boolean"
                },
                "logDestinationType": {
                  "description": "The log destination type. An enum with possible values of s3 and cloudwatch.",
                  "type": "string"
                },
                "logExports": {
                  "description": "The collection of exported log types. Log types include the connection log, user log and user activity log. Required when log_destination_type is cloudwatch. Valid log types are connectionlog, userlog, and useractivitylog.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                },
                "s3KeyPrefix": {
                  "description": "The prefix applied to the log file names.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "maintenanceTrackName": {
              "description": "The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the MaintenanceTrack value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of  a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks. Default value is current.",
              "type": "string"
            },
            "manageMasterPassword": {
              "description": "Whether to use AWS SecretsManager to manage the cluster admin credentials.\nConflicts with master_password.\nOne of master_password or manage_master_password is required unless snapshot_identifier is provided.",
              "type": "boolean"
            },
            "manualSnapshotRetentionPeriod": {
              "description": "The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots. Valid values are between -1 and 3653. Default value is -1.",
              "type": "number"
            },
            "masterPasswordSecretKmsKeyId": {
              "description": "ID of the KMS key used to encrypt the cluster admin credentials secret.",
              "type": "string"
            },
            "masterPasswordSecretRef": {
              "description": "Password for the master DB user.\nConflicts with manage_master_password.\nOne of master_password or manage_master_password is required unless snapshot_identifier is provided.\nNote that this may show up in logs, and it will be stored in the state file.\nPassword must contain at least 8 characters and contain at least one uppercase letter, one lowercase letter, and one number.",
              "properties": {
                "key": {
                  "description": "The key to select.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the secret.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "name",
                "namespace"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "masterUsername": {
              "description": "Username for the master DB user.",
              "type": "string"
            },
            "multiAz": {
              "description": "Specifies if the Redshift cluster is multi-AZ.",
              "type": "boolean"
            },
            "nodeType": {
              "description": "The node type to be provisioned for the cluster.",
              "type": "string"
            },
            "numberOfNodes": {
              "description": "The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node. Default is 1.",
              "type": "number"
            },
            "ownerAccount": {
              "description": "The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.",
              "type": "string"
            },
            "port": {
              "description": "The port number on which the cluster accepts incoming connections. Valid values are between 1115 and 65535.\nThe cluster is accessible only via the JDBC and ODBC connection strings.\nPart of the connection string requires the port on which the cluster will listen for incoming connections.\nDefault port is 5439.",
              "type": "number"
            },
            "preferredMaintenanceWindow": {
              "description": "The weekly time range (in UTC) during which automated cluster maintenance can occur.\nFormat: ddd:hh24:mi-ddd:hh24:mi",
              "type": "string"
            },
            "publiclyAccessible": {
              "description": "If true, the cluster can be accessed from a public network. Default is true.",
              "type": "boolean"
            },
            "skipFinalSnapshot": {
              "description": "Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If true , a final cluster snapshot is not created. If false , a final cluster snapshot is created before the cluster is deleted. Default is false.",
              "type": "boolean"
            },
            "snapshotArn": {
              "description": "The ARN of the snapshot from which to create the new cluster. Conflicts with snapshot_identifier.",
              "type": "string"
            },
            "snapshotClusterIdentifier": {
              "description": "The name of the cluster the source snapshot was created from.",
              "type": "string"
            },
            "snapshotCopy": {
              "description": "Configuration of automatic copy of snapshots from one region to another. Documented below.",
              "properties": {
                "destinationRegion": {
                  "description": "The destination region that you want to copy snapshots to.",
                  "type": "string"
                },
                "grantName": {
                  "description": "The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.",
                  "type": "string"
                },
                "retentionPeriod": {
                  "description": "The number of days to retain automated snapshots in the destination region after they are copied from the source region. Defaults to 7.",
                  "type": "number"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "snapshotIdentifier": {
              "description": "The name of the snapshot from which to create the new cluster.  Conflicts with snapshot_arn.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "vpcSecurityGroupIdRefs": {
              "description": "References to SecurityGroup in ec2 to populate vpcSecurityGroupIds.",
              "items": {
                "description": "A Reference to a named object.",
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "properties": {
                      "resolution": {
                        "default": "Required",
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "enum": [
                          "Required",
                          "Optional"
                        ],
                        "type": "string"
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "vpcSecurityGroupIdSelector": {
              "description": "Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "vpcSecurityGroupIds": {
              "description": "A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which\ncontains a name, metadata and a reference to secret store config to\nwhich any connection details for this managed resource should be written.\nConnection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used\nfor this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.annotations\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.labels\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret.\n- Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.\nThis field is planned to be replaced in a future release in favor of\nPublishConnectionDetailsTo. Currently, both could be set independently\nand connection details would be published to both without affecting\neach other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "spec.forProvider.nodeType is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeType) || (has(self.initProvider) && has(self.initProvider.nodeType))"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "ClusterStatus defines the observed state of Cluster.",
      "properties": {
        "atProvider": {
          "properties": {
            "allowVersionUpgrade": {
              "description": "If true , major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. Default is true.",
              "type": "boolean"
            },
            "applyImmediately": {
              "description": "Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is false.",
              "type": "boolean"
            },
            "aquaConfigurationStatus": {
              "description": "The value represents how the cluster is configured to use AQUA (Advanced Query Accelerator) after the cluster is restored.\nNo longer supported by the AWS API.\nAlways returns auto.",
              "type": "string"
            },
            "arn": {
              "description": "Amazon Resource Name (ARN) of cluster",
              "type": "string"
            },
            "automatedSnapshotRetentionPeriod": {
              "description": "The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with create-cluster-snapshot. Default is 1.",
              "type": "number"
            },
            "availabilityZone": {
              "description": "The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency. Can only be changed if availability_zone_relocation_enabled is true.",
              "type": "string"
            },
            "availabilityZoneRelocationEnabled": {
              "description": "If true, the cluster can be relocated to another availabity zone, either automatically by AWS or when requested. Default is false. Available for use on clusters from the RA3 instance family.",
              "type": "boolean"
            },
            "clusterNamespaceArn": {
              "description": "The namespace Amazon Resource Name (ARN) of the cluster",
              "type": "string"
            },
            "clusterNodes": {
              "description": "The nodes in the cluster. Cluster node blocks are documented below",
              "items": {
                "properties": {
                  "nodeRole": {
                    "description": "Whether the node is a leader node or a compute node",
                    "type": "string"
                  },
                  "privateIpAddress": {
                    "description": "The private IP address of a node within a cluster",
                    "type": "string"
                  },
                  "publicIpAddress": {
                    "description": "The public IP address of a node within a cluster",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "clusterParameterGroupName": {
              "description": "The name of the parameter group to be associated with this cluster.",
              "type": "string"
            },
            "clusterPublicKey": {
              "description": "The public key for the cluster",
              "type": "string"
            },
            "clusterRevisionNumber": {
              "description": "The specific revision number of the database in the cluster",
              "type": "string"
            },
            "clusterSubnetGroupName": {
              "description": "The name of a cluster subnet group to be associated with this cluster. If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).",
              "type": "string"
            },
            "clusterType": {
              "description": "The cluster type to use. Either single-node or multi-node.",
              "type": "string"
            },
            "clusterVersion": {
              "description": "The version of the Amazon Redshift engine software that you want to deploy on the cluster.\nThe version selected runs on all the nodes in the cluster.",
              "type": "string"
            },
            "databaseName": {
              "description": "The name of the first database to be created when the cluster is created.\nIf you do not provide a name, Amazon Redshift will create a default database called dev.",
              "type": "string"
            },
            "defaultIamRoleArn": {
              "description": "The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was created.",
              "type": "string"
            },
            "dnsName": {
              "description": "The DNS name of the cluster",
              "type": "string"
            },
            "elasticIp": {
              "description": "The Elastic IP (EIP) address for the cluster.",
              "type": "string"
            },
            "encrypted": {
              "description": "If true , the data in the cluster is encrypted at rest.",
              "type": "boolean"
            },
            "endpoint": {
              "description": "The connection endpoint",
              "type": "string"
            },
            "enhancedVpcRouting": {
              "description": "If true , enhanced VPC routing is enabled.",
              "type": "boolean"
            },
            "finalSnapshotIdentifier": {
              "description": "The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, skip_final_snapshot must be false.",
              "type": "string"
            },
            "iamRoles": {
              "description": "A list of IAM Role ARNs to associate with the cluster. A Maximum of 10 can be associated to the cluster at any time.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "id": {
              "description": "The Redshift Cluster ID.",
              "type": "string"
            },
            "kmsKeyId": {
              "description": "The ARN for the KMS encryption key. When specifying kms_key_id, encrypted needs to be set to true.",
              "type": "string"
            },
            "logging": {
              "description": "Logging, documented below.",
              "properties": {
                "bucketName": {
                  "description": "The name of an existing S3 bucket where the log files are to be stored. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions.\nFor more information on the permissions required for the bucket, please read the AWS documentation",
                  "type": "string"
                },
                "enable": {
                  "description": "Enables logging information such as queries and connection attempts, for the specified Amazon Redshift cluster.",
                  "type": "boolean"
                },
                "logDestinationType": {
                  "description": "The log destination type. An enum with possible values of s3 and cloudwatch.",
                  "type": "string"
                },
                "logExports": {
                  "description": "The collection of exported log types. Log types include the connection log, user log and user activity log. Required when log_destination_type is cloudwatch. Valid log types are connectionlog, userlog, and useractivitylog.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                },
                "s3KeyPrefix": {
                  "description": "The prefix applied to the log file names.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "maintenanceTrackName": {
              "description": "The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the MaintenanceTrack value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of  a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks. Default value is current.",
              "type": "string"
            },
            "manageMasterPassword": {
              "description": "Whether to use AWS SecretsManager to manage the cluster admin credentials.\nConflicts with master_password.\nOne of master_password or manage_master_password is required unless snapshot_identifier is provided.",
              "type": "boolean"
            },
            "manualSnapshotRetentionPeriod": {
              "description": "The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots. Valid values are between -1 and 3653. Default value is -1.",
              "type": "number"
            },
            "masterPasswordSecretArn": {
              "description": "ARN of the cluster admin credentials secret",
              "type": "string"
            },
            "masterPasswordSecretKmsKeyId": {
              "description": "ID of the KMS key used to encrypt the cluster admin credentials secret.",
              "type": "string"
            },
            "masterUsername": {
              "description": "Username for the master DB user.",
              "type": "string"
            },
            "multiAz": {
              "description": "Specifies if the Redshift cluster is multi-AZ.",
              "type": "boolean"
            },
            "nodeType": {
              "description": "The node type to be provisioned for the cluster.",
              "type": "string"
            },
            "numberOfNodes": {
              "description": "The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node. Default is 1.",
              "type": "number"
            },
            "ownerAccount": {
              "description": "The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.",
              "type": "string"
            },
            "port": {
              "description": "The port number on which the cluster accepts incoming connections. Valid values are between 1115 and 65535.\nThe cluster is accessible only via the JDBC and ODBC connection strings.\nPart of the connection string requires the port on which the cluster will listen for incoming connections.\nDefault port is 5439.",
              "type": "number"
            },
            "preferredMaintenanceWindow": {
              "description": "The weekly time range (in UTC) during which automated cluster maintenance can occur.\nFormat: ddd:hh24:mi-ddd:hh24:mi",
              "type": "string"
            },
            "publiclyAccessible": {
              "description": "If true, the cluster can be accessed from a public network. Default is true.",
              "type": "boolean"
            },
            "skipFinalSnapshot": {
              "description": "Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If true , a final cluster snapshot is not created. If false , a final cluster snapshot is created before the cluster is deleted. Default is false.",
              "type": "boolean"
            },
            "snapshotArn": {
              "description": "The ARN of the snapshot from which to create the new cluster. Conflicts with snapshot_identifier.",
              "type": "string"
            },
            "snapshotClusterIdentifier": {
              "description": "The name of the cluster the source snapshot was created from.",
              "type": "string"
            },
            "snapshotCopy": {
              "description": "Configuration of automatic copy of snapshots from one region to another. Documented below.",
              "properties": {
                "destinationRegion": {
                  "description": "The destination region that you want to copy snapshots to.",
                  "type": "string"
                },
                "grantName": {
                  "description": "The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.",
                  "type": "string"
                },
                "retentionPeriod": {
                  "description": "The number of days to retain automated snapshots in the destination region after they are copied from the source region. Defaults to 7.",
                  "type": "number"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "snapshotIdentifier": {
              "description": "The name of the snapshot from which to create the new cluster.  Conflicts with snapshot_arn.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "vpcSecurityGroupIds": {
              "description": "A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
