{
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "RemoteClusterConfigurationSpec contains the values of describing the cluster.",
      "properties": {
        "clusterAccessSecret": {
          "description": "Specifies a Secret to read for the RemoteClusterconfiguration. If defined all datastore configuration in this struct will be cleared and overwritten with the appropriate fields in the Secret.",
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "fieldPath": {
              "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type": "string"
            },
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": "string"
            },
            "resourceVersion": {
              "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "uid": {
              "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "datastoreType": {
          "description": "Indicates the datastore to use. If unspecified, defaults to etcdv3",
          "type": "string"
        },
        "etcdCACert": {
          "type": "string"
        },
        "etcdCACertFile": {
          "description": "Path to the etcd Certificate Authority file. Valid if DatastoreType is etcdv3.",
          "type": "string"
        },
        "etcdCert": {
          "type": "string"
        },
        "etcdCertFile": {
          "description": "Path to the etcd client certificate. Valid if DatastoreType is etcdv3.",
          "type": "string"
        },
        "etcdEndpoints": {
          "description": "A comma separated list of etcd endpoints. Valid if DatastoreType is etcdv3.  [Default: ]",
          "type": "string"
        },
        "etcdKey": {
          "description": "These config file parameters are to support inline certificates, keys and CA / Trusted certificate.",
          "type": "string"
        },
        "etcdKeyFile": {
          "description": "Path to the etcd key file. Valid if DatastoreType is etcdv3.",
          "type": "string"
        },
        "etcdPassword": {
          "description": "Password for the given user name. Valid if DatastoreType is etcdv3.",
          "type": "string"
        },
        "etcdUsername": {
          "description": "User name for RBAC. Valid if DatastoreType is etcdv3.",
          "type": "string"
        },
        "k8sAPIEndpoint": {
          "description": "Location of the Kubernetes API. Not required if using kubeconfig. Valid if DatastoreType is kubernetes.",
          "type": "string"
        },
        "k8sAPIToken": {
          "description": "Token to be used for accessing the Kubernetes API. Valid if DatastoreType is kubernetes.",
          "type": "string"
        },
        "k8sCAFile": {
          "description": "Location of a CA for accessing the Kubernetes API. Valid if DatastoreType is kubernetes.",
          "type": "string"
        },
        "k8sCertFile": {
          "description": "Location of a client certificate for accessing the Kubernetes API. Valid if DatastoreType is kubernetes.",
          "type": "string"
        },
        "k8sInsecureSkipTLSVerify": {
          "type": "boolean"
        },
        "k8sKeyFile": {
          "description": "Location of a client key for accessing the Kubernetes API. Valid if DatastoreType is kubernetes.",
          "type": "string"
        },
        "kubeconfig": {
          "description": "When using the Kubernetes datastore, the location of a kubeconfig file. Valid if DatastoreType is kubernetes.",
          "type": "string"
        },
        "kubeconfigInline": {
          "description": "This is an alternative to Kubeconfig and if specified overrides Kubeconfig. This contains the contents that would normally be in the file pointed at by Kubeconfig.",
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
