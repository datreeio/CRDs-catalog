{
  "description": "Service is the Schema for the Services API. Provides an ECS service.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ServiceSpec defines the desired state of Service",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "alarms": {
              "description": "Information about the CloudWatch alarms. See below.",
              "items": {
                "properties": {
                  "alarmNames": {
                    "description": "One or more CloudWatch alarm names.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  },
                  "enable": {
                    "description": "Determines whether to use the CloudWatch alarm option in the service deployment process.",
                    "type": "boolean"
                  },
                  "rollback": {
                    "description": "Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.",
                    "type": "boolean"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "availabilityZoneRebalancing": {
              "description": "ECS automatically redistributes tasks within a service across Availability Zones (AZs) to mitigate the risk of impaired application availability due to underlying infrastructure failures and task lifecycle activities. The valid values are ENABLED and DISABLED. Defaults to DISABLED.",
              "type": "string"
            },
            "capacityProviderStrategy": {
              "description": "Capacity provider strategies to use for the service. Can be one or more. These can be updated without destroying and recreating the service only if force_new_deployment = true and not changing from 0 capacity_provider_strategy blocks to greater than 0, or vice versa. See below. Conflicts with launch_type.",
              "items": {
                "properties": {
                  "base": {
                    "description": "Number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.",
                    "type": "number"
                  },
                  "capacityProvider": {
                    "description": "Short name of the capacity provider.",
                    "type": "string"
                  },
                  "weight": {
                    "description": "Relative percentage of the total number of launched tasks that should use the specified capacity provider.",
                    "type": "number"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "cluster": {
              "description": "Name of an ECS cluster.",
              "type": "string"
            },
            "clusterRef": {
              "description": "Reference to a Cluster in ecs to populate cluster.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "clusterSelector": {
              "description": "Selector for a Cluster in ecs to populate cluster.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "deploymentCircuitBreaker": {
              "description": "Configuration block for deployment circuit breaker. See below.",
              "items": {
                "properties": {
                  "enable": {
                    "description": "Whether to enable the deployment circuit breaker logic for the service.",
                    "type": "boolean"
                  },
                  "rollback": {
                    "description": "Whether to enable Amazon ECS to roll back the service if a service deployment fails. If rollback is enabled, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.",
                    "type": "boolean"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "deploymentController": {
              "description": "Configuration block for deployment controller configuration. See below.",
              "items": {
                "properties": {
                  "type": {
                    "description": "Type of deployment controller. Valid values: CODE_DEPLOY, ECS, EXTERNAL. Default: ECS.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "deploymentMaximumPercent": {
              "description": "Upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the DAEMON scheduling strategy.",
              "type": "number"
            },
            "deploymentMinimumHealthyPercent": {
              "description": "Lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.",
              "type": "number"
            },
            "desiredCount": {
              "description": "Number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the DAEMON scheduling strategy.",
              "type": "number"
            },
            "enableEcsManagedTags": {
              "description": "Specifies whether to enable Amazon ECS managed tags for the tasks within the service.",
              "type": "boolean"
            },
            "enableExecuteCommand": {
              "description": "Specifies whether to enable Amazon ECS Exec for the tasks within the service.",
              "type": "boolean"
            },
            "forceDelete": {
              "description": "Enable to delete a service even if it wasn't scaled down to zero tasks. It's only necessary to use this if the service uses the REPLICA scheduling strategy.",
              "type": "boolean"
            },
            "forceNewDeployment": {
              "description": "Enable to force a new task deployment of the service. This can be used to update tasks to use a newer Docker image with same image/tag combination (e.g., myimage:latest), roll Fargate tasks onto a newer platform version, or immediately deploy ordered_placement_strategy and placement_constraints updates.",
              "type": "boolean"
            },
            "healthCheckGracePeriodSeconds": {
              "description": "Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.",
              "type": "number"
            },
            "iamRole": {
              "description": "ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the awsvpc network mode. If using awsvpc network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.",
              "type": "string"
            },
            "iamRoleRef": {
              "description": "Reference to a Role in iam to populate iamRole.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "iamRoleSelector": {
              "description": "Selector for a Role in iam to populate iamRole.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "launchType": {
              "description": "Launch type on which to run your service. The valid values are EC2, FARGATE, and EXTERNAL. Defaults to EC2. Conflicts with capacity_provider_strategy.",
              "type": "string"
            },
            "loadBalancer": {
              "description": "Configuration block for load balancers. See below.",
              "items": {
                "properties": {
                  "containerName": {
                    "description": "Name of the container to associate with the load balancer (as it appears in a container definition).",
                    "type": "string"
                  },
                  "containerPort": {
                    "description": "Port on the container to associate with the load balancer.",
                    "type": "number"
                  },
                  "elbName": {
                    "description": "Name of the ELB (Classic) to associate with the service.",
                    "type": "string"
                  },
                  "targetGroupArn": {
                    "description": "ARN of the Load Balancer target group to associate with the service.",
                    "type": "string"
                  },
                  "targetGroupArnRef": {
                    "description": "Reference to a LBTargetGroup in elbv2 to populate targetGroupArn.",
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "targetGroupArnSelector": {
                    "description": "Selector for a LBTargetGroup in elbv2 to populate targetGroupArn.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "networkConfiguration": {
              "description": "Network configuration for the service. This parameter is required for task definitions that use the awsvpc network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. See below.",
              "items": {
                "properties": {
                  "assignPublicIp": {
                    "description": "Assign a public IP address to the ENI (Fargate launch type only). Valid values are true or false. Default false.",
                    "type": "boolean"
                  },
                  "securityGroupRefs": {
                    "description": "References to SecurityGroup in ec2 to populate securityGroups.",
                    "items": {
                      "description": "A Reference to a named object.",
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "securityGroupSelector": {
                    "description": "Selector for a list of SecurityGroup in ec2 to populate securityGroups.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "securityGroups": {
                    "description": "Security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  },
                  "subnetRefs": {
                    "description": "References to Subnet in ec2 to populate subnets.",
                    "items": {
                      "description": "A Reference to a named object.",
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "subnetSelector": {
                    "description": "Selector for a list of Subnet in ec2 to populate subnets.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "subnets": {
                    "description": "Subnets associated with the task or service.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "orderedPlacementStrategy": {
              "description": "Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. Updates to this configuration will take effect next task deployment unless force_new_deployment is enabled. The maximum number of ordered_placement_strategy blocks is 5. See below.",
              "items": {
                "properties": {
                  "field": {
                    "description": "For the spread placement strategy, valid values are instanceId (or host,\nwhich has the same effect), or any platform or custom attribute that is applied to a container instance.\nFor the binpack type, valid values are memory and cpu. For the random type, this attribute is not\nneeded. For more information, see Placement Strategy.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of placement strategy. Must be one of: binpack, random, or spread",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "placementConstraints": {
              "description": "Rules that are taken into consideration during task placement. Updates to this configuration will take effect next task deployment unless force_new_deployment is enabled. Maximum number of placement_constraints is 10. See below.",
              "items": {
                "properties": {
                  "expression": {
                    "description": "Cluster Query Language expression to apply to the constraint. Does not need to be specified for the distinctInstance type. For more information, see Cluster Query Language in the Amazon EC2 Container Service Developer Guide.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of constraint. The only valid values at this time are memberOf and distinctInstance.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "platformVersion": {
              "description": "Platform version on which to run your service. Only applicable for launch_type set to FARGATE. Defaults to LATEST. More information about Fargate platform versions can be found in the AWS ECS User Guide.",
              "type": "string"
            },
            "propagateTags": {
              "description": "Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are SERVICE and TASK_DEFINITION.",
              "type": "string"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "schedulingStrategy": {
              "description": "Scheduling strategy to use for the service. The valid values are REPLICA and DAEMON. Defaults to REPLICA. Note that Tasks using the Fargate launch type or the .",
              "type": "string"
            },
            "serviceConnectConfiguration": {
              "description": "The ECS Service Connect configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace. See below.",
              "items": {
                "properties": {
                  "enabled": {
                    "description": "Specifies whether to use Service Connect with this service.",
                    "type": "boolean"
                  },
                  "logConfiguration": {
                    "description": "The log configuration for the container. See below.",
                    "items": {
                      "properties": {
                        "logDriver": {
                          "description": "The log driver to use for the container.",
                          "type": "string"
                        },
                        "options": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "The configuration options to send to the log driver.",
                          "type": "object",
                          "x-kubernetes-map-type": "granular"
                        },
                        "secretOption": {
                          "description": "The secrets to pass to the log configuration. See below.",
                          "items": {
                            "properties": {
                              "name": {
                                "description": "The name of the secret.",
                                "type": "string"
                              },
                              "valueFrom": {
                                "description": "The secret to expose to the container. The supported values are either the full ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the SSM Parameter Store.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "namespace": {
                    "description": "The namespace name or ARN of the aws_service_discovery_http_namespace for use with Service Connect.",
                    "type": "string"
                  },
                  "service": {
                    "description": "The list of Service Connect service objects. See below.",
                    "items": {
                      "properties": {
                        "clientAlias": {
                          "description": "The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1. See below.",
                          "items": {
                            "properties": {
                              "dnsName": {
                                "description": "The name that you use in the applications of client tasks to connect to this service.",
                                "type": "string"
                              },
                              "port": {
                                "description": "The listening port number for the Service Connect proxy. This port is available inside of all of the tasks within the same namespace.",
                                "type": "number"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "discoveryName": {
                          "description": "The name of the new AWS Cloud Map service that Amazon ECS creates for this Amazon ECS service.",
                          "type": "string"
                        },
                        "ingressPortOverride": {
                          "description": "The port number for the Service Connect proxy to listen on.",
                          "type": "number"
                        },
                        "portName": {
                          "description": "The name of one of the portMappings from all the containers in the task definition of this Amazon ECS service.",
                          "type": "string"
                        },
                        "timeout": {
                          "description": "Configuration timeouts for Service Connect",
                          "items": {
                            "properties": {
                              "idleTimeoutSeconds": {
                                "description": "The amount of time in seconds a connection will stay active while idle. A value of 0 can be set to disable idleTimeout.",
                                "type": "number"
                              },
                              "perRequestTimeoutSeconds": {
                                "description": "The amount of time in seconds for the upstream to respond with a complete response per request. A value of 0 can be set to disable perRequestTimeout. Can only be set when appProtocol isn't TCP.",
                                "type": "number"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "tls": {
                          "description": "The configuration for enabling Transport Layer Security (TLS)",
                          "items": {
                            "properties": {
                              "issuerCertAuthority": {
                                "description": "The details of the certificate authority which will issue the certificate.",
                                "items": {
                                  "properties": {
                                    "awsPcaAuthorityArn": {
                                      "description": "The ARN of the aws_acmpca_certificate_authority used to create the TLS Certificates.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "kmsKey": {
                                "description": "The KMS key used to encrypt the private key in Secrets Manager.",
                                "type": "string"
                              },
                              "roleArn": {
                                "description": "The ARN of the IAM Role that's associated with the Service Connect TLS.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "serviceRegistries": {
              "description": "Service discovery registries for the service. The maximum number of service_registries blocks is 1. See below.",
              "items": {
                "properties": {
                  "containerName": {
                    "description": "Container name value, already specified in the task definition, to be used for your service discovery service.",
                    "type": "string"
                  },
                  "containerPort": {
                    "description": "Port value, already specified in the task definition, to be used for your service discovery service.",
                    "type": "number"
                  },
                  "port": {
                    "description": "Port value used if your Service Discovery service specified an SRV record.",
                    "type": "number"
                  },
                  "registryArn": {
                    "description": "ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(aws_service_discovery_service). For more information, see Service",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "taskDefinition": {
              "description": "Family and revision (family:revision) or full ARN of the task definition that you want to run in your service. Required unless using the EXTERNAL deployment controller. If a revision is not specified, the latest ACTIVE revision is used.",
              "type": "string"
            },
            "taskDefinitionRef": {
              "description": "Reference to a TaskDefinition in ecs to populate taskDefinition.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "taskDefinitionSelector": {
              "description": "Selector for a TaskDefinition in ecs to populate taskDefinition.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "triggers": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Map of arbitrary keys and values that, when changed, will trigger an in-place update (redeployment). Useful with plantimestamp(). See example above.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "volumeConfiguration": {
              "description": "Configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently, the only supported volume type is an Amazon EBS volume. See below.",
              "properties": {
                "managedEbsVolume": {
                  "description": "Configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. See below.",
                  "properties": {
                    "encrypted": {
                      "description": "Whether the volume should be encrypted. Default value is true.",
                      "type": "boolean"
                    },
                    "fileSystemType": {
                      "description": "Linux filesystem type for the volume. For volumes created from a snapshot, same filesystem type must be specified that the volume was using when the snapshot was created. Valid values are ext3, ext4, xfs. Default value is xfs.",
                      "type": "string"
                    },
                    "iops": {
                      "description": "Number of I/O operations per second (IOPS).",
                      "type": "number"
                    },
                    "kmsKeyId": {
                      "description": "Amazon Resource Name (ARN) identifier of the Amazon Web Services Key Management Service key to use for Amazon EBS encryption.",
                      "type": "string"
                    },
                    "roleArn": {
                      "description": "Amazon ECS infrastructure IAM role that is used to manage your Amazon Web Services infrastructure. Recommended using the Amazon ECS-managed AmazonECSInfrastructureRolePolicyForVolumes IAM policy with this role.",
                      "type": "string"
                    },
                    "sizeInGb": {
                      "description": "Size of the volume in GiB. You must specify either a size_in_gb or a snapshot_id. You can optionally specify a volume size greater than or equal to the snapshot size.",
                      "type": "number"
                    },
                    "snapshotId": {
                      "description": "Snapshot that Amazon ECS uses to create the volume. You must specify either a size_in_gb or a snapshot_id.",
                      "type": "string"
                    },
                    "tagSpecifications": {
                      "description": "The tags to apply to the volume. See below.",
                      "items": {
                        "properties": {
                          "propagateTags": {
                            "description": "Determines whether to propagate the tags from the task definition to the Amazon EBS volume.",
                            "type": "string"
                          },
                          "resourceType": {
                            "description": "The type of volume resource. Valid values, volume.",
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "The tags applied to this Amazon EBS volume. AmazonECSCreated and AmazonECSManaged are reserved tags that can't be used.",
                            "type": "object",
                            "x-kubernetes-map-type": "granular"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "throughput": {
                      "description": "Throughput to provision for a volume, in MiB/s, with a maximum of 1,000 MiB/s.",
                      "type": "string"
                    },
                    "volumeType": {
                      "description": "Volume type.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "name": {
                  "description": "Name of the volume.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "vpcLatticeConfigurations": {
              "description": "The VPC Lattice configuration for your service that allows Lattice to connect, secure, and monitor your service across multiple accounts and VPCs. See below.",
              "items": {
                "properties": {
                  "portName": {
                    "description": "The name of the port for a target group associated with the VPC Lattice configuration.",
                    "type": "string"
                  },
                  "roleArn": {
                    "description": "The ARN of the IAM role to associate with this volume. This is the Amazon ECS infrastructure IAM role that is used to manage your AWS infrastructure.",
                    "type": "string"
                  },
                  "targetGroupArn": {
                    "description": "The full ARN of the target group or groups associated with the VPC Lattice configuration.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "waitForSteadyState": {
              "description": "Default false.",
              "type": "boolean"
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "properties": {
            "alarms": {
              "description": "Information about the CloudWatch alarms. See below.",
              "items": {
                "properties": {
                  "alarmNames": {
                    "description": "One or more CloudWatch alarm names.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  },
                  "enable": {
                    "description": "Determines whether to use the CloudWatch alarm option in the service deployment process.",
                    "type": "boolean"
                  },
                  "rollback": {
                    "description": "Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.",
                    "type": "boolean"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "availabilityZoneRebalancing": {
              "description": "ECS automatically redistributes tasks within a service across Availability Zones (AZs) to mitigate the risk of impaired application availability due to underlying infrastructure failures and task lifecycle activities. The valid values are ENABLED and DISABLED. Defaults to DISABLED.",
              "type": "string"
            },
            "capacityProviderStrategy": {
              "description": "Capacity provider strategies to use for the service. Can be one or more. These can be updated without destroying and recreating the service only if force_new_deployment = true and not changing from 0 capacity_provider_strategy blocks to greater than 0, or vice versa. See below. Conflicts with launch_type.",
              "items": {
                "properties": {
                  "base": {
                    "description": "Number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.",
                    "type": "number"
                  },
                  "capacityProvider": {
                    "description": "Short name of the capacity provider.",
                    "type": "string"
                  },
                  "weight": {
                    "description": "Relative percentage of the total number of launched tasks that should use the specified capacity provider.",
                    "type": "number"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "cluster": {
              "description": "Name of an ECS cluster.",
              "type": "string"
            },
            "clusterRef": {
              "description": "Reference to a Cluster in ecs to populate cluster.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "clusterSelector": {
              "description": "Selector for a Cluster in ecs to populate cluster.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "deploymentCircuitBreaker": {
              "description": "Configuration block for deployment circuit breaker. See below.",
              "items": {
                "properties": {
                  "enable": {
                    "description": "Whether to enable the deployment circuit breaker logic for the service.",
                    "type": "boolean"
                  },
                  "rollback": {
                    "description": "Whether to enable Amazon ECS to roll back the service if a service deployment fails. If rollback is enabled, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.",
                    "type": "boolean"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "deploymentController": {
              "description": "Configuration block for deployment controller configuration. See below.",
              "items": {
                "properties": {
                  "type": {
                    "description": "Type of deployment controller. Valid values: CODE_DEPLOY, ECS, EXTERNAL. Default: ECS.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "deploymentMaximumPercent": {
              "description": "Upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the DAEMON scheduling strategy.",
              "type": "number"
            },
            "deploymentMinimumHealthyPercent": {
              "description": "Lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.",
              "type": "number"
            },
            "desiredCount": {
              "description": "Number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the DAEMON scheduling strategy.",
              "type": "number"
            },
            "enableEcsManagedTags": {
              "description": "Specifies whether to enable Amazon ECS managed tags for the tasks within the service.",
              "type": "boolean"
            },
            "enableExecuteCommand": {
              "description": "Specifies whether to enable Amazon ECS Exec for the tasks within the service.",
              "type": "boolean"
            },
            "forceDelete": {
              "description": "Enable to delete a service even if it wasn't scaled down to zero tasks. It's only necessary to use this if the service uses the REPLICA scheduling strategy.",
              "type": "boolean"
            },
            "forceNewDeployment": {
              "description": "Enable to force a new task deployment of the service. This can be used to update tasks to use a newer Docker image with same image/tag combination (e.g., myimage:latest), roll Fargate tasks onto a newer platform version, or immediately deploy ordered_placement_strategy and placement_constraints updates.",
              "type": "boolean"
            },
            "healthCheckGracePeriodSeconds": {
              "description": "Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.",
              "type": "number"
            },
            "iamRole": {
              "description": "ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the awsvpc network mode. If using awsvpc network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.",
              "type": "string"
            },
            "iamRoleRef": {
              "description": "Reference to a Role in iam to populate iamRole.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "iamRoleSelector": {
              "description": "Selector for a Role in iam to populate iamRole.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "launchType": {
              "description": "Launch type on which to run your service. The valid values are EC2, FARGATE, and EXTERNAL. Defaults to EC2. Conflicts with capacity_provider_strategy.",
              "type": "string"
            },
            "loadBalancer": {
              "description": "Configuration block for load balancers. See below.",
              "items": {
                "properties": {
                  "containerName": {
                    "description": "Name of the container to associate with the load balancer (as it appears in a container definition).",
                    "type": "string"
                  },
                  "containerPort": {
                    "description": "Port on the container to associate with the load balancer.",
                    "type": "number"
                  },
                  "elbName": {
                    "description": "Name of the ELB (Classic) to associate with the service.",
                    "type": "string"
                  },
                  "targetGroupArn": {
                    "description": "ARN of the Load Balancer target group to associate with the service.",
                    "type": "string"
                  },
                  "targetGroupArnRef": {
                    "description": "Reference to a LBTargetGroup in elbv2 to populate targetGroupArn.",
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "targetGroupArnSelector": {
                    "description": "Selector for a LBTargetGroup in elbv2 to populate targetGroupArn.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "networkConfiguration": {
              "description": "Network configuration for the service. This parameter is required for task definitions that use the awsvpc network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. See below.",
              "items": {
                "properties": {
                  "assignPublicIp": {
                    "description": "Assign a public IP address to the ENI (Fargate launch type only). Valid values are true or false. Default false.",
                    "type": "boolean"
                  },
                  "securityGroupRefs": {
                    "description": "References to SecurityGroup in ec2 to populate securityGroups.",
                    "items": {
                      "description": "A Reference to a named object.",
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "securityGroupSelector": {
                    "description": "Selector for a list of SecurityGroup in ec2 to populate securityGroups.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "securityGroups": {
                    "description": "Security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  },
                  "subnetRefs": {
                    "description": "References to Subnet in ec2 to populate subnets.",
                    "items": {
                      "description": "A Reference to a named object.",
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "subnetSelector": {
                    "description": "Selector for a list of Subnet in ec2 to populate subnets.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "subnets": {
                    "description": "Subnets associated with the task or service.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "orderedPlacementStrategy": {
              "description": "Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. Updates to this configuration will take effect next task deployment unless force_new_deployment is enabled. The maximum number of ordered_placement_strategy blocks is 5. See below.",
              "items": {
                "properties": {
                  "field": {
                    "description": "For the spread placement strategy, valid values are instanceId (or host,\nwhich has the same effect), or any platform or custom attribute that is applied to a container instance.\nFor the binpack type, valid values are memory and cpu. For the random type, this attribute is not\nneeded. For more information, see Placement Strategy.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of placement strategy. Must be one of: binpack, random, or spread",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "placementConstraints": {
              "description": "Rules that are taken into consideration during task placement. Updates to this configuration will take effect next task deployment unless force_new_deployment is enabled. Maximum number of placement_constraints is 10. See below.",
              "items": {
                "properties": {
                  "expression": {
                    "description": "Cluster Query Language expression to apply to the constraint. Does not need to be specified for the distinctInstance type. For more information, see Cluster Query Language in the Amazon EC2 Container Service Developer Guide.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of constraint. The only valid values at this time are memberOf and distinctInstance.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "platformVersion": {
              "description": "Platform version on which to run your service. Only applicable for launch_type set to FARGATE. Defaults to LATEST. More information about Fargate platform versions can be found in the AWS ECS User Guide.",
              "type": "string"
            },
            "propagateTags": {
              "description": "Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are SERVICE and TASK_DEFINITION.",
              "type": "string"
            },
            "schedulingStrategy": {
              "description": "Scheduling strategy to use for the service. The valid values are REPLICA and DAEMON. Defaults to REPLICA. Note that Tasks using the Fargate launch type or the .",
              "type": "string"
            },
            "serviceConnectConfiguration": {
              "description": "The ECS Service Connect configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace. See below.",
              "items": {
                "properties": {
                  "enabled": {
                    "description": "Specifies whether to use Service Connect with this service.",
                    "type": "boolean"
                  },
                  "logConfiguration": {
                    "description": "The log configuration for the container. See below.",
                    "items": {
                      "properties": {
                        "logDriver": {
                          "description": "The log driver to use for the container.",
                          "type": "string"
                        },
                        "options": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "The configuration options to send to the log driver.",
                          "type": "object",
                          "x-kubernetes-map-type": "granular"
                        },
                        "secretOption": {
                          "description": "The secrets to pass to the log configuration. See below.",
                          "items": {
                            "properties": {
                              "name": {
                                "description": "The name of the secret.",
                                "type": "string"
                              },
                              "valueFrom": {
                                "description": "The secret to expose to the container. The supported values are either the full ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the SSM Parameter Store.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "namespace": {
                    "description": "The namespace name or ARN of the aws_service_discovery_http_namespace for use with Service Connect.",
                    "type": "string"
                  },
                  "service": {
                    "description": "The list of Service Connect service objects. See below.",
                    "items": {
                      "properties": {
                        "clientAlias": {
                          "description": "The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1. See below.",
                          "items": {
                            "properties": {
                              "dnsName": {
                                "description": "The name that you use in the applications of client tasks to connect to this service.",
                                "type": "string"
                              },
                              "port": {
                                "description": "The listening port number for the Service Connect proxy. This port is available inside of all of the tasks within the same namespace.",
                                "type": "number"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "discoveryName": {
                          "description": "The name of the new AWS Cloud Map service that Amazon ECS creates for this Amazon ECS service.",
                          "type": "string"
                        },
                        "ingressPortOverride": {
                          "description": "The port number for the Service Connect proxy to listen on.",
                          "type": "number"
                        },
                        "portName": {
                          "description": "The name of one of the portMappings from all the containers in the task definition of this Amazon ECS service.",
                          "type": "string"
                        },
                        "timeout": {
                          "description": "Configuration timeouts for Service Connect",
                          "items": {
                            "properties": {
                              "idleTimeoutSeconds": {
                                "description": "The amount of time in seconds a connection will stay active while idle. A value of 0 can be set to disable idleTimeout.",
                                "type": "number"
                              },
                              "perRequestTimeoutSeconds": {
                                "description": "The amount of time in seconds for the upstream to respond with a complete response per request. A value of 0 can be set to disable perRequestTimeout. Can only be set when appProtocol isn't TCP.",
                                "type": "number"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "tls": {
                          "description": "The configuration for enabling Transport Layer Security (TLS)",
                          "items": {
                            "properties": {
                              "issuerCertAuthority": {
                                "description": "The details of the certificate authority which will issue the certificate.",
                                "items": {
                                  "properties": {
                                    "awsPcaAuthorityArn": {
                                      "description": "The ARN of the aws_acmpca_certificate_authority used to create the TLS Certificates.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "kmsKey": {
                                "description": "The KMS key used to encrypt the private key in Secrets Manager.",
                                "type": "string"
                              },
                              "roleArn": {
                                "description": "The ARN of the IAM Role that's associated with the Service Connect TLS.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "serviceRegistries": {
              "description": "Service discovery registries for the service. The maximum number of service_registries blocks is 1. See below.",
              "items": {
                "properties": {
                  "containerName": {
                    "description": "Container name value, already specified in the task definition, to be used for your service discovery service.",
                    "type": "string"
                  },
                  "containerPort": {
                    "description": "Port value, already specified in the task definition, to be used for your service discovery service.",
                    "type": "number"
                  },
                  "port": {
                    "description": "Port value used if your Service Discovery service specified an SRV record.",
                    "type": "number"
                  },
                  "registryArn": {
                    "description": "ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(aws_service_discovery_service). For more information, see Service",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "taskDefinition": {
              "description": "Family and revision (family:revision) or full ARN of the task definition that you want to run in your service. Required unless using the EXTERNAL deployment controller. If a revision is not specified, the latest ACTIVE revision is used.",
              "type": "string"
            },
            "taskDefinitionRef": {
              "description": "Reference to a TaskDefinition in ecs to populate taskDefinition.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "taskDefinitionSelector": {
              "description": "Selector for a TaskDefinition in ecs to populate taskDefinition.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "triggers": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Map of arbitrary keys and values that, when changed, will trigger an in-place update (redeployment). Useful with plantimestamp(). See example above.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "volumeConfiguration": {
              "description": "Configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently, the only supported volume type is an Amazon EBS volume. See below.",
              "properties": {
                "managedEbsVolume": {
                  "description": "Configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. See below.",
                  "properties": {
                    "encrypted": {
                      "description": "Whether the volume should be encrypted. Default value is true.",
                      "type": "boolean"
                    },
                    "fileSystemType": {
                      "description": "Linux filesystem type for the volume. For volumes created from a snapshot, same filesystem type must be specified that the volume was using when the snapshot was created. Valid values are ext3, ext4, xfs. Default value is xfs.",
                      "type": "string"
                    },
                    "iops": {
                      "description": "Number of I/O operations per second (IOPS).",
                      "type": "number"
                    },
                    "kmsKeyId": {
                      "description": "Amazon Resource Name (ARN) identifier of the Amazon Web Services Key Management Service key to use for Amazon EBS encryption.",
                      "type": "string"
                    },
                    "roleArn": {
                      "description": "Amazon ECS infrastructure IAM role that is used to manage your Amazon Web Services infrastructure. Recommended using the Amazon ECS-managed AmazonECSInfrastructureRolePolicyForVolumes IAM policy with this role.",
                      "type": "string"
                    },
                    "sizeInGb": {
                      "description": "Size of the volume in GiB. You must specify either a size_in_gb or a snapshot_id. You can optionally specify a volume size greater than or equal to the snapshot size.",
                      "type": "number"
                    },
                    "snapshotId": {
                      "description": "Snapshot that Amazon ECS uses to create the volume. You must specify either a size_in_gb or a snapshot_id.",
                      "type": "string"
                    },
                    "tagSpecifications": {
                      "description": "The tags to apply to the volume. See below.",
                      "items": {
                        "properties": {
                          "propagateTags": {
                            "description": "Determines whether to propagate the tags from the task definition to the Amazon EBS volume.",
                            "type": "string"
                          },
                          "resourceType": {
                            "description": "The type of volume resource. Valid values, volume.",
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "The tags applied to this Amazon EBS volume. AmazonECSCreated and AmazonECSManaged are reserved tags that can't be used.",
                            "type": "object",
                            "x-kubernetes-map-type": "granular"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "throughput": {
                      "description": "Throughput to provision for a volume, in MiB/s, with a maximum of 1,000 MiB/s.",
                      "type": "string"
                    },
                    "volumeType": {
                      "description": "Volume type.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "name": {
                  "description": "Name of the volume.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "vpcLatticeConfigurations": {
              "description": "The VPC Lattice configuration for your service that allows Lattice to connect, secure, and monitor your service across multiple accounts and VPCs. See below.",
              "items": {
                "properties": {
                  "portName": {
                    "description": "The name of the port for a target group associated with the VPC Lattice configuration.",
                    "type": "string"
                  },
                  "roleArn": {
                    "description": "The ARN of the IAM role to associate with this volume. This is the Amazon ECS infrastructure IAM role that is used to manage your AWS infrastructure.",
                    "type": "string"
                  },
                  "targetGroupArn": {
                    "description": "The full ARN of the target group or groups associated with the VPC Lattice configuration.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "waitForSteadyState": {
              "description": "Default false.",
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which\ncontains a name, metadata and a reference to secret store config to\nwhich any connection details for this managed resource should be written.\nConnection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used\nfor this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.annotations\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.labels\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret.\n- Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.\nThis field is planned to be replaced in a future release in favor of\nPublishConnectionDetailsTo. Currently, both could be set independently\nand connection details would be published to both without affecting\neach other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "ServiceStatus defines the observed state of Service.",
      "properties": {
        "atProvider": {
          "properties": {
            "alarms": {
              "description": "Information about the CloudWatch alarms. See below.",
              "items": {
                "properties": {
                  "alarmNames": {
                    "description": "One or more CloudWatch alarm names.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  },
                  "enable": {
                    "description": "Determines whether to use the CloudWatch alarm option in the service deployment process.",
                    "type": "boolean"
                  },
                  "rollback": {
                    "description": "Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.",
                    "type": "boolean"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "availabilityZoneRebalancing": {
              "description": "ECS automatically redistributes tasks within a service across Availability Zones (AZs) to mitigate the risk of impaired application availability due to underlying infrastructure failures and task lifecycle activities. The valid values are ENABLED and DISABLED. Defaults to DISABLED.",
              "type": "string"
            },
            "capacityProviderStrategy": {
              "description": "Capacity provider strategies to use for the service. Can be one or more. These can be updated without destroying and recreating the service only if force_new_deployment = true and not changing from 0 capacity_provider_strategy blocks to greater than 0, or vice versa. See below. Conflicts with launch_type.",
              "items": {
                "properties": {
                  "base": {
                    "description": "Number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.",
                    "type": "number"
                  },
                  "capacityProvider": {
                    "description": "Short name of the capacity provider.",
                    "type": "string"
                  },
                  "weight": {
                    "description": "Relative percentage of the total number of launched tasks that should use the specified capacity provider.",
                    "type": "number"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "cluster": {
              "description": "Name of an ECS cluster.",
              "type": "string"
            },
            "deploymentCircuitBreaker": {
              "description": "Configuration block for deployment circuit breaker. See below.",
              "items": {
                "properties": {
                  "enable": {
                    "description": "Whether to enable the deployment circuit breaker logic for the service.",
                    "type": "boolean"
                  },
                  "rollback": {
                    "description": "Whether to enable Amazon ECS to roll back the service if a service deployment fails. If rollback is enabled, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.",
                    "type": "boolean"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "deploymentController": {
              "description": "Configuration block for deployment controller configuration. See below.",
              "items": {
                "properties": {
                  "type": {
                    "description": "Type of deployment controller. Valid values: CODE_DEPLOY, ECS, EXTERNAL. Default: ECS.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "deploymentMaximumPercent": {
              "description": "Upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the DAEMON scheduling strategy.",
              "type": "number"
            },
            "deploymentMinimumHealthyPercent": {
              "description": "Lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.",
              "type": "number"
            },
            "desiredCount": {
              "description": "Number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the DAEMON scheduling strategy.",
              "type": "number"
            },
            "enableEcsManagedTags": {
              "description": "Specifies whether to enable Amazon ECS managed tags for the tasks within the service.",
              "type": "boolean"
            },
            "enableExecuteCommand": {
              "description": "Specifies whether to enable Amazon ECS Exec for the tasks within the service.",
              "type": "boolean"
            },
            "forceDelete": {
              "description": "Enable to delete a service even if it wasn't scaled down to zero tasks. It's only necessary to use this if the service uses the REPLICA scheduling strategy.",
              "type": "boolean"
            },
            "forceNewDeployment": {
              "description": "Enable to force a new task deployment of the service. This can be used to update tasks to use a newer Docker image with same image/tag combination (e.g., myimage:latest), roll Fargate tasks onto a newer platform version, or immediately deploy ordered_placement_strategy and placement_constraints updates.",
              "type": "boolean"
            },
            "healthCheckGracePeriodSeconds": {
              "description": "Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.",
              "type": "number"
            },
            "iamRole": {
              "description": "ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the awsvpc network mode. If using awsvpc network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.",
              "type": "string"
            },
            "id": {
              "description": "ARN that identifies the service.",
              "type": "string"
            },
            "launchType": {
              "description": "Launch type on which to run your service. The valid values are EC2, FARGATE, and EXTERNAL. Defaults to EC2. Conflicts with capacity_provider_strategy.",
              "type": "string"
            },
            "loadBalancer": {
              "description": "Configuration block for load balancers. See below.",
              "items": {
                "properties": {
                  "containerName": {
                    "description": "Name of the container to associate with the load balancer (as it appears in a container definition).",
                    "type": "string"
                  },
                  "containerPort": {
                    "description": "Port on the container to associate with the load balancer.",
                    "type": "number"
                  },
                  "elbName": {
                    "description": "Name of the ELB (Classic) to associate with the service.",
                    "type": "string"
                  },
                  "targetGroupArn": {
                    "description": "ARN of the Load Balancer target group to associate with the service.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "networkConfiguration": {
              "description": "Network configuration for the service. This parameter is required for task definitions that use the awsvpc network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. See below.",
              "items": {
                "properties": {
                  "assignPublicIp": {
                    "description": "Assign a public IP address to the ENI (Fargate launch type only). Valid values are true or false. Default false.",
                    "type": "boolean"
                  },
                  "securityGroups": {
                    "description": "Security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  },
                  "subnets": {
                    "description": "Subnets associated with the task or service.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "orderedPlacementStrategy": {
              "description": "Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. Updates to this configuration will take effect next task deployment unless force_new_deployment is enabled. The maximum number of ordered_placement_strategy blocks is 5. See below.",
              "items": {
                "properties": {
                  "field": {
                    "description": "For the spread placement strategy, valid values are instanceId (or host,\nwhich has the same effect), or any platform or custom attribute that is applied to a container instance.\nFor the binpack type, valid values are memory and cpu. For the random type, this attribute is not\nneeded. For more information, see Placement Strategy.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of placement strategy. Must be one of: binpack, random, or spread",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "placementConstraints": {
              "description": "Rules that are taken into consideration during task placement. Updates to this configuration will take effect next task deployment unless force_new_deployment is enabled. Maximum number of placement_constraints is 10. See below.",
              "items": {
                "properties": {
                  "expression": {
                    "description": "Cluster Query Language expression to apply to the constraint. Does not need to be specified for the distinctInstance type. For more information, see Cluster Query Language in the Amazon EC2 Container Service Developer Guide.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of constraint. The only valid values at this time are memberOf and distinctInstance.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "platformVersion": {
              "description": "Platform version on which to run your service. Only applicable for launch_type set to FARGATE. Defaults to LATEST. More information about Fargate platform versions can be found in the AWS ECS User Guide.",
              "type": "string"
            },
            "propagateTags": {
              "description": "Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are SERVICE and TASK_DEFINITION.",
              "type": "string"
            },
            "schedulingStrategy": {
              "description": "Scheduling strategy to use for the service. The valid values are REPLICA and DAEMON. Defaults to REPLICA. Note that Tasks using the Fargate launch type or the .",
              "type": "string"
            },
            "serviceConnectConfiguration": {
              "description": "The ECS Service Connect configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace. See below.",
              "items": {
                "properties": {
                  "enabled": {
                    "description": "Specifies whether to use Service Connect with this service.",
                    "type": "boolean"
                  },
                  "logConfiguration": {
                    "description": "The log configuration for the container. See below.",
                    "items": {
                      "properties": {
                        "logDriver": {
                          "description": "The log driver to use for the container.",
                          "type": "string"
                        },
                        "options": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "The configuration options to send to the log driver.",
                          "type": "object",
                          "x-kubernetes-map-type": "granular"
                        },
                        "secretOption": {
                          "description": "The secrets to pass to the log configuration. See below.",
                          "items": {
                            "properties": {
                              "name": {
                                "description": "The name of the secret.",
                                "type": "string"
                              },
                              "valueFrom": {
                                "description": "The secret to expose to the container. The supported values are either the full ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the SSM Parameter Store.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "namespace": {
                    "description": "The namespace name or ARN of the aws_service_discovery_http_namespace for use with Service Connect.",
                    "type": "string"
                  },
                  "service": {
                    "description": "The list of Service Connect service objects. See below.",
                    "items": {
                      "properties": {
                        "clientAlias": {
                          "description": "The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1. See below.",
                          "items": {
                            "properties": {
                              "dnsName": {
                                "description": "The name that you use in the applications of client tasks to connect to this service.",
                                "type": "string"
                              },
                              "port": {
                                "description": "The listening port number for the Service Connect proxy. This port is available inside of all of the tasks within the same namespace.",
                                "type": "number"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "discoveryName": {
                          "description": "The name of the new AWS Cloud Map service that Amazon ECS creates for this Amazon ECS service.",
                          "type": "string"
                        },
                        "ingressPortOverride": {
                          "description": "The port number for the Service Connect proxy to listen on.",
                          "type": "number"
                        },
                        "portName": {
                          "description": "The name of one of the portMappings from all the containers in the task definition of this Amazon ECS service.",
                          "type": "string"
                        },
                        "timeout": {
                          "description": "Configuration timeouts for Service Connect",
                          "items": {
                            "properties": {
                              "idleTimeoutSeconds": {
                                "description": "The amount of time in seconds a connection will stay active while idle. A value of 0 can be set to disable idleTimeout.",
                                "type": "number"
                              },
                              "perRequestTimeoutSeconds": {
                                "description": "The amount of time in seconds for the upstream to respond with a complete response per request. A value of 0 can be set to disable perRequestTimeout. Can only be set when appProtocol isn't TCP.",
                                "type": "number"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "tls": {
                          "description": "The configuration for enabling Transport Layer Security (TLS)",
                          "items": {
                            "properties": {
                              "issuerCertAuthority": {
                                "description": "The details of the certificate authority which will issue the certificate.",
                                "items": {
                                  "properties": {
                                    "awsPcaAuthorityArn": {
                                      "description": "The ARN of the aws_acmpca_certificate_authority used to create the TLS Certificates.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "kmsKey": {
                                "description": "The KMS key used to encrypt the private key in Secrets Manager.",
                                "type": "string"
                              },
                              "roleArn": {
                                "description": "The ARN of the IAM Role that's associated with the Service Connect TLS.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "serviceRegistries": {
              "description": "Service discovery registries for the service. The maximum number of service_registries blocks is 1. See below.",
              "items": {
                "properties": {
                  "containerName": {
                    "description": "Container name value, already specified in the task definition, to be used for your service discovery service.",
                    "type": "string"
                  },
                  "containerPort": {
                    "description": "Port value, already specified in the task definition, to be used for your service discovery service.",
                    "type": "number"
                  },
                  "port": {
                    "description": "Port value used if your Service Discovery service specified an SRV record.",
                    "type": "number"
                  },
                  "registryArn": {
                    "description": "ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(aws_service_discovery_service). For more information, see Service",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "taskDefinition": {
              "description": "Family and revision (family:revision) or full ARN of the task definition that you want to run in your service. Required unless using the EXTERNAL deployment controller. If a revision is not specified, the latest ACTIVE revision is used.",
              "type": "string"
            },
            "triggers": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Map of arbitrary keys and values that, when changed, will trigger an in-place update (redeployment). Useful with plantimestamp(). See example above.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "volumeConfiguration": {
              "description": "Configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently, the only supported volume type is an Amazon EBS volume. See below.",
              "properties": {
                "managedEbsVolume": {
                  "description": "Configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. See below.",
                  "properties": {
                    "encrypted": {
                      "description": "Whether the volume should be encrypted. Default value is true.",
                      "type": "boolean"
                    },
                    "fileSystemType": {
                      "description": "Linux filesystem type for the volume. For volumes created from a snapshot, same filesystem type must be specified that the volume was using when the snapshot was created. Valid values are ext3, ext4, xfs. Default value is xfs.",
                      "type": "string"
                    },
                    "iops": {
                      "description": "Number of I/O operations per second (IOPS).",
                      "type": "number"
                    },
                    "kmsKeyId": {
                      "description": "Amazon Resource Name (ARN) identifier of the Amazon Web Services Key Management Service key to use for Amazon EBS encryption.",
                      "type": "string"
                    },
                    "roleArn": {
                      "description": "Amazon ECS infrastructure IAM role that is used to manage your Amazon Web Services infrastructure. Recommended using the Amazon ECS-managed AmazonECSInfrastructureRolePolicyForVolumes IAM policy with this role.",
                      "type": "string"
                    },
                    "sizeInGb": {
                      "description": "Size of the volume in GiB. You must specify either a size_in_gb or a snapshot_id. You can optionally specify a volume size greater than or equal to the snapshot size.",
                      "type": "number"
                    },
                    "snapshotId": {
                      "description": "Snapshot that Amazon ECS uses to create the volume. You must specify either a size_in_gb or a snapshot_id.",
                      "type": "string"
                    },
                    "tagSpecifications": {
                      "description": "The tags to apply to the volume. See below.",
                      "items": {
                        "properties": {
                          "propagateTags": {
                            "description": "Determines whether to propagate the tags from the task definition to the Amazon EBS volume.",
                            "type": "string"
                          },
                          "resourceType": {
                            "description": "The type of volume resource. Valid values, volume.",
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "The tags applied to this Amazon EBS volume. AmazonECSCreated and AmazonECSManaged are reserved tags that can't be used.",
                            "type": "object",
                            "x-kubernetes-map-type": "granular"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "throughput": {
                      "description": "Throughput to provision for a volume, in MiB/s, with a maximum of 1,000 MiB/s.",
                      "type": "string"
                    },
                    "volumeType": {
                      "description": "Volume type.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "name": {
                  "description": "Name of the volume.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "vpcLatticeConfigurations": {
              "description": "The VPC Lattice configuration for your service that allows Lattice to connect, secure, and monitor your service across multiple accounts and VPCs. See below.",
              "items": {
                "properties": {
                  "portName": {
                    "description": "The name of the port for a target group associated with the VPC Lattice configuration.",
                    "type": "string"
                  },
                  "roleArn": {
                    "description": "The ARN of the IAM role to associate with this volume. This is the Amazon ECS infrastructure IAM role that is used to manage your AWS infrastructure.",
                    "type": "string"
                  },
                  "targetGroupArn": {
                    "description": "The full ARN of the target group or groups associated with the VPC Lattice configuration.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "waitForSteadyState": {
              "description": "Default false.",
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
