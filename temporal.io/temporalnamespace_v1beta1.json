{
  "description": "A TemporalNamespace creates a namespace in the targeted temporal cluster.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "TemporalNamespaceSpec defines the desired state of Namespace.",
      "properties": {
        "activeClusterName": {
          "description": "The name of active Temporal Cluster.\nOnly applicable if the namespace is a global namespace.",
          "type": "string"
        },
        "allowDeletion": {
          "description": "AllowDeletion makes the controller delete the Temporal namespace if the\nCRD is deleted.",
          "type": "boolean"
        },
        "archival": {
          "description": "Archival is a per-namespace archival configuration.\nIf not set, the default cluster configuration is used.",
          "properties": {
            "history": {
              "description": "History is the config for this namespace history archival.",
              "properties": {
                "enableRead": {
                  "default": false,
                  "description": "EnableRead allows temporal to read from the archived Event History.",
                  "type": "boolean"
                },
                "enabled": {
                  "default": false,
                  "description": "Enabled defines if the archival is enabled by default for all namespaces\nor for a particular namespace (depends if it's for a TemporalCluster or a TemporalNamespace).",
                  "type": "boolean"
                },
                "path": {
                  "description": "Path is ...",
                  "type": "string"
                },
                "paused": {
                  "default": false,
                  "description": "Paused defines if the archival is paused.",
                  "type": "boolean"
                }
              },
              "required": [
                "enableRead",
                "path",
                "paused"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "visibility": {
              "description": "Visibility is the config for this namespace visibility archival.",
              "properties": {
                "enableRead": {
                  "default": false,
                  "description": "EnableRead allows temporal to read from the archived Event History.",
                  "type": "boolean"
                },
                "enabled": {
                  "default": false,
                  "description": "Enabled defines if the archival is enabled by default for all namespaces\nor for a particular namespace (depends if it's for a TemporalCluster or a TemporalNamespace).",
                  "type": "boolean"
                },
                "path": {
                  "description": "Path is ...",
                  "type": "string"
                },
                "paused": {
                  "default": false,
                  "description": "Paused defines if the archival is paused.",
                  "type": "boolean"
                }
              },
              "required": [
                "enableRead",
                "path",
                "paused"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "clusterRef": {
          "description": "Reference to the temporal cluster the namespace will be created.",
          "properties": {
            "name": {
              "description": "The name of the temporal object to reference.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace of the temporal object to reference.\nDefaults to the namespace of the requested resource if omitted.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "clusters": {
          "description": "List of clusters names to which the namespace can fail over.\nOnly applicable if the namespace is a global namespace.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "data": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Data is a key-value map for any customized purpose.",
          "type": "object"
        },
        "description": {
          "description": "Namespace description.",
          "type": "string"
        },
        "isGlobalNamespace": {
          "description": "IsGlobalNamespace defines whether the namespace is a global namespace.",
          "type": "boolean"
        },
        "ownerEmail": {
          "description": "Namespace owner email.",
          "type": "string"
        },
        "retentionPeriod": {
          "description": "RetentionPeriod to apply on closed workflow executions.",
          "type": "string"
        },
        "securityToken": {
          "type": "string"
        }
      },
      "required": [
        "clusterRef",
        "retentionPeriod"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "TemporalNamespaceStatus defines the observed state of Namespace.",
      "properties": {
        "conditions": {
          "description": "Conditions represent the latest available observations of the Namespace state.",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        }
      },
      "required": [
        "conditions"
      ],
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
