{
  "description": "AssignMetadata is the Schema for the assignmetadata API.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "properties": {
        "name": {
          "maxLength": 63,
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    },
    "spec": {
      "description": "AssignMetadataSpec defines the desired state of AssignMetadata.",
      "properties": {
        "location": {
          "type": "string"
        },
        "match": {
          "description": "Match selects which objects are in scope.",
          "properties": {
            "excludedNamespaces": {
              "description": "ExcludedNamespaces is a list of namespace names. If defined, a\nconstraint only applies to resources not in a listed namespace.\nExcludedNamespaces also supports a prefix or suffix based glob.  For example,\n`excludedNamespaces: [kube-*]` matches both `kube-system` and\n`kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and\n`gatekeeper-system`.",
              "items": {
                "description": "A string that supports globbing at its front and end. Ex: \"kube-*\" will match \"kube-system\" or\n\"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\", \"*system*\" will\nmatch \"system-kube\" or \"kube-system\".  The asterisk is required for wildcard matching.",
                "pattern": "^\\*?[-:a-z0-9]*\\*?$",
                "type": "string"
              },
              "type": "array"
            },
            "kinds": {
              "items": {
                "description": "Kinds accepts a list of objects with apiGroups and kinds fields\nthat list the groups/kinds of objects to which the mutation will apply.\nIf multiple groups/kinds objects are specified,\nonly one match is needed for the resource to be in scope.",
                "properties": {
                  "apiGroups": {
                    "description": "APIGroups is the API groups the resources belong to. '*' is all groups.\nIf '*' is present, the length of the slice must be one.\nRequired.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "kinds": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "labelSelector": {
              "description": "LabelSelector is the combination of two optional fields: `matchLabels`\nand `matchExpressions`.  These two fields provide different methods of\nselecting or excluding k8s objects based on the label keys and values\nincluded in object metadata.  All selection expressions from both\nsections are ANDed to determine if an object meets the cumulative\nrequirements of the selector.",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "key",
                      "operator"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object"
                }
              },
              "type": "object",
              "x-kubernetes-map-type": "atomic",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of an object.  If defined, it will match against objects with the specified\nname.  Name also supports a prefix or suffix glob.  For example, `name: pod-*` would match\nboth `pod-a` and `pod-b`, and `name: *-pod` would match both `a-pod` and `b-pod`.",
              "pattern": "^\\*?[-:a-z0-9]*\\*?$",
              "type": "string"
            },
            "namespaceSelector": {
              "description": "NamespaceSelector is a label selector against an object's containing\nnamespace or the object itself, if the object is a namespace.",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "key",
                      "operator"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object"
                }
              },
              "type": "object",
              "x-kubernetes-map-type": "atomic",
              "additionalProperties": false
            },
            "namespaces": {
              "description": "Namespaces is a list of namespace names. If defined, a constraint only\napplies to resources in a listed namespace.  Namespaces also supports a\nprefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both\n`kube-system` and `kube-public`, and `namespaces: [*-system]` matches both\n`kube-system` and `gatekeeper-system`.",
              "items": {
                "description": "A string that supports globbing at its front and end. Ex: \"kube-*\" will match \"kube-system\" or\n\"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\", \"*system*\" will\nmatch \"system-kube\" or \"kube-system\".  The asterisk is required for wildcard matching.",
                "pattern": "^\\*?[-:a-z0-9]*\\*?$",
                "type": "string"
              },
              "type": "array"
            },
            "scope": {
              "description": "Scope determines if cluster-scoped and/or namespaced-scoped resources\nare matched.  Accepts `*`, `Cluster`, or `Namespaced`. (defaults to `*`)",
              "type": "string"
            },
            "source": {
              "description": "Source determines whether generated or original resources are matched.\nAccepts `Generated`|`Original`|`All` (defaults to `All`). A value of\n`Generated` will only match generated resources, while `Original` will only\nmatch regular resources.",
              "enum": [
                "All",
                "Generated",
                "Original"
              ],
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "parameters": {
          "properties": {
            "assign": {
              "description": "Assign.value holds the value to be assigned",
              "properties": {
                "externalData": {
                  "description": "ExternalData describes the external data provider to be used for mutation.",
                  "properties": {
                    "dataSource": {
                      "default": "ValueAtLocation",
                      "description": "DataSource specifies where to extract the data that will be sent\nto the external data provider as parameters.",
                      "enum": [
                        "ValueAtLocation",
                        "Username"
                      ],
                      "type": "string"
                    },
                    "default": {
                      "description": "Default specifies the default value to use when the external data\nprovider returns an error and the failure policy is set to \"UseDefault\".",
                      "type": "string"
                    },
                    "failurePolicy": {
                      "default": "Fail",
                      "description": "FailurePolicy specifies the policy to apply when the external data\nprovider returns an error.",
                      "enum": [
                        "UseDefault",
                        "Ignore",
                        "Fail"
                      ],
                      "type": "string"
                    },
                    "provider": {
                      "description": "Provider is the name of the external data provider.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "fromMetadata": {
                  "description": "FromMetadata assigns a value from the specified metadata field.",
                  "properties": {
                    "field": {
                      "description": "Field specifies which metadata field provides the assigned value. Valid fields are `namespace` and `name`.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "value": {
                  "description": "Value is a constant value that will be assigned to `location`",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "AssignMetadataStatus defines the observed state of AssignMetadata.",
      "properties": {
        "byPod": {
          "description": "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster\nImportant: Run \"make\" to regenerate code after modifying this file",
          "items": {
            "description": "MutatorPodStatusStatus defines the observed state of MutatorPodStatus.",
            "properties": {
              "enforced": {
                "type": "boolean"
              },
              "errors": {
                "items": {
                  "description": "MutatorError represents a single error caught while adding a mutator to a system.",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "description": "Type indicates a specific class of error for use by controller code.\nIf not present, the error should be treated as not matching any known type.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "type": "array"
              },
              "id": {
                "type": "string"
              },
              "mutatorUID": {
                "description": "Storing the mutator UID allows us to detect drift, such as\nwhen a mutator has been recreated after its CRD was deleted\nout from under it, interrupting the watch",
                "type": "string"
              },
              "observedGeneration": {
                "format": "int64",
                "type": "integer"
              },
              "operations": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
