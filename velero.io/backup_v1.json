{
  "description": "Backup is a Velero resource that represents the capture of Kubernetes\ncluster state at a point in time (API objects and associated volume state).",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "BackupSpec defines the specification for a Velero backup.",
      "properties": {
        "csiSnapshotTimeout": {
          "description": "CSISnapshotTimeout specifies the time used to wait for CSI VolumeSnapshot status turns to\nReadyToUse during creation, before returning error as timeout.\nThe default value is 10 minute.",
          "type": "string"
        },
        "datamover": {
          "description": "DataMover specifies the data mover to be used by the backup.\nIf DataMover is \"\" or \"velero\", the built-in data mover will be used.",
          "type": "string"
        },
        "defaultVolumesToFsBackup": {
          "description": "DefaultVolumesToFsBackup specifies whether pod volume file system backup should be used\nfor all volumes by default.",
          "nullable": true,
          "type": "boolean"
        },
        "defaultVolumesToRestic": {
          "description": "DefaultVolumesToRestic specifies whether restic should be used to take a\nbackup of all pod volumes by default.\n\n\nDeprecated: this field is no longer used and will be removed entirely in future. Use DefaultVolumesToFsBackup instead.",
          "nullable": true,
          "type": "boolean"
        },
        "excludedClusterScopedResources": {
          "description": "ExcludedClusterScopedResources is a slice of cluster-scoped\nresource type names to exclude from the backup.\nIf set to \"*\", all cluster-scoped resource types are excluded.\nThe default value is empty.",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "type": "array"
        },
        "excludedNamespaceScopedResources": {
          "description": "ExcludedNamespaceScopedResources is a slice of namespace-scoped\nresource type names to exclude from the backup.\nIf set to \"*\", all namespace-scoped resource types are excluded.\nThe default value is empty.",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "type": "array"
        },
        "excludedNamespaces": {
          "description": "ExcludedNamespaces contains a list of namespaces that are not\nincluded in the backup.",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "type": "array"
        },
        "excludedResources": {
          "description": "ExcludedResources is a slice of resource names that are not\nincluded in the backup.",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "type": "array"
        },
        "hooks": {
          "description": "Hooks represent custom behaviors that should be executed at different phases of the backup.",
          "properties": {
            "resources": {
              "description": "Resources are hooks that should be executed when backing up individual instances of a resource.",
              "items": {
                "description": "BackupResourceHookSpec defines one or more BackupResourceHooks that should be executed based on\nthe rules defined for namespaces, resources, and label selector.",
                "properties": {
                  "excludedNamespaces": {
                    "description": "ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "type": "array"
                  },
                  "excludedResources": {
                    "description": "ExcludedResources specifies the resources to which this hook spec does not apply.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "type": "array"
                  },
                  "includedNamespaces": {
                    "description": "IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies\nto all namespaces.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "type": "array"
                  },
                  "includedResources": {
                    "description": "IncludedResources specifies the resources to which this hook spec applies. If empty, it applies\nto all resources.",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "type": "array"
                  },
                  "labelSelector": {
                    "description": "LabelSelector, if specified, filters the resources to which this hook spec applies.",
                    "nullable": true,
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "key",
                            "operator"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        },
                        "type": "array"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-kubernetes-map-type": "atomic",
                    "additionalProperties": false
                  },
                  "name": {
                    "description": "Name is the name of this hook.",
                    "type": "string"
                  },
                  "post": {
                    "description": "PostHooks is a list of BackupResourceHooks to execute after storing the item in the backup.\nThese are executed after all \"additional items\" from item actions are processed.",
                    "items": {
                      "description": "BackupResourceHook defines a hook for a resource.",
                      "properties": {
                        "exec": {
                          "description": "Exec defines an exec hook.",
                          "properties": {
                            "command": {
                              "description": "Command is the command and arguments to execute.",
                              "items": {
                                "type": "string"
                              },
                              "minItems": 1,
                              "type": "array"
                            },
                            "container": {
                              "description": "Container is the container in the pod where the command should be executed. If not specified,\nthe pod's first container is used.",
                              "type": "string"
                            },
                            "onError": {
                              "description": "OnError specifies how Velero should behave if it encounters an error executing this hook.",
                              "enum": [
                                "Continue",
                                "Fail"
                              ],
                              "type": "string"
                            },
                            "timeout": {
                              "description": "Timeout defines the maximum amount of time Velero should wait for the hook to complete before\nconsidering the execution a failure.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "command"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "exec"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "pre": {
                    "description": "PreHooks is a list of BackupResourceHooks to execute prior to storing the item in the backup.\nThese are executed before any \"additional items\" from item actions are processed.",
                    "items": {
                      "description": "BackupResourceHook defines a hook for a resource.",
                      "properties": {
                        "exec": {
                          "description": "Exec defines an exec hook.",
                          "properties": {
                            "command": {
                              "description": "Command is the command and arguments to execute.",
                              "items": {
                                "type": "string"
                              },
                              "minItems": 1,
                              "type": "array"
                            },
                            "container": {
                              "description": "Container is the container in the pod where the command should be executed. If not specified,\nthe pod's first container is used.",
                              "type": "string"
                            },
                            "onError": {
                              "description": "OnError specifies how Velero should behave if it encounters an error executing this hook.",
                              "enum": [
                                "Continue",
                                "Fail"
                              ],
                              "type": "string"
                            },
                            "timeout": {
                              "description": "Timeout defines the maximum amount of time Velero should wait for the hook to complete before\nconsidering the execution a failure.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "command"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "exec"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "nullable": true,
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "includeClusterResources": {
          "description": "IncludeClusterResources specifies whether cluster-scoped resources\nshould be included for consideration in the backup.",
          "nullable": true,
          "type": "boolean"
        },
        "includedClusterScopedResources": {
          "description": "IncludedClusterScopedResources is a slice of cluster-scoped\nresource type names to include in the backup.\nIf set to \"*\", all cluster-scoped resource types are included.\nThe default value is empty, which means only related\ncluster-scoped resources are included.",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "type": "array"
        },
        "includedNamespaceScopedResources": {
          "description": "IncludedNamespaceScopedResources is a slice of namespace-scoped\nresource type names to include in the backup.\nThe default value is \"*\".",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "type": "array"
        },
        "includedNamespaces": {
          "description": "IncludedNamespaces is a slice of namespace names to include objects\nfrom. If empty, all namespaces are included.",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "type": "array"
        },
        "includedResources": {
          "description": "IncludedResources is a slice of resource names to include\nin the backup. If empty, all resources are included.",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "type": "array"
        },
        "itemOperationTimeout": {
          "description": "ItemOperationTimeout specifies the time used to wait for asynchronous BackupItemAction operations\nThe default value is 4 hour.",
          "type": "string"
        },
        "labelSelector": {
          "description": "LabelSelector is a metav1.LabelSelector to filter with\nwhen adding individual objects to the backup. If empty\nor nil, all objects are included. Optional.",
          "nullable": true,
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "key",
                  "operator"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "matchLabels": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object"
            }
          },
          "type": "object",
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        },
        "metadata": {
          "properties": {
            "labels": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "orLabelSelectors": {
          "description": "OrLabelSelectors is list of metav1.LabelSelector to filter with\nwhen adding individual objects to the backup. If multiple provided\nthey will be joined by the OR operator. LabelSelector as well as\nOrLabelSelectors cannot co-exist in backup request, only one of them\ncan be used.",
          "items": {
            "description": "A label selector is a label query over a set of resources. The result of matchLabels and\nmatchExpressions are ANDed. An empty label selector matches all objects. A null\nlabel selector matches no objects.",
            "properties": {
              "matchExpressions": {
                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                "items": {
                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                  "properties": {
                    "key": {
                      "description": "key is the label key that the selector applies to.",
                      "type": "string"
                    },
                    "operator": {
                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                      "type": "string"
                    },
                    "values": {
                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "key",
                    "operator"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "type": "array"
              },
              "matchLabels": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                "type": "object"
              }
            },
            "type": "object",
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
          },
          "nullable": true,
          "type": "array"
        },
        "orderedResources": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "OrderedResources specifies the backup order of resources of specific Kind.\nThe map key is the resource name and value is a list of object names separated by commas.\nEach resource name has format \"namespace/objectname\".  For cluster resources, simply use \"objectname\".",
          "nullable": true,
          "type": "object"
        },
        "resourcePolicy": {
          "description": "ResourcePolicy specifies the referenced resource policies that backup should follow",
          "properties": {
            "apiGroup": {
              "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.",
              "type": "string"
            },
            "kind": {
              "description": "Kind is the type of resource being referenced",
              "type": "string"
            },
            "name": {
              "description": "Name is the name of resource being referenced",
              "type": "string"
            }
          },
          "required": [
            "kind",
            "name"
          ],
          "type": "object",
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        },
        "snapshotMoveData": {
          "description": "SnapshotMoveData specifies whether snapshot data should be moved",
          "nullable": true,
          "type": "boolean"
        },
        "snapshotVolumes": {
          "description": "SnapshotVolumes specifies whether to take snapshots\nof any PV's referenced in the set of objects included\nin the Backup.",
          "nullable": true,
          "type": "boolean"
        },
        "storageLocation": {
          "description": "StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.",
          "type": "string"
        },
        "ttl": {
          "description": "TTL is a time.Duration-parseable string describing how long\nthe Backup should be retained for.",
          "type": "string"
        },
        "uploaderConfig": {
          "description": "UploaderConfig specifies the configuration for the uploader.",
          "nullable": true,
          "properties": {
            "parallelFilesUpload": {
              "description": "ParallelFilesUpload is the number of files parallel uploads to perform when using the uploader.",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "volumeSnapshotLocations": {
          "description": "VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "BackupStatus captures the current status of a Velero backup.",
      "properties": {
        "backupItemOperationsAttempted": {
          "description": "BackupItemOperationsAttempted is the total number of attempted\nasync BackupItemAction operations for this backup.",
          "type": "integer"
        },
        "backupItemOperationsCompleted": {
          "description": "BackupItemOperationsCompleted is the total number of successfully completed\nasync BackupItemAction operations for this backup.",
          "type": "integer"
        },
        "backupItemOperationsFailed": {
          "description": "BackupItemOperationsFailed is the total number of async\nBackupItemAction operations for this backup which ended with an error.",
          "type": "integer"
        },
        "completionTimestamp": {
          "description": "CompletionTimestamp records the time a backup was completed.\nCompletion time is recorded even on failed backups.\nCompletion time is recorded before uploading the backup object.\nThe server's time is used for CompletionTimestamps",
          "format": "date-time",
          "nullable": true,
          "type": "string"
        },
        "csiVolumeSnapshotsAttempted": {
          "description": "CSIVolumeSnapshotsAttempted is the total number of attempted\nCSI VolumeSnapshots for this backup.",
          "type": "integer"
        },
        "csiVolumeSnapshotsCompleted": {
          "description": "CSIVolumeSnapshotsCompleted is the total number of successfully\ncompleted CSI VolumeSnapshots for this backup.",
          "type": "integer"
        },
        "errors": {
          "description": "Errors is a count of all error messages that were generated during\nexecution of the backup.  The actual errors are in the backup's log\nfile in object storage.",
          "type": "integer"
        },
        "expiration": {
          "description": "Expiration is when this Backup is eligible for garbage-collection.",
          "format": "date-time",
          "nullable": true,
          "type": "string"
        },
        "failureReason": {
          "description": "FailureReason is an error that caused the entire backup to fail.",
          "type": "string"
        },
        "formatVersion": {
          "description": "FormatVersion is the backup format version, including major, minor, and patch version.",
          "type": "string"
        },
        "hookStatus": {
          "description": "HookStatus contains information about the status of the hooks.",
          "nullable": true,
          "properties": {
            "hooksAttempted": {
              "description": "HooksAttempted is the total number of attempted hooks\nSpecifically, HooksAttempted represents the number of hooks that failed to execute\nand the number of hooks that executed successfully.",
              "type": "integer"
            },
            "hooksFailed": {
              "description": "HooksFailed is the total number of hooks which ended with an error",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "phase": {
          "description": "Phase is the current state of the Backup.",
          "enum": [
            "New",
            "FailedValidation",
            "InProgress",
            "WaitingForPluginOperations",
            "WaitingForPluginOperationsPartiallyFailed",
            "Finalizing",
            "FinalizingPartiallyFailed",
            "Completed",
            "PartiallyFailed",
            "Failed",
            "Deleting"
          ],
          "type": "string"
        },
        "progress": {
          "description": "Progress contains information about the backup's execution progress. Note\nthat this information is best-effort only -- if Velero fails to update it\nduring a backup for any reason, it may be inaccurate/stale.",
          "nullable": true,
          "properties": {
            "itemsBackedUp": {
              "description": "ItemsBackedUp is the number of items that have actually been written to the\nbackup tarball so far.",
              "type": "integer"
            },
            "totalItems": {
              "description": "TotalItems is the total number of items to be backed up. This number may change\nthroughout the execution of the backup due to plugins that return additional related\nitems to back up, the velero.io/exclude-from-backup label, and various other\nfilters that happen as items are processed.",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "startTimestamp": {
          "description": "StartTimestamp records the time a backup was started.\nSeparate from CreationTimestamp, since that value changes\non restores.\nThe server's time is used for StartTimestamps",
          "format": "date-time",
          "nullable": true,
          "type": "string"
        },
        "validationErrors": {
          "description": "ValidationErrors is a slice of all validation errors (if\napplicable).",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "type": "array"
        },
        "version": {
          "description": "Version is the backup format major version.\nDeprecated: Please see FormatVersion",
          "type": "integer"
        },
        "volumeSnapshotsAttempted": {
          "description": "VolumeSnapshotsAttempted is the total number of attempted\nvolume snapshots for this backup.",
          "type": "integer"
        },
        "volumeSnapshotsCompleted": {
          "description": "VolumeSnapshotsCompleted is the total number of successfully\ncompleted volume snapshots for this backup.",
          "type": "integer"
        },
        "warnings": {
          "description": "Warnings is a count of all warning messages that were generated during\nexecution of the backup. The actual warnings are in the backup's log\nfile in object storage.",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
