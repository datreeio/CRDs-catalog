{
  "description": "AMI is the Schema for the AMIs API. Creates and manages a custom Amazon Machine Image (AMI).",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "AMISpec defines the desired state of AMI",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "architecture": {
              "description": "Machine architecture for created instances. Defaults to \"x86_64\".",
              "type": "string"
            },
            "bootMode": {
              "description": "Boot mode of the AMI. For more information, see Boot modes in the Amazon Elastic Compute Cloud User Guide.",
              "type": "string"
            },
            "deprecationTime": {
              "description": "Date and time to deprecate the AMI. If you specified a value for seconds, Amazon EC2 rounds the seconds to the nearest minute. Valid values: RFC3339 time string (YYYY-MM-DDTHH:MM:SSZ)",
              "type": "string"
            },
            "description": {
              "description": "Longer, human-readable description for the AMI.",
              "type": "string"
            },
            "ebsBlockDevice": {
              "description": "Nested block describing an EBS block device that should be attached to created instances. The structure of this block is described below.",
              "items": {
                "properties": {
                  "deleteOnTermination": {
                    "description": "Boolean controlling whether the EBS volumes created to support each created instance will be deleted once that instance is terminated.",
                    "type": "boolean"
                  },
                  "deviceName": {
                    "description": "Path at which the device is exposed to created instances.",
                    "type": "string"
                  },
                  "encrypted": {
                    "description": "Boolean controlling whether the created EBS volumes will be encrypted. Can't be used with snapshot_id.",
                    "type": "boolean"
                  },
                  "iops": {
                    "description": "Number of I/O operations per second the created volumes will support.",
                    "type": "number"
                  },
                  "outpostArn": {
                    "description": "ARN of the Outpost on which the snapshot is stored.",
                    "type": "string"
                  },
                  "snapshotId": {
                    "description": "ID of an EBS snapshot that will be used to initialize the created EBS volumes. If set, the volume_size attribute must be at least as large as the referenced snapshot.",
                    "type": "string"
                  },
                  "snapshotIdRef": {
                    "description": "Reference to a EBSSnapshot to populate snapshotId.",
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "snapshotIdSelector": {
                    "description": "Selector for a EBSSnapshot to populate snapshotId.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "throughput": {
                    "description": "Throughput that the EBS volume supports, in MiB/s. Only valid for volume_type of gp3.",
                    "type": "number"
                  },
                  "volumeSize": {
                    "description": "Size of created volumes in GiB. If snapshot_id is set and volume_size is omitted then the volume will have the same size as the selected snapshot.",
                    "type": "number"
                  },
                  "volumeType": {
                    "description": "Type of EBS volume to create. Can be standard, gp2, gp3, io1, io2, sc1 or st1 (Default: standard).",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "enaSupport": {
              "description": "Whether enhanced networking with ENA is enabled. Defaults to false.",
              "type": "boolean"
            },
            "ephemeralBlockDevice": {
              "description": "Nested block describing an ephemeral block device that should be attached to created instances. The structure of this block is described below.",
              "items": {
                "properties": {
                  "deviceName": {
                    "description": "Path at which the device is exposed to created instances.",
                    "type": "string"
                  },
                  "virtualName": {
                    "description": "Name for the ephemeral device, of the form \"ephemeralN\" where N is a volume number starting from zero.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "imageLocation": {
              "description": "Path to an S3 object containing an image manifest, e.g., created by the ec2-upload-bundle command in the EC2 command line tools.",
              "type": "string"
            },
            "imdsSupport": {
              "description": "If EC2 instances started from this image should require the use of the Instance Metadata Service V2 (IMDSv2), set this argument to v2.0. For more information, see Configure instance metadata options for new instances.",
              "type": "string"
            },
            "kernelId": {
              "description": "ID of the kernel image (AKI) that will be used as the paravirtual kernel in created instances.",
              "type": "string"
            },
            "name": {
              "description": "Region-unique name for the AMI.",
              "type": "string"
            },
            "ramdiskId": {
              "description": "ID of an initrd image (ARI) that will be used when booting the created instances.",
              "type": "string"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "rootDeviceName": {
              "description": "Name of the root device (for example, /dev/sda1, or /dev/xvda).",
              "type": "string"
            },
            "sriovNetSupport": {
              "description": "When set to \"simple\" (the default), enables enhanced networking for created instances. No other value is supported at this time.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tpmSupport": {
              "description": "If the image is configured for NitroTPM support, the value is v2.0. For more information, see NitroTPM in the Amazon Elastic Compute Cloud User Guide.",
              "type": "string"
            },
            "virtualizationType": {
              "description": "Keyword to choose what virtualization mode created instances will use. Can be either \"paravirtual\" (the default) or \"hvm\". The choice of virtualization type changes the set of further arguments that are required, as described below.",
              "type": "string"
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "properties": {
            "architecture": {
              "description": "Machine architecture for created instances. Defaults to \"x86_64\".",
              "type": "string"
            },
            "bootMode": {
              "description": "Boot mode of the AMI. For more information, see Boot modes in the Amazon Elastic Compute Cloud User Guide.",
              "type": "string"
            },
            "deprecationTime": {
              "description": "Date and time to deprecate the AMI. If you specified a value for seconds, Amazon EC2 rounds the seconds to the nearest minute. Valid values: RFC3339 time string (YYYY-MM-DDTHH:MM:SSZ)",
              "type": "string"
            },
            "description": {
              "description": "Longer, human-readable description for the AMI.",
              "type": "string"
            },
            "ebsBlockDevice": {
              "description": "Nested block describing an EBS block device that should be attached to created instances. The structure of this block is described below.",
              "items": {
                "properties": {
                  "deleteOnTermination": {
                    "description": "Boolean controlling whether the EBS volumes created to support each created instance will be deleted once that instance is terminated.",
                    "type": "boolean"
                  },
                  "deviceName": {
                    "description": "Path at which the device is exposed to created instances.",
                    "type": "string"
                  },
                  "encrypted": {
                    "description": "Boolean controlling whether the created EBS volumes will be encrypted. Can't be used with snapshot_id.",
                    "type": "boolean"
                  },
                  "iops": {
                    "description": "Number of I/O operations per second the created volumes will support.",
                    "type": "number"
                  },
                  "outpostArn": {
                    "description": "ARN of the Outpost on which the snapshot is stored.",
                    "type": "string"
                  },
                  "snapshotId": {
                    "description": "ID of an EBS snapshot that will be used to initialize the created EBS volumes. If set, the volume_size attribute must be at least as large as the referenced snapshot.",
                    "type": "string"
                  },
                  "snapshotIdRef": {
                    "description": "Reference to a EBSSnapshot to populate snapshotId.",
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "snapshotIdSelector": {
                    "description": "Selector for a EBSSnapshot to populate snapshotId.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "throughput": {
                    "description": "Throughput that the EBS volume supports, in MiB/s. Only valid for volume_type of gp3.",
                    "type": "number"
                  },
                  "volumeSize": {
                    "description": "Size of created volumes in GiB. If snapshot_id is set and volume_size is omitted then the volume will have the same size as the selected snapshot.",
                    "type": "number"
                  },
                  "volumeType": {
                    "description": "Type of EBS volume to create. Can be standard, gp2, gp3, io1, io2, sc1 or st1 (Default: standard).",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "enaSupport": {
              "description": "Whether enhanced networking with ENA is enabled. Defaults to false.",
              "type": "boolean"
            },
            "ephemeralBlockDevice": {
              "description": "Nested block describing an ephemeral block device that should be attached to created instances. The structure of this block is described below.",
              "items": {
                "properties": {
                  "deviceName": {
                    "description": "Path at which the device is exposed to created instances.",
                    "type": "string"
                  },
                  "virtualName": {
                    "description": "Name for the ephemeral device, of the form \"ephemeralN\" where N is a volume number starting from zero.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "imageLocation": {
              "description": "Path to an S3 object containing an image manifest, e.g., created by the ec2-upload-bundle command in the EC2 command line tools.",
              "type": "string"
            },
            "imdsSupport": {
              "description": "If EC2 instances started from this image should require the use of the Instance Metadata Service V2 (IMDSv2), set this argument to v2.0. For more information, see Configure instance metadata options for new instances.",
              "type": "string"
            },
            "kernelId": {
              "description": "ID of the kernel image (AKI) that will be used as the paravirtual kernel in created instances.",
              "type": "string"
            },
            "name": {
              "description": "Region-unique name for the AMI.",
              "type": "string"
            },
            "ramdiskId": {
              "description": "ID of an initrd image (ARI) that will be used when booting the created instances.",
              "type": "string"
            },
            "rootDeviceName": {
              "description": "Name of the root device (for example, /dev/sda1, or /dev/xvda).",
              "type": "string"
            },
            "sriovNetSupport": {
              "description": "When set to \"simple\" (the default), enables enhanced networking for created instances. No other value is supported at this time.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tpmSupport": {
              "description": "If the image is configured for NitroTPM support, the value is v2.0. For more information, see NitroTPM in the Amazon Elastic Compute Cloud User Guide.",
              "type": "string"
            },
            "virtualizationType": {
              "description": "Keyword to choose what virtualization mode created instances will use. Can be either \"paravirtual\" (the default) or \"hvm\". The choice of virtualization type changes the set of further arguments that are required, as described below.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "spec.forProvider.name is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "AMIStatus defines the observed state of AMI.",
      "properties": {
        "atProvider": {
          "properties": {
            "architecture": {
              "description": "Machine architecture for created instances. Defaults to \"x86_64\".",
              "type": "string"
            },
            "arn": {
              "description": "ARN of the AMI.",
              "type": "string"
            },
            "bootMode": {
              "description": "Boot mode of the AMI. For more information, see Boot modes in the Amazon Elastic Compute Cloud User Guide.",
              "type": "string"
            },
            "deprecationTime": {
              "description": "Date and time to deprecate the AMI. If you specified a value for seconds, Amazon EC2 rounds the seconds to the nearest minute. Valid values: RFC3339 time string (YYYY-MM-DDTHH:MM:SSZ)",
              "type": "string"
            },
            "description": {
              "description": "Longer, human-readable description for the AMI.",
              "type": "string"
            },
            "ebsBlockDevice": {
              "description": "Nested block describing an EBS block device that should be attached to created instances. The structure of this block is described below.",
              "items": {
                "properties": {
                  "deleteOnTermination": {
                    "description": "Boolean controlling whether the EBS volumes created to support each created instance will be deleted once that instance is terminated.",
                    "type": "boolean"
                  },
                  "deviceName": {
                    "description": "Path at which the device is exposed to created instances.",
                    "type": "string"
                  },
                  "encrypted": {
                    "description": "Boolean controlling whether the created EBS volumes will be encrypted. Can't be used with snapshot_id.",
                    "type": "boolean"
                  },
                  "iops": {
                    "description": "Number of I/O operations per second the created volumes will support.",
                    "type": "number"
                  },
                  "outpostArn": {
                    "description": "ARN of the Outpost on which the snapshot is stored.",
                    "type": "string"
                  },
                  "snapshotId": {
                    "description": "ID of an EBS snapshot that will be used to initialize the created EBS volumes. If set, the volume_size attribute must be at least as large as the referenced snapshot.",
                    "type": "string"
                  },
                  "throughput": {
                    "description": "Throughput that the EBS volume supports, in MiB/s. Only valid for volume_type of gp3.",
                    "type": "number"
                  },
                  "volumeSize": {
                    "description": "Size of created volumes in GiB. If snapshot_id is set and volume_size is omitted then the volume will have the same size as the selected snapshot.",
                    "type": "number"
                  },
                  "volumeType": {
                    "description": "Type of EBS volume to create. Can be standard, gp2, gp3, io1, io2, sc1 or st1 (Default: standard).",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "enaSupport": {
              "description": "Whether enhanced networking with ENA is enabled. Defaults to false.",
              "type": "boolean"
            },
            "ephemeralBlockDevice": {
              "description": "Nested block describing an ephemeral block device that should be attached to created instances. The structure of this block is described below.",
              "items": {
                "properties": {
                  "deviceName": {
                    "description": "Path at which the device is exposed to created instances.",
                    "type": "string"
                  },
                  "virtualName": {
                    "description": "Name for the ephemeral device, of the form \"ephemeralN\" where N is a volume number starting from zero.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "hypervisor": {
              "description": "Hypervisor type of the image.",
              "type": "string"
            },
            "id": {
              "description": "ID of the created AMI.",
              "type": "string"
            },
            "imageLocation": {
              "description": "Path to an S3 object containing an image manifest, e.g., created by the ec2-upload-bundle command in the EC2 command line tools.",
              "type": "string"
            },
            "imageOwnerAlias": {
              "description": "AWS account alias (for example, amazon, self) or the AWS account ID of the AMI owner.",
              "type": "string"
            },
            "imageType": {
              "description": "Type of image.",
              "type": "string"
            },
            "imdsSupport": {
              "description": "If EC2 instances started from this image should require the use of the Instance Metadata Service V2 (IMDSv2), set this argument to v2.0. For more information, see Configure instance metadata options for new instances.",
              "type": "string"
            },
            "kernelId": {
              "description": "ID of the kernel image (AKI) that will be used as the paravirtual kernel in created instances.",
              "type": "string"
            },
            "manageEbsSnapshots": {
              "type": "boolean"
            },
            "name": {
              "description": "Region-unique name for the AMI.",
              "type": "string"
            },
            "ownerId": {
              "description": "AWS account ID of the image owner.",
              "type": "string"
            },
            "platform": {
              "description": "This value is set to windows for Windows AMIs; otherwise, it is blank.",
              "type": "string"
            },
            "platformDetails": {
              "description": "Platform details associated with the billing code of the AMI.",
              "type": "string"
            },
            "public": {
              "description": "Whether the image has public launch permissions.",
              "type": "boolean"
            },
            "ramdiskId": {
              "description": "ID of an initrd image (ARI) that will be used when booting the created instances.",
              "type": "string"
            },
            "rootDeviceName": {
              "description": "Name of the root device (for example, /dev/sda1, or /dev/xvda).",
              "type": "string"
            },
            "rootSnapshotId": {
              "description": "Snapshot ID for the root volume (for EBS-backed AMIs)",
              "type": "string"
            },
            "sriovNetSupport": {
              "description": "When set to \"simple\" (the default), enables enhanced networking for created instances. No other value is supported at this time.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tpmSupport": {
              "description": "If the image is configured for NitroTPM support, the value is v2.0. For more information, see NitroTPM in the Amazon Elastic Compute Cloud User Guide.",
              "type": "string"
            },
            "usageOperation": {
              "description": "Operation of the Amazon EC2 instance and the billing code that is associated with the AMI.",
              "type": "string"
            },
            "virtualizationType": {
              "description": "Keyword to choose what virtualization mode created instances will use. Can be either \"paravirtual\" (the default) or \"hvm\". The choice of virtualization type changes the set of further arguments that are required, as described below.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                "type": "string"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
