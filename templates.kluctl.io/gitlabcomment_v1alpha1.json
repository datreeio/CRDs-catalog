{
  "description": "GitlabComment is the Schema for the gitlabcomments API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "GitlabCommentSpec defines the desired state of GitlabComment",
      "properties": {
        "comment": {
          "properties": {
            "id": {
              "description": "Id specifies the identifier to be used by the controller when it needs to find the actual comment when it does not know the internal id. This Id is written into the comment inside a comment, so that a simple text search can reveal the comment",
              "type": "string"
            },
            "source": {
              "description": "Source specifies the source content for the comment. Different source types are supported: Text, ConfigMap and TextTemplate",
              "properties": {
                "configMap": {
                  "description": "ConfigMap specifies a ConfigMap and a key to load the source content from",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "text": {
                  "description": "Text specifies a raw text comment.",
                  "type": "string"
                },
                "textTemplate": {
                  "description": "TextTemplate specifies a TextTemplate to load the source content from",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "source"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "gitlab": {
          "properties": {
            "api": {
              "description": "API specifies the GitLab API URL to talk to. If blank, uses https://gitlab.com/.",
              "type": "string"
            },
            "mergeRequestId": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "description": "MergeRequestId specifies the Gitlab merge request internal ID",
              "x-kubernetes-int-or-string": true
            },
            "project": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "description": "Project specifies the Gitlab group and project (separated by slash) to use, or the numeric project id",
              "x-kubernetes-int-or-string": true
            },
            "tokenRef": {
              "description": "TokenRef specifies a secret and key to load the Gitlab API token from",
              "properties": {
                "key": {
                  "type": "string"
                },
                "secretName": {
                  "type": "string"
                }
              },
              "required": [
                "key",
                "secretName"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "mergeRequestId",
            "project"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "suspend": {
          "default": false,
          "description": "Suspend can be used to suspend the reconciliation of this object",
          "type": "boolean"
        }
      },
      "required": [
        "comment",
        "gitlab"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "GitlabCommentStatus defines the observed state of GitlabComment",
      "properties": {
        "conditions": {
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "lastPostedBodyHash": {
          "type": "string"
        },
        "noteId": {
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
