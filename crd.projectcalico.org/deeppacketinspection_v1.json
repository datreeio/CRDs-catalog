{
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "DeepPacketInspectionSpec contains the values of the deep packet inspection.",
      "properties": {
        "selector": {
          "description": "The selector is an expression used to pick out the endpoints for which deep packet inspection should be performed on. The selector will only match endpoints in the same namespace as the DeepPacketInspection resource. \n Selector expressions follow this syntax: \n \tlabel == \"string_literal\"  ->  comparison, e.g. my_label == \"foo bar\" \tlabel != \"string_literal\"   ->  not equal; also matches if label is not present \tlabel in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is one of \"a\", \"b\", \"c\" \tlabel not in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is not one of \"a\", \"b\", \"c\" \thas(label_name)  -> True if that label is present \t! expr -> negation of expr \texpr && expr  -> Short-circuit and \texpr || expr  -> Short-circuit or \t( expr ) -> parens for grouping \tall() or the empty selector -> matches all endpoints. \n Label names are allowed to contain alphanumerics, -, _ and /. String literals are more permissive but they do not support escape characters. \n Examples (with made-up labels): \n \ttype == \"webserver\" && deployment == \"prod\" \ttype in {\"frontend\", \"backend\"} \tdeployment != \"dev\" \t! has(label_name)",
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "DeepPacketInspectionStatus contains status of deep packet inspection in each node.",
      "properties": {
        "nodes": {
          "items": {
            "properties": {
              "active": {
                "properties": {
                  "lastUpdated": {
                    "description": "Timestamp of when the active status was last updated.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "success": {
                    "description": "Success indicates if deep packet inspection is running on all workloads matching the selector.",
                    "type": "boolean"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "errorConditions": {
                "items": {
                  "properties": {
                    "lastUpdated": {
                      "description": "Timestamp of when this error message was added.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "message": {
                      "description": "Message from deep packet inspection error.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "maxItems": 10,
                "type": "array"
              },
              "node": {
                "description": "Node identifies with a physical node from the cluster via its hostname.",
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
