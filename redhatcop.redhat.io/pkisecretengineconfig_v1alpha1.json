{
  "description": "PKISecretEngineConfig is the Schema for the pkisecretengineconfigs API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "PKISecretEngineConfigSpec defines the desired state of PKISecretEngineConfig",
      "properties": {
        "CRLDisable": {
          "description": "Disables or enables CRL building.",
          "type": "boolean"
        },
        "CRLDistributionPoints": {
          "description": "Specifies the URL values for the CRL Distribution Points field. This can be an array or a comma-separated string list. kubebuilder:validation:UniqueItems=true",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "CRLExpiry": {
          "default": "72h",
          "description": "Specifies the time until expiration.",
          "type": "string"
        },
        "IPSans": {
          "description": "Specifies the requested IP Subject Alternative Names, in a comma-delimited list.",
          "type": "string"
        },
        "TTL": {
          "description": "Specifies the requested Time To Live (after which the certificate will be expired). This cannot be larger than the engine's max (or, if not set, the system max).",
          "type": "string"
        },
        "URISans": {
          "description": "Specifies the requested URI Subject Alternative Names, in a comma-delimited list.",
          "type": "string"
        },
        "altNames": {
          "description": "Specifies the requested Subject Alternative Names, in a comma-delimited list. These can be host names or email addresses; they will be parsed into their respective fields.",
          "type": "string"
        },
        "authentication": {
          "description": "Authentication is the kube auth configuration to be used to execute this request",
          "properties": {
            "namespace": {
              "description": "Namespace is the Vault namespace to be used in all the operations withing this connection/authentication. Only available in Vault Enterprise.",
              "type": "string"
            },
            "path": {
              "default": "kubernetes",
              "description": "Path is the path of the role used for this kube auth authentication. The operator will try to authenticate at {[namespace/]}auth/{spec.path}",
              "pattern": "^(?:/?[\\w;:@&=\\$-\\.\\+]*)+/?",
              "type": "string"
            },
            "role": {
              "description": "Role the role to be used during authentication",
              "type": "string"
            },
            "serviceAccount": {
              "default": {
                "name": "default"
              },
              "description": "ServiceAccount is the service account used for the kube auth authentication",
              "properties": {
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                }
              },
              "type": "object",
              "x-kubernetes-map-type": "atomic",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "certificateKey": {
          "default": "tls.crt",
          "description": "CertificateKey key to be used when retrieving the signed certificate",
          "type": "string"
        },
        "commonName": {
          "description": "Specifies the requested CN for the certificate.",
          "type": "string"
        },
        "connection": {
          "description": "Connection represents the information needed to connect to Vault. This operator uses the standard Vault environment variables to connect to Vault. If you need to override those settings and for example connect to a different Vault instance, you can do with this section of the CR.",
          "properties": {
            "address": {
              "description": "Address Address of the Vault server expressed as a URL and port, for example: https://127.0.0.1:8200/",
              "type": "string"
            },
            "maxRetries": {
              "description": "MaxRetries Maximum number of retries when certain error codes are encountered. The default is 2, for three total attempts. Set this to 0 or less to disable retrying. Error codes that are retried are 412 (client consistency requirement not satisfied) and all 5xx except for 501 (not implemented).",
              "type": "integer"
            },
            "tLSConfig": {
              "properties": {
                "cacert": {
                  "description": "Cacert Path to a PEM-encoded CA certificate file on the local disk. This file is used to verify the Vault server's SSL certificate. This environment variable takes precedence over a cert passed via the secret.",
                  "type": "string"
                },
                "skipVerify": {
                  "description": "SkipVerify Do not verify Vault's presented certificate before communicating with it. Setting this variable is not recommended and voids Vault's security model.",
                  "type": "boolean"
                },
                "tlsSecret": {
                  "description": "TLSSecret namespace-local secret containing the tls material for the connection. the expected keys for the secret are: ca bundle -> \"ca.crt\", certificate -> \"tls.crt\", key -> \"tls.key\"",
                  "properties": {
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "x-kubernetes-map-type": "atomic",
                  "additionalProperties": false
                },
                "tlsServerName": {
                  "description": "TLSServerName Name to use as the SNI host when connecting via TLS.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "timeOut": {
              "description": "Timeout Timeout variable. The default value is 60s.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "country": {
          "description": "Specifies the C (Country) values in the subject field of issued certificates. This is a comma-separated string or JSON array.",
          "type": "string"
        },
        "excludeCnFromSans": {
          "description": "If set, the given common_name will not be included in DNS or Email Subject Alternate Names (as appropriate). Useful if the CN is not a hostname or email address, but is instead some human-readable identifier.",
          "type": "boolean"
        },
        "externalSignSecret": {
          "description": "ExternalSignSecret retrieves the signed intermediate certificate from a Kubernetes secret. Allows submitting the signed CA certificate corresponding to a private key generated.",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
              "type": "string"
            }
          },
          "type": "object",
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        },
        "format": {
          "default": "pem",
          "description": "Specifies the format for returned data. Can be pem, der, or pem_bundle. If der, the output is base64 encoded. If pem_bundle, the certificate field will contain the private key (if exported) and certificate, concatenated; if the issuing CA is not a Vault-derived self-signed root, this will be included as well.",
          "enum": [
            "pem",
            "pem_bundle",
            "der"
          ],
          "type": "string"
        },
        "internalSign": {
          "description": "Use the configured refered Vault PKISecretEngineConfig to issue a certificate with appropriate values for acting as an intermediate CA.",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
              "type": "string"
            }
          },
          "type": "object",
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        },
        "issuingCertificates": {
          "description": "Specifies the URL values for the Issuing Certificate field. This can be an array or a comma-separated string list. kubebuilder:validation:UniqueItems=true",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "keyBits": {
          "default": 2048,
          "description": "Specifies the number of bits to use. This must be changed to a valid value if the key_type is ec, e.g., 224, 256, 384 or 521.",
          "type": "integer"
        },
        "keyType": {
          "default": "rsa",
          "description": "Specifies the desired key type; must be rsa or ec.",
          "enum": [
            "rsa",
            "ec"
          ],
          "type": "string"
        },
        "locality": {
          "description": "Specifies the L (Locality) values in the subject field of issued certificates. This is a comma-separated string or JSON array.",
          "type": "string"
        },
        "maxPathLength": {
          "default": -1,
          "description": "Specifies the maximum path length to encode in the generated certificate. -1 means no limit. Unless the signing certificate has a maximum path length set, in which case the path length is set to one less than that of the signing certificate. A limit of 0 means a literal path length of zero.",
          "type": "integer"
        },
        "ocspServers": {
          "description": "Specifies the URL values for the OCSP Servers field. This can be an array or a comma-separated string list. kubebuilder:validation:UniqueItems=true",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "organization": {
          "description": "Specifies the O (Organization) values in the subject field of issued certificates. This is a comma-separated string or JSON array.",
          "type": "string"
        },
        "otherSans": {
          "description": "Specifies custom OID/UTF8-string SANs. These must match values specified on the role in allowed_other_sans (see role creation for allowed_other_sans globbing rules). The format is the same as OpenSSL: <oid>;<type>:<value> where the only current valid type is UTF8. This can be a comma-delimited list or a JSON string slice.",
          "type": "string"
        },
        "ou": {
          "description": "Specifies the OU (OrganizationalUnit) values in the subject field of issued certificates. This is a comma-separated string or JSON array.",
          "type": "string"
        },
        "path": {
          "description": "Path at which to create the role. The final path in Vault will be {[spec.authentication.namespace]}/{spec.path}/config/{metadata.name}. The authentication role must have the following capabilities = [ \"create\", \"read\", \"update\", \"delete\"] on that path.",
          "pattern": "^(?:/?[\\w;:@&=\\$-\\.\\+]*)+/?",
          "type": "string"
        },
        "permittedDnsDomains": {
          "description": "A comma separated string (or, string array) containing DNS domains for which certificates are allowed to be issued or signed by this CA certificate. Note that subdomains are allowed, as per RFC. kubebuilder:validation:UniqueItems=true",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "postalCode": {
          "description": "Specifies the Postal Code values in the subject field of issued certificates. This is a comma-separated string or JSON array.",
          "type": "string"
        },
        "privateKeyFormat": {
          "description": "Specifies the format for marshaling the private key. Defaults to der which will return either base64-encoded DER or PEM-encoded DER, depending on the value of format. The other option is pkcs8 which will return the key marshalled as PEM-encoded PKCS8.",
          "type": "string"
        },
        "privateKeyType": {
          "default": "internal",
          "description": "Specifies the type of the root to create. If exported, the private key will be returned in the response; if internal the private key will not be returned and cannot be retrieved later. This is part of the request URL.",
          "enum": [
            "internal",
            "exported"
          ],
          "type": "string"
        },
        "province": {
          "description": "Specifies the ST (Province) values in the subject field of issued certificates. This is a comma-separated string or JSON array.",
          "type": "string"
        },
        "serialNumber": {
          "description": "Specifies the Serial Number, if any. Otherwise Vault will generate a random serial for you. If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5.",
          "type": "string"
        },
        "streetAddress": {
          "description": "Specifies the Street Address values in the subject field of issued certificates. This is a comma-separated string or JSON array.",
          "type": "string"
        },
        "type": {
          "default": "root",
          "description": "Specifies the type of certificate authority. Root CA or Intermediate CA. This is part of the request URL.",
          "enum": [
            "root",
            "intermediate"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "PKISecretEngineConfigStatus defines the observed state of PKISecretEngineConfig",
      "properties": {
        "conditions": {
          "description": "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"make\" to regenerate code after modifying this file",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "exported": {
          "type": "boolean"
        },
        "generated": {
          "type": "boolean"
        },
        "signed": {
          "type": "boolean"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
