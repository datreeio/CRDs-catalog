{
    "description": "ImageStreamTag represents an Image that is retrieved by tag name from an ImageStream. Use this resource to interact with the tags and images in an image stream by tag, or to see the image details for a particular tag. The image associated with this resource is the most recently successfully tagged, imported, or pushed image (as described in the image stream status.tags.items list for this tag). If an import is in progress or has failed the previous image will be shown. Deleting an image stream tag clears both the status and spec fields of an image stream. If no image can be retrieved for a given tag, a not found error will be returned. \n Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
    "properties": {
        "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
        },
        "conditions": {
            "description": "conditions is an array of conditions that apply to the image stream tag.",
            "items": {
                "description": "TagEventCondition contains condition information for a tag event.",
                "properties": {
                    "generation": {
                        "description": "Generation is the spec tag generation that this status corresponds to",
                        "format": "int64",
                        "type": "integer",
                        "minimum": -9223372036854776000,
                        "maximum": 9223372036854776000
                    },
                    "lastTransitionTime": {
                        "description": "LastTransitionTIme is the time the condition transitioned from one status to another.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "message": {
                        "description": "Message is a human readable description of the details about last transition, complementing reason.",
                        "type": "string"
                    },
                    "reason": {
                        "description": "Reason is a brief machine readable explanation for the condition's last transition.",
                        "type": "string"
                    },
                    "status": {
                        "description": "Status of the condition, one of True, False, Unknown.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of tag event condition, currently only ImportSuccess",
                        "type": "string"
                    }
                },
                "required": [
                    "generation",
                    "status",
                    "type"
                ],
                "type": "object",
                "additionalProperties": false
            },
            "type": "array"
        },
        "generation": {
            "description": "generation is the current generation of the tagged image - if tag is provided and this value is not equal to the tag generation, a user has requested an import that has not completed, or conditions will be filled out indicating any error.",
            "format": "int64",
            "type": "integer",
            "minimum": -9223372036854776000,
            "maximum": 9223372036854776000
        },
        "image": {
            "description": "image associated with the ImageStream and tag.",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "dockerImageConfig": {
                    "description": "DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2. Will not be set when the image represents a manifest list.",
                    "type": "string"
                },
                "dockerImageLayers": {
                    "description": "DockerImageLayers represents the layers in the image. May not be set if the image does not define that data or if the image represents a manifest list.",
                    "items": {
                        "description": "ImageLayer represents a single layer of the image. Some images may have multiple layers. Some may have none.",
                        "properties": {
                            "mediaType": {
                                "description": "MediaType of the referenced object.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Name of the layer as defined by the underlying store.",
                                "type": "string"
                            },
                            "size": {
                                "description": "Size of the layer in bytes as defined by the underlying store.",
                                "format": "int64",
                                "type": "integer",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                            }
                        },
                        "required": [
                            "mediaType",
                            "name",
                            "size"
                        ],
                        "type": "object",
                        "additionalProperties": false
                    },
                    "type": "array"
                },
                "dockerImageManifest": {
                    "description": "DockerImageManifest is the raw JSON of the manifest",
                    "type": "string"
                },
                "dockerImageManifestMediaType": {
                    "description": "DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2.",
                    "type": "string"
                },
                "dockerImageManifests": {
                    "description": "DockerImageManifests holds information about sub-manifests when the image represents a manifest list. When this field is present, no DockerImageLayers should be specified.",
                    "items": {
                        "description": "ImageManifest represents sub-manifests of a manifest list. The Digest field points to a regular Image object.",
                        "properties": {
                            "architecture": {
                                "description": "Architecture specifies the supported CPU architecture, for example `amd64` or `ppc64le`.",
                                "type": "string"
                            },
                            "digest": {
                                "description": "Digest is the unique identifier for the manifest. It refers to an Image object.",
                                "type": "string"
                            },
                            "manifestSize": {
                                "description": "ManifestSize represents the size of the raw object contents, in bytes.",
                                "format": "int64",
                                "type": "integer",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                            },
                            "mediaType": {
                                "description": "MediaType defines the type of the manifest, possible values are application/vnd.oci.image.manifest.v1+json, application/vnd.docker.distribution.manifest.v2+json or application/vnd.docker.distribution.manifest.v1+json.",
                                "type": "string"
                            },
                            "os": {
                                "description": "OS specifies the operating system, for example `linux`.",
                                "type": "string"
                            },
                            "variant": {
                                "description": "Variant is an optional field repreenting a variant of the CPU, for example v6 to specify a particular CPU variant of the ARM CPU.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "architecture",
                            "digest",
                            "manifestSize",
                            "mediaType",
                            "os"
                        ],
                        "type": "object",
                        "additionalProperties": false
                    },
                    "type": "array"
                },
                "dockerImageMetadata": {
                    "description": "DockerImageMetadata contains metadata about this image",
                    "type": "object",
                    "x-kubernetes-preserve-unknown-fields": true
                },
                "dockerImageMetadataVersion": {
                    "description": "DockerImageMetadataVersion conveys the version of the object, which if empty defaults to \"1.0\"",
                    "type": "string"
                },
                "dockerImageReference": {
                    "description": "DockerImageReference is the string that can be used to pull this image.",
                    "type": "string"
                },
                "dockerImageSignatures": {
                    "description": "DockerImageSignatures provides the signatures as opaque blobs. This is a part of manifest schema v1.",
                    "items": {
                        "format": "byte",
                        "type": "string",
                        "pattern": "^[\\w\\d+\\/=]*$"
                    },
                    "type": "array"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "type": "object"
                },
                "signatures": {
                    "description": "Signatures holds all signatures of the image.",
                    "items": {
                        "description": "ImageSignature holds a signature of an image. It allows to verify image identity and possibly other claims as long as the signature is trusted. Based on this information it is possible to restrict runnable images to those matching cluster-wide policy. Mandatory fields should be parsed by clients doing image verification. The others are parsed from signature's content by the server. They serve just an informative purpose. \n Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
                        "properties": {
                            "apiVersion": {
                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                "type": "string"
                            },
                            "conditions": {
                                "description": "Conditions represent the latest available observations of a signature's current state.",
                                "items": {
                                    "description": "SignatureCondition describes an image signature condition of particular kind at particular probe time.",
                                    "properties": {
                                        "lastProbeTime": {
                                            "description": "Last time the condition was checked.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "lastTransitionTime": {
                                            "description": "Last time the condition transit from one status to another.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Human readable message indicating details about last transition.",
                                            "type": "string"
                                        },
                                        "reason": {
                                            "description": "(brief) reason for the condition's last transition.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "Status of the condition, one of True, False, Unknown.",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of signature condition, Complete or Failed.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "status",
                                        "type"
                                    ],
                                    "type": "object",
                                    "additionalProperties": false
                                },
                                "type": "array"
                            },
                            "content": {
                                "description": "Required: An opaque binary string which is an image's signature.",
                                "format": "byte",
                                "type": "string",
                                "pattern": "^[\\w\\d+\\/=]*$"
                            },
                            "created": {
                                "description": "If specified, it is the time of signature's creation.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "imageIdentity": {
                                "description": "A human readable string representing image's identity. It could be a product name and version, or an image pull spec (e.g. \"registry.access.redhat.com/rhel7/rhel:7.2\").",
                                "type": "string"
                            },
                            "issuedBy": {
                                "description": "If specified, it holds information about an issuer of signing certificate or key (a person or entity who signed the signing certificate or key).",
                                "properties": {
                                    "commonName": {
                                        "description": "Common name (e.g. openshift-signing-service).",
                                        "type": "string"
                                    },
                                    "organization": {
                                        "description": "Organization name.",
                                        "type": "string"
                                    }
                                },
                                "type": "object",
                                "additionalProperties": false
                            },
                            "issuedTo": {
                                "description": "If specified, it holds information about a subject of signing certificate or key (a person or entity who signed the image).",
                                "properties": {
                                    "commonName": {
                                        "description": "Common name (e.g. openshift-signing-service).",
                                        "type": "string"
                                    },
                                    "organization": {
                                        "description": "Organization name.",
                                        "type": "string"
                                    },
                                    "publicKeyID": {
                                        "description": "If present, it is a human readable key id of public key belonging to the subject used to verify image signature. It should contain at least 64 lowest bits of public key's fingerprint (e.g. 0x685ebe62bf278440).",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "publicKeyID"
                                ],
                                "type": "object",
                                "additionalProperties": false
                            },
                            "kind": {
                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                "type": "string"
                            },
                            "metadata": {
                                "description": "metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                                "type": "object"
                            },
                            "signedClaims": {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "description": "Contains claims from the signature.",
                                "type": "object"
                            },
                            "type": {
                                "description": "Required: Describes a type of stored blob.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "content",
                            "type"
                        ],
                        "type": "object",
                        "additionalProperties": false
                    },
                    "type": "array"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
        },
        "lookupPolicy": {
            "description": "lookupPolicy indicates whether this tag will handle image references in this namespace.",
            "properties": {
                "local": {
                    "description": "local will change the docker short image references (like \"mysql\" or \"php:latest\") on objects in this namespace to the image ID whenever they match this image stream, instead of reaching out to a remote registry. The name will be fully qualified to an image ID if found. The tag's referencePolicy is taken into account on the replaced value. Only works within the current namespace.",
                    "type": "boolean"
                }
            },
            "required": [
                "local"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "metadata": {
            "type": "object"
        },
        "tag": {
            "description": "tag is the spec tag associated with this image stream tag, and it may be null if only pushes have occurred to this image stream.",
            "properties": {
                "annotations": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Optional; if specified, annotations that are applied to images retrieved via ImageStreamTags.",
                    "type": "object"
                },
                "from": {
                    "description": "Optional; if specified, a reference to another image that this tag should point to. Valid values are ImageStreamTag, ImageStreamImage, and DockerImage.  ImageStreamTag references can only reference a tag within this same ImageStream.",
                    "properties": {
                        "apiVersion": {
                            "description": "API version of the referent.",
                            "type": "string"
                        },
                        "fieldPath": {
                            "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                            "type": "string"
                        },
                        "kind": {
                            "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                            "type": "string"
                        },
                        "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                            "type": "string"
                        },
                        "namespace": {
                            "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                            "type": "string"
                        },
                        "resourceVersion": {
                            "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                            "type": "string"
                        },
                        "uid": {
                            "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                            "type": "string"
                        }
                    },
                    "type": "object",
                    "additionalProperties": false
                },
                "generation": {
                    "description": "Generation is a counter that tracks mutations to the spec tag (user intent). When a tag reference is changed the generation is set to match the current stream generation (which is incremented every time spec is changed). Other processes in the system like the image importer observe that the generation of spec tag is newer than the generation recorded in the status and use that as a trigger to import the newest remote tag. To trigger a new import, clients may set this value to zero which will reset the generation to the latest stream generation. Legacy clients will send this value as nil which will be merged with the current tag generation.",
                    "format": "int64",
                    "type": "integer",
                    "minimum": -9223372036854776000,
                    "maximum": 9223372036854776000
                },
                "importPolicy": {
                    "description": "ImportPolicy is information that controls how images may be imported by the server.",
                    "properties": {
                        "importMode": {
                            "description": "ImportMode describes how to import an image manifest.",
                            "type": "string"
                        },
                        "insecure": {
                            "description": "Insecure is true if the server may bypass certificate verification or connect directly over HTTP during image import.",
                            "type": "boolean"
                        },
                        "scheduled": {
                            "description": "Scheduled indicates to the server that this tag should be periodically checked to ensure it is up to date, and imported",
                            "type": "boolean"
                        }
                    },
                    "type": "object",
                    "additionalProperties": false
                },
                "name": {
                    "description": "Name of the tag",
                    "type": "string"
                },
                "reference": {
                    "description": "Reference states if the tag will be imported. Default value is false, which means the tag will be imported.",
                    "type": "boolean"
                },
                "referencePolicy": {
                    "description": "ReferencePolicy defines how other components should consume the image.",
                    "properties": {
                        "type": {
                            "description": "Type determines how the image pull spec should be transformed when the image stream tag is used in deployment config triggers or new builds. The default value is `Source`, indicating the original location of the image should be used (if imported). The user may also specify `Local`, indicating that the pull spec should point to the integrated container image registry and leverage the registry's ability to proxy the pull to an upstream registry. `Local` allows the credentials used to pull this image to be managed from the image stream's namespace, so others on the platform can access a remote image but have no access to the remote secret. It also allows the image layers to be mirrored into the local registry which the images can still be pulled even if the upstream registry is unavailable.",
                            "type": "string"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "type": "object",
                    "additionalProperties": false
                }
            },
            "required": [
                "name"
            ],
            "type": "object",
            "additionalProperties": false
        }
    },
    "required": [
        "generation",
        "image",
        "lookupPolicy",
        "tag"
    ],
    "type": "object",
    "additionalProperties": false,
    "$schema": "http://json-schema.org/draft-04/schema#"
}
