{
    "description": "PlatformOperator is the Schema for the PlatformOperators API. \n Compatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
    "properties": {
        "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
        },
        "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
        },
        "metadata": {
            "type": "object"
        },
        "spec": {
            "description": "PlatformOperatorSpec defines the desired state of PlatformOperator.",
            "properties": {
                "package": {
                    "description": "package contains the desired package and its configuration for this PlatformOperator.",
                    "properties": {
                        "name": {
                            "description": "name contains the desired OLM-based Operator package name that is defined in an existing CatalogSource resource in the cluster. \n This configured package will be managed with the cluster's lifecycle. In the current implementation, it will be retrieving this name from a list of supported operators out of the catalogs included with OpenShift. \n ---",
                            "maxLength": 56,
                            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?",
                            "type": "string"
                        }
                    },
                    "required": [
                        "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                }
            },
            "required": [
                "package"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "status": {
            "description": "PlatformOperatorStatus defines the observed state of PlatformOperator",
            "properties": {
                "activeBundleDeployment": {
                    "description": "activeBundleDeployment is the reference to the BundleDeployment resource that's being managed by this PO resource. If this field is not populated in the status then it means the PlatformOperator has either not been installed yet or is failing to install.",
                    "properties": {
                        "name": {
                            "description": "name is the metadata.name of the referenced BundleDeployment object.",
                            "type": "string"
                        }
                    },
                    "required": [
                        "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                },
                "conditions": {
                    "description": "conditions represent the latest available observations of a platform operator's current state.",
                    "items": {
                        "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                        "properties": {
                            "lastTransitionTime": {
                                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "message": {
                                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                                "type": "string"
                            },
                            "observedGeneration": {
                                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                                "format": "int64",
                                "type": "integer",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                            },
                            "reason": {
                                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                                "type": "string"
                            },
                            "status": {
                                "description": "status of the condition, one of True, False, Unknown.",
                                "type": "string"
                            },
                            "type": {
                                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                                "type": "string"
                            }
                        },
                        "required": [
                            "lastTransitionTime",
                            "message",
                            "reason",
                            "status",
                            "type"
                        ],
                        "type": "object",
                        "additionalProperties": false
                    },
                    "type": "array",
                    "x-kubernetes-list-map-keys": [
                        "type"
                    ],
                    "x-kubernetes-list-type": "map"
                }
            },
            "type": "object",
            "additionalProperties": false
        }
    },
    "required": [
        "spec"
    ],
    "type": "object",
    "additionalProperties": false,
    "$schema": "http://json-schema.org/draft-04/schema#"
}
