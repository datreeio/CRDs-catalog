{
  "description": "ExperimentTemplate is the Schema for the ExperimentTemplates API. Provides an FIS Experiment Template.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ExperimentTemplateSpec defines the desired state of ExperimentTemplate",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "action": {
              "description": "Action to be performed during an experiment. See below.",
              "items": {
                "properties": {
                  "actionId": {
                    "description": "ID of the action. To find out what actions are supported see AWS FIS actions reference.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the action.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Friendly name of the action.",
                    "type": "string"
                  },
                  "parameter": {
                    "description": "Parameter(s) for the action, if applicable. See below.",
                    "items": {
                      "properties": {
                        "key": {
                          "description": "Parameter name.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Parameter value.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "startAfter": {
                    "description": "Set of action names that must complete before this action can be executed.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  },
                  "target": {
                    "description": "Action's target, if applicable. See below.",
                    "items": {
                      "properties": {
                        "key": {
                          "description": "Tag key.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Target name, referencing a corresponding target.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "description": {
              "description": "Description for the experiment template.",
              "type": "string"
            },
            "experimentOptions": {
              "description": "The experiment options for the experiment template. See experiment_options below for more details!",
              "items": {
                "properties": {
                  "accountTargeting": {
                    "description": "Specifies the account targeting setting for experiment options. Supports single-account and multi-account.",
                    "type": "string"
                  },
                  "emptyTargetResolutionMode": {
                    "description": "Specifies the empty target resolution mode for experiment options. Supports fail and skip.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "logConfiguration": {
              "description": "The configuration for experiment logging. See below.",
              "items": {
                "properties": {
                  "cloudwatchLogsConfiguration": {
                    "description": "The configuration for experiment logging to Amazon CloudWatch Logs. See below.",
                    "items": {
                      "properties": {
                        "logGroupArn": {
                          "description": "The Amazon Resource Name (ARN) of the destination Amazon CloudWatch Logs log group.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "logSchemaVersion": {
                    "description": "The schema version. See documentation for the list of schema versions.",
                    "type": "number"
                  },
                  "s3Configuration": {
                    "description": "The configuration for experiment logging to Amazon S3. See below.",
                    "items": {
                      "properties": {
                        "bucketName": {
                          "description": "The name of the destination bucket.",
                          "type": "string"
                        },
                        "prefix": {
                          "description": "The bucket prefix.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "roleArn": {
              "description": "ARN of an IAM role that grants the AWS FIS service permission to perform service actions on your behalf.",
              "type": "string"
            },
            "roleArnRef": {
              "description": "Reference to a Role in iam to populate roleArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "roleArnSelector": {
              "description": "Selector for a Role in iam to populate roleArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "stopCondition": {
              "description": "When an ongoing experiment should be stopped. See below.",
              "items": {
                "properties": {
                  "source": {
                    "description": "Source of the condition. One of none, aws:cloudwatch:alarm.",
                    "type": "string"
                  },
                  "value": {
                    "description": "ARN of the CloudWatch alarm. Required if the source is a CloudWatch alarm.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "target": {
              "description": "Target of an action. See below.",
              "items": {
                "properties": {
                  "filter": {
                    "description": "Filter(s) for the target. Filters can be used to select resources based on specific attributes returned by the respective describe action of the resource type. For more information, see Targets for AWS FIS. See below.",
                    "items": {
                      "properties": {
                        "path": {
                          "description": "Attribute path for the filter.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Set of attribute values for the filter.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "name": {
                    "description": "Friendly name given to the target.",
                    "type": "string"
                  },
                  "parameters": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "The resource type parameters.",
                    "type": "object",
                    "x-kubernetes-map-type": "granular"
                  },
                  "resourceArns": {
                    "description": "Set of ARNs of the resources to target with an action. Conflicts with resource_tag.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  },
                  "resourceTag": {
                    "description": "Tag(s) the resources need to have to be considered a valid target for an action. Conflicts with resource_arns. See below.",
                    "items": {
                      "properties": {
                        "key": {
                          "description": "Tag key.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Tag value.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "resourceType": {
                    "description": "AWS resource type. The resource type must be supported for the specified action. To find out what resource types are supported, see Targets for AWS FIS.",
                    "type": "string"
                  },
                  "selectionMode": {
                    "description": "Scopes the identified resources. Valid values are ALL (all identified resources), COUNT(n) (randomly select n of the identified resources), PERCENT(n) (randomly select n percent of the identified resources).",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "properties": {
            "action": {
              "description": "Action to be performed during an experiment. See below.",
              "items": {
                "properties": {
                  "actionId": {
                    "description": "ID of the action. To find out what actions are supported see AWS FIS actions reference.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the action.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Friendly name of the action.",
                    "type": "string"
                  },
                  "parameter": {
                    "description": "Parameter(s) for the action, if applicable. See below.",
                    "items": {
                      "properties": {
                        "key": {
                          "description": "Parameter name.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Parameter value.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "startAfter": {
                    "description": "Set of action names that must complete before this action can be executed.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  },
                  "target": {
                    "description": "Action's target, if applicable. See below.",
                    "items": {
                      "properties": {
                        "key": {
                          "description": "Tag key.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Target name, referencing a corresponding target.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "description": {
              "description": "Description for the experiment template.",
              "type": "string"
            },
            "experimentOptions": {
              "description": "The experiment options for the experiment template. See experiment_options below for more details!",
              "items": {
                "properties": {
                  "accountTargeting": {
                    "description": "Specifies the account targeting setting for experiment options. Supports single-account and multi-account.",
                    "type": "string"
                  },
                  "emptyTargetResolutionMode": {
                    "description": "Specifies the empty target resolution mode for experiment options. Supports fail and skip.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "logConfiguration": {
              "description": "The configuration for experiment logging. See below.",
              "items": {
                "properties": {
                  "cloudwatchLogsConfiguration": {
                    "description": "The configuration for experiment logging to Amazon CloudWatch Logs. See below.",
                    "items": {
                      "properties": {
                        "logGroupArn": {
                          "description": "The Amazon Resource Name (ARN) of the destination Amazon CloudWatch Logs log group.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "logSchemaVersion": {
                    "description": "The schema version. See documentation for the list of schema versions.",
                    "type": "number"
                  },
                  "s3Configuration": {
                    "description": "The configuration for experiment logging to Amazon S3. See below.",
                    "items": {
                      "properties": {
                        "bucketName": {
                          "description": "The name of the destination bucket.",
                          "type": "string"
                        },
                        "prefix": {
                          "description": "The bucket prefix.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "roleArn": {
              "description": "ARN of an IAM role that grants the AWS FIS service permission to perform service actions on your behalf.",
              "type": "string"
            },
            "roleArnRef": {
              "description": "Reference to a Role in iam to populate roleArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "roleArnSelector": {
              "description": "Selector for a Role in iam to populate roleArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "stopCondition": {
              "description": "When an ongoing experiment should be stopped. See below.",
              "items": {
                "properties": {
                  "source": {
                    "description": "Source of the condition. One of none, aws:cloudwatch:alarm.",
                    "type": "string"
                  },
                  "value": {
                    "description": "ARN of the CloudWatch alarm. Required if the source is a CloudWatch alarm.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "target": {
              "description": "Target of an action. See below.",
              "items": {
                "properties": {
                  "filter": {
                    "description": "Filter(s) for the target. Filters can be used to select resources based on specific attributes returned by the respective describe action of the resource type. For more information, see Targets for AWS FIS. See below.",
                    "items": {
                      "properties": {
                        "path": {
                          "description": "Attribute path for the filter.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Set of attribute values for the filter.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "name": {
                    "description": "Friendly name given to the target.",
                    "type": "string"
                  },
                  "parameters": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "The resource type parameters.",
                    "type": "object",
                    "x-kubernetes-map-type": "granular"
                  },
                  "resourceArns": {
                    "description": "Set of ARNs of the resources to target with an action. Conflicts with resource_tag.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  },
                  "resourceTag": {
                    "description": "Tag(s) the resources need to have to be considered a valid target for an action. Conflicts with resource_arns. See below.",
                    "items": {
                      "properties": {
                        "key": {
                          "description": "Tag key.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Tag value.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "resourceType": {
                    "description": "AWS resource type. The resource type must be supported for the specified action. To find out what resource types are supported, see Targets for AWS FIS.",
                    "type": "string"
                  },
                  "selectionMode": {
                    "description": "Scopes the identified resources. Valid values are ALL (all identified resources), COUNT(n) (randomly select n of the identified resources), PERCENT(n) (randomly select n percent of the identified resources).",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which\ncontains a name, metadata and a reference to secret store config to\nwhich any connection details for this managed resource should be written.\nConnection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used\nfor this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.annotations\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.labels\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret.\n- Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.\nThis field is planned to be replaced in a future release in favor of\nPublishConnectionDetailsTo. Currently, both could be set independently\nand connection details would be published to both without affecting\neach other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "spec.forProvider.action is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) && has(self.initProvider.action))"
        },
        {
          "message": "spec.forProvider.description is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))"
        },
        {
          "message": "spec.forProvider.stopCondition is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.stopCondition) || (has(self.initProvider) && has(self.initProvider.stopCondition))"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "ExperimentTemplateStatus defines the observed state of ExperimentTemplate.",
      "properties": {
        "atProvider": {
          "properties": {
            "action": {
              "description": "Action to be performed during an experiment. See below.",
              "items": {
                "properties": {
                  "actionId": {
                    "description": "ID of the action. To find out what actions are supported see AWS FIS actions reference.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the action.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Friendly name of the action.",
                    "type": "string"
                  },
                  "parameter": {
                    "description": "Parameter(s) for the action, if applicable. See below.",
                    "items": {
                      "properties": {
                        "key": {
                          "description": "Parameter name.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Parameter value.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "startAfter": {
                    "description": "Set of action names that must complete before this action can be executed.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  },
                  "target": {
                    "description": "Action's target, if applicable. See below.",
                    "items": {
                      "properties": {
                        "key": {
                          "description": "Tag key.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Target name, referencing a corresponding target.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "description": {
              "description": "Description for the experiment template.",
              "type": "string"
            },
            "experimentOptions": {
              "description": "The experiment options for the experiment template. See experiment_options below for more details!",
              "items": {
                "properties": {
                  "accountTargeting": {
                    "description": "Specifies the account targeting setting for experiment options. Supports single-account and multi-account.",
                    "type": "string"
                  },
                  "emptyTargetResolutionMode": {
                    "description": "Specifies the empty target resolution mode for experiment options. Supports fail and skip.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "id": {
              "description": "Experiment Template ID.",
              "type": "string"
            },
            "logConfiguration": {
              "description": "The configuration for experiment logging. See below.",
              "items": {
                "properties": {
                  "cloudwatchLogsConfiguration": {
                    "description": "The configuration for experiment logging to Amazon CloudWatch Logs. See below.",
                    "items": {
                      "properties": {
                        "logGroupArn": {
                          "description": "The Amazon Resource Name (ARN) of the destination Amazon CloudWatch Logs log group.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "logSchemaVersion": {
                    "description": "The schema version. See documentation for the list of schema versions.",
                    "type": "number"
                  },
                  "s3Configuration": {
                    "description": "The configuration for experiment logging to Amazon S3. See below.",
                    "items": {
                      "properties": {
                        "bucketName": {
                          "description": "The name of the destination bucket.",
                          "type": "string"
                        },
                        "prefix": {
                          "description": "The bucket prefix.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "roleArn": {
              "description": "ARN of an IAM role that grants the AWS FIS service permission to perform service actions on your behalf.",
              "type": "string"
            },
            "stopCondition": {
              "description": "When an ongoing experiment should be stopped. See below.",
              "items": {
                "properties": {
                  "source": {
                    "description": "Source of the condition. One of none, aws:cloudwatch:alarm.",
                    "type": "string"
                  },
                  "value": {
                    "description": "ARN of the CloudWatch alarm. Required if the source is a CloudWatch alarm.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "target": {
              "description": "Target of an action. See below.",
              "items": {
                "properties": {
                  "filter": {
                    "description": "Filter(s) for the target. Filters can be used to select resources based on specific attributes returned by the respective describe action of the resource type. For more information, see Targets for AWS FIS. See below.",
                    "items": {
                      "properties": {
                        "path": {
                          "description": "Attribute path for the filter.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Set of attribute values for the filter.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "name": {
                    "description": "Friendly name given to the target.",
                    "type": "string"
                  },
                  "parameters": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "The resource type parameters.",
                    "type": "object",
                    "x-kubernetes-map-type": "granular"
                  },
                  "resourceArns": {
                    "description": "Set of ARNs of the resources to target with an action. Conflicts with resource_tag.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "set"
                  },
                  "resourceTag": {
                    "description": "Tag(s) the resources need to have to be considered a valid target for an action. Conflicts with resource_arns. See below.",
                    "items": {
                      "properties": {
                        "key": {
                          "description": "Tag key.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Tag value.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "resourceType": {
                    "description": "AWS resource type. The resource type must be supported for the specified action. To find out what resource types are supported, see Targets for AWS FIS.",
                    "type": "string"
                  },
                  "selectionMode": {
                    "description": "Scopes the identified resources. Valid values are ALL (all identified resources), COUNT(n) (randomly select n of the identified resources), PERCENT(n) (randomly select n percent of the identified resources).",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
