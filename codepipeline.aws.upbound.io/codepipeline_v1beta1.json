{
  "description": "Codepipeline is the Schema for the Codepipelines API. Provides a CodePipeline",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "CodepipelineSpec defines the desired state of Codepipeline",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "artifactStore": {
              "description": "One or more artifact_store blocks. Artifact stores are documented below.",
              "items": {
                "properties": {
                  "encryptionKey": {
                    "description": "The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An encryption_key block is documented below.",
                    "items": {
                      "properties": {
                        "id": {
                          "description": "The KMS key ARN or ID",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of key; currently only KMS is supported",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "location": {
                    "description": "The location where AWS CodePipeline stores artifacts for a pipeline; currently only S3 is supported.",
                    "type": "string"
                  },
                  "locationRef": {
                    "description": "Reference to a Bucket in s3 to populate location.",
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "locationSelector": {
                    "description": "Selector for a Bucket in s3 to populate location.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "region": {
                    "description": "The region where the artifact store is located. Required for a cross-region CodePipeline, do not provide for a single-region CodePipeline.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the artifact store, such as Amazon S3",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "executionMode": {
              "description": "The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED. For value values, refer to the AWS documentation.",
              "type": "string"
            },
            "pipelineType": {
              "description": "Type of the pipeline. Possible values are: V1 and V2. Default value is V1.",
              "type": "string"
            },
            "region": {
              "description": "The region in which to run the action.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "roleArn": {
              "description": "A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.",
              "type": "string"
            },
            "roleArnRef": {
              "description": "Reference to a Role in iam to populate roleArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "roleArnSelector": {
              "description": "Selector for a Role in iam to populate roleArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "stage": {
              "description": "(Minimum of at least two stage blocks is required) A stage block. Stages are documented below.",
              "items": {
                "properties": {
                  "action": {
                    "description": "The action(s) to include in the stage. Defined as an action block below",
                    "items": {
                      "properties": {
                        "category": {
                          "description": "A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are Approval, Build, Deploy, Invoke, Source and Test.",
                          "type": "string"
                        },
                        "configuration": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "A map of the action declaration's configuration. Configurations options for action types and providers can be found in the Pipeline Structure Reference and Action Structure Reference documentation.",
                          "type": "object",
                          "x-kubernetes-map-type": "granular"
                        },
                        "inputArtifacts": {
                          "description": "A list of artifact names to be worked on.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "name": {
                          "description": "The action declaration's name.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "The namespace all output variables will be accessed from.",
                          "type": "string"
                        },
                        "outputArtifacts": {
                          "description": "A list of artifact names to output. Output artifact names must be unique within a pipeline.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "owner": {
                          "description": "The creator of the action being called. Possible values are AWS, Custom and ThirdParty.",
                          "type": "string"
                        },
                        "provider": {
                          "description": "The provider of the service being called by the action. Valid providers are determined by the action category. Provider names are listed in the Action Structure Reference documentation.",
                          "type": "string"
                        },
                        "region": {
                          "description": "The region in which to run the action.",
                          "type": "string"
                        },
                        "roleArn": {
                          "description": "The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.",
                          "type": "string"
                        },
                        "runOrder": {
                          "description": "The order in which actions are run.",
                          "type": "number"
                        },
                        "timeoutInMinutes": {
                          "type": "number"
                        },
                        "version": {
                          "description": "A string that identifies the action type.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "name": {
                    "description": "The name of the stage.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "trigger": {
              "description": "A trigger block. Valid only when pipeline_type is V2. Triggers are documented below.",
              "items": {
                "properties": {
                  "gitConfiguration": {
                    "description": "Provides the filter criteria and the source stage for the repository event that starts the pipeline. For more information, refer to the AWS documentation. A git_configuration block is documented below.",
                    "items": {
                      "properties": {
                        "pullRequest": {
                          "description": "The field where the repository event that will start the pipeline is specified as pull requests. A pull_request block is documented below.",
                          "items": {
                            "properties": {
                              "branches": {
                                "description": "The field that specifies to filter on branches for the pull request trigger configuration. A branches block is documented below.",
                                "items": {
                                  "properties": {
                                    "excludes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "includes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "events": {
                                "description": "A list that specifies which pull request events to filter on (opened, updated, closed) for the trigger configuration. Possible values are OPEN, UPDATED  and CLOSED.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "filePaths": {
                                "description": "The field that specifies to filter on file paths for the pull request trigger configuration. A file_paths block is documented below.",
                                "items": {
                                  "properties": {
                                    "excludes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "includes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "push": {
                          "description": "The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details. A push block is documented below.",
                          "items": {
                            "properties": {
                              "branches": {
                                "description": "The field that specifies to filter on branches for the pull request trigger configuration. A branches block is documented below.",
                                "items": {
                                  "properties": {
                                    "excludes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "includes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "filePaths": {
                                "description": "The field that specifies to filter on file paths for the pull request trigger configuration. A file_paths block is documented below.",
                                "items": {
                                  "properties": {
                                    "excludes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "includes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "tags": {
                                "description": "Key-value map of resource tags.",
                                "items": {
                                  "properties": {
                                    "excludes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "includes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "sourceActionName": {
                          "description": "The name of the pipeline source action where the trigger configuration.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "providerType": {
                    "description": "The source provider for the event. Possible value is CodeStarSourceConnection.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "variable": {
              "description": "A pipeline-level variable block. Valid only when pipeline_type is V2. Variable are documented below.",
              "items": {
                "properties": {
                  "defaultValue": {
                    "description": "The default value of a pipeline-level variable.",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of a pipeline-level variable.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of a pipeline-level variable.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "properties": {
            "artifactStore": {
              "description": "One or more artifact_store blocks. Artifact stores are documented below.",
              "items": {
                "properties": {
                  "encryptionKey": {
                    "description": "The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An encryption_key block is documented below.",
                    "items": {
                      "properties": {
                        "id": {
                          "description": "The KMS key ARN or ID",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of key; currently only KMS is supported",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "location": {
                    "description": "The location where AWS CodePipeline stores artifacts for a pipeline; currently only S3 is supported.",
                    "type": "string"
                  },
                  "locationRef": {
                    "description": "Reference to a Bucket in s3 to populate location.",
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "locationSelector": {
                    "description": "Selector for a Bucket in s3 to populate location.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": {
                    "description": "The type of the artifact store, such as Amazon S3",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "executionMode": {
              "description": "The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED. For value values, refer to the AWS documentation.",
              "type": "string"
            },
            "pipelineType": {
              "description": "Type of the pipeline. Possible values are: V1 and V2. Default value is V1.",
              "type": "string"
            },
            "roleArn": {
              "description": "A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.",
              "type": "string"
            },
            "roleArnRef": {
              "description": "Reference to a Role in iam to populate roleArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "roleArnSelector": {
              "description": "Selector for a Role in iam to populate roleArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "stage": {
              "description": "(Minimum of at least two stage blocks is required) A stage block. Stages are documented below.",
              "items": {
                "properties": {
                  "action": {
                    "description": "The action(s) to include in the stage. Defined as an action block below",
                    "items": {
                      "properties": {
                        "category": {
                          "description": "A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are Approval, Build, Deploy, Invoke, Source and Test.",
                          "type": "string"
                        },
                        "configuration": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "A map of the action declaration's configuration. Configurations options for action types and providers can be found in the Pipeline Structure Reference and Action Structure Reference documentation.",
                          "type": "object",
                          "x-kubernetes-map-type": "granular"
                        },
                        "inputArtifacts": {
                          "description": "A list of artifact names to be worked on.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "name": {
                          "description": "The action declaration's name.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "The namespace all output variables will be accessed from.",
                          "type": "string"
                        },
                        "outputArtifacts": {
                          "description": "A list of artifact names to output. Output artifact names must be unique within a pipeline.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "owner": {
                          "description": "The creator of the action being called. Possible values are AWS, Custom and ThirdParty.",
                          "type": "string"
                        },
                        "provider": {
                          "description": "The provider of the service being called by the action. Valid providers are determined by the action category. Provider names are listed in the Action Structure Reference documentation.",
                          "type": "string"
                        },
                        "roleArn": {
                          "description": "The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.",
                          "type": "string"
                        },
                        "runOrder": {
                          "description": "The order in which actions are run.",
                          "type": "number"
                        },
                        "timeoutInMinutes": {
                          "type": "number"
                        },
                        "version": {
                          "description": "A string that identifies the action type.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "name": {
                    "description": "The name of the stage.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "trigger": {
              "description": "A trigger block. Valid only when pipeline_type is V2. Triggers are documented below.",
              "items": {
                "properties": {
                  "gitConfiguration": {
                    "description": "Provides the filter criteria and the source stage for the repository event that starts the pipeline. For more information, refer to the AWS documentation. A git_configuration block is documented below.",
                    "items": {
                      "properties": {
                        "pullRequest": {
                          "description": "The field where the repository event that will start the pipeline is specified as pull requests. A pull_request block is documented below.",
                          "items": {
                            "properties": {
                              "branches": {
                                "description": "The field that specifies to filter on branches for the pull request trigger configuration. A branches block is documented below.",
                                "items": {
                                  "properties": {
                                    "excludes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "includes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "events": {
                                "description": "A list that specifies which pull request events to filter on (opened, updated, closed) for the trigger configuration. Possible values are OPEN, UPDATED  and CLOSED.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "filePaths": {
                                "description": "The field that specifies to filter on file paths for the pull request trigger configuration. A file_paths block is documented below.",
                                "items": {
                                  "properties": {
                                    "excludes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "includes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "push": {
                          "description": "The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details. A push block is documented below.",
                          "items": {
                            "properties": {
                              "branches": {
                                "description": "The field that specifies to filter on branches for the pull request trigger configuration. A branches block is documented below.",
                                "items": {
                                  "properties": {
                                    "excludes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "includes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "filePaths": {
                                "description": "The field that specifies to filter on file paths for the pull request trigger configuration. A file_paths block is documented below.",
                                "items": {
                                  "properties": {
                                    "excludes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "includes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "tags": {
                                "description": "Key-value map of resource tags.",
                                "items": {
                                  "properties": {
                                    "excludes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "includes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "sourceActionName": {
                          "description": "The name of the pipeline source action where the trigger configuration.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "providerType": {
                    "description": "The source provider for the event. Possible value is CodeStarSourceConnection.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "variable": {
              "description": "A pipeline-level variable block. Valid only when pipeline_type is V2. Variable are documented below.",
              "items": {
                "properties": {
                  "defaultValue": {
                    "description": "The default value of a pipeline-level variable.",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of a pipeline-level variable.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of a pipeline-level variable.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which\ncontains a name, metadata and a reference to secret store config to\nwhich any connection details for this managed resource should be written.\nConnection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used\nfor this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.annotations\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.labels\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret.\n- Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.\nThis field is planned to be replaced in a future release in favor of\nPublishConnectionDetailsTo. Currently, both could be set independently\nand connection details would be published to both without affecting\neach other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "spec.forProvider.artifactStore is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.artifactStore) || (has(self.initProvider) && has(self.initProvider.artifactStore))"
        },
        {
          "message": "spec.forProvider.stage is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.stage) || (has(self.initProvider) && has(self.initProvider.stage))"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "CodepipelineStatus defines the observed state of Codepipeline.",
      "properties": {
        "atProvider": {
          "properties": {
            "arn": {
              "description": "The codepipeline ARN.",
              "type": "string"
            },
            "artifactStore": {
              "description": "One or more artifact_store blocks. Artifact stores are documented below.",
              "items": {
                "properties": {
                  "encryptionKey": {
                    "description": "The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An encryption_key block is documented below.",
                    "items": {
                      "properties": {
                        "id": {
                          "description": "The KMS key ARN or ID",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of key; currently only KMS is supported",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "location": {
                    "description": "The location where AWS CodePipeline stores artifacts for a pipeline; currently only S3 is supported.",
                    "type": "string"
                  },
                  "region": {
                    "description": "The region where the artifact store is located. Required for a cross-region CodePipeline, do not provide for a single-region CodePipeline.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the artifact store, such as Amazon S3",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "executionMode": {
              "description": "The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED. For value values, refer to the AWS documentation.",
              "type": "string"
            },
            "id": {
              "description": "The codepipeline ID.",
              "type": "string"
            },
            "pipelineType": {
              "description": "Type of the pipeline. Possible values are: V1 and V2. Default value is V1.",
              "type": "string"
            },
            "roleArn": {
              "description": "A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.",
              "type": "string"
            },
            "stage": {
              "description": "(Minimum of at least two stage blocks is required) A stage block. Stages are documented below.",
              "items": {
                "properties": {
                  "action": {
                    "description": "The action(s) to include in the stage. Defined as an action block below",
                    "items": {
                      "properties": {
                        "category": {
                          "description": "A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are Approval, Build, Deploy, Invoke, Source and Test.",
                          "type": "string"
                        },
                        "configuration": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "A map of the action declaration's configuration. Configurations options for action types and providers can be found in the Pipeline Structure Reference and Action Structure Reference documentation.",
                          "type": "object",
                          "x-kubernetes-map-type": "granular"
                        },
                        "inputArtifacts": {
                          "description": "A list of artifact names to be worked on.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "name": {
                          "description": "The action declaration's name.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "The namespace all output variables will be accessed from.",
                          "type": "string"
                        },
                        "outputArtifacts": {
                          "description": "A list of artifact names to output. Output artifact names must be unique within a pipeline.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "owner": {
                          "description": "The creator of the action being called. Possible values are AWS, Custom and ThirdParty.",
                          "type": "string"
                        },
                        "provider": {
                          "description": "The provider of the service being called by the action. Valid providers are determined by the action category. Provider names are listed in the Action Structure Reference documentation.",
                          "type": "string"
                        },
                        "region": {
                          "description": "The region in which to run the action.",
                          "type": "string"
                        },
                        "roleArn": {
                          "description": "The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.",
                          "type": "string"
                        },
                        "runOrder": {
                          "description": "The order in which actions are run.",
                          "type": "number"
                        },
                        "timeoutInMinutes": {
                          "type": "number"
                        },
                        "version": {
                          "description": "A string that identifies the action type.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "name": {
                    "description": "The name of the stage.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "trigger": {
              "description": "A trigger block. Valid only when pipeline_type is V2. Triggers are documented below.",
              "items": {
                "properties": {
                  "gitConfiguration": {
                    "description": "Provides the filter criteria and the source stage for the repository event that starts the pipeline. For more information, refer to the AWS documentation. A git_configuration block is documented below.",
                    "items": {
                      "properties": {
                        "pullRequest": {
                          "description": "The field where the repository event that will start the pipeline is specified as pull requests. A pull_request block is documented below.",
                          "items": {
                            "properties": {
                              "branches": {
                                "description": "The field that specifies to filter on branches for the pull request trigger configuration. A branches block is documented below.",
                                "items": {
                                  "properties": {
                                    "excludes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "includes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "events": {
                                "description": "A list that specifies which pull request events to filter on (opened, updated, closed) for the trigger configuration. Possible values are OPEN, UPDATED  and CLOSED.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "filePaths": {
                                "description": "The field that specifies to filter on file paths for the pull request trigger configuration. A file_paths block is documented below.",
                                "items": {
                                  "properties": {
                                    "excludes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "includes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "push": {
                          "description": "The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details. A push block is documented below.",
                          "items": {
                            "properties": {
                              "branches": {
                                "description": "The field that specifies to filter on branches for the pull request trigger configuration. A branches block is documented below.",
                                "items": {
                                  "properties": {
                                    "excludes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "includes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "filePaths": {
                                "description": "The field that specifies to filter on file paths for the pull request trigger configuration. A file_paths block is documented below.",
                                "items": {
                                  "properties": {
                                    "excludes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "includes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "tags": {
                                "description": "Key-value map of resource tags.",
                                "items": {
                                  "properties": {
                                    "excludes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "includes": {
                                      "description": "A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "sourceActionName": {
                          "description": "The name of the pipeline source action where the trigger configuration.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "providerType": {
                    "description": "The source provider for the event. Possible value is CodeStarSourceConnection.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "variable": {
              "description": "A pipeline-level variable block. Valid only when pipeline_type is V2. Variable are documented below.",
              "items": {
                "properties": {
                  "defaultValue": {
                    "description": "The default value of a pipeline-level variable.",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of a pipeline-level variable.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of a pipeline-level variable.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
