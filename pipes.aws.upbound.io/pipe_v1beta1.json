{
  "description": "Pipe is the Schema for the Pipes API.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "PipeSpec defines the desired state of Pipe",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "description": {
              "description": "A description of the pipe. At most 512 characters.",
              "type": "string"
            },
            "desiredState": {
              "description": "The state the pipe should be in. One of: RUNNING, STOPPED.",
              "type": "string"
            },
            "enrichment": {
              "description": "Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the User Guide.",
              "type": "string"
            },
            "enrichmentParameters": {
              "description": "Parameters to configure enrichment for your pipe. Detailed below.",
              "properties": {
                "httpParameters": {
                  "description": "Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination. If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence. Detailed below.",
                  "properties": {
                    "headerParameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    },
                    "pathParameterValues": {
                      "description": "The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards (\"*\").",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "queryStringParameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "inputTemplate": {
                  "description": "Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "enrichmentRef": {
              "description": "Reference to a APIDestination in cloudwatchevents to populate enrichment.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "enrichmentSelector": {
              "description": "Selector for a APIDestination in cloudwatchevents to populate enrichment.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "logConfiguration": {
              "description": "Logging configuration settings for the pipe. Detailed below.",
              "properties": {
                "cloudwatchLogsLogDestination": {
                  "description": "Amazon CloudWatch Logs logging configuration settings for the pipe. Detailed below.",
                  "properties": {
                    "logGroupArn": {
                      "description": "Amazon Web Services Resource Name (ARN) for the CloudWatch log group to which EventBridge sends the log records.",
                      "type": "string"
                    },
                    "logGroupArnRef": {
                      "description": "Reference to a Group in cloudwatchlogs to populate logGroupArn.",
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "logGroupArnSelector": {
                      "description": "Selector for a Group in cloudwatchlogs to populate logGroupArn.",
                      "properties": {
                        "matchControllerRef": {
                          "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                          "type": "boolean"
                        },
                        "matchLabels": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "MatchLabels ensures an object with matching labels is selected.",
                          "type": "object"
                        },
                        "policy": {
                          "description": "Policies for selection.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "firehoseLogDestination": {
                  "description": "Amazon Kinesis Data Firehose logging configuration settings for the pipe. Detailed below.",
                  "properties": {
                    "deliveryStreamArn": {
                      "description": "Amazon Resource Name (ARN) of the Kinesis Data Firehose delivery stream to which EventBridge delivers the pipe log records.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "includeExecutionData": {
                  "description": "String list that specifies whether the execution data (specifically, the payload, awsRequest, and awsResponse fields) is included in the log messages for this pipe. This applies to all log destinations for the pipe. Valid values ALL.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                },
                "level": {
                  "description": "The level of logging detail to include. Valid values OFF, ERROR, INFO and TRACE.",
                  "type": "string"
                },
                "s3LogDestination": {
                  "description": "Amazon S3 logging configuration settings for the pipe. Detailed below.",
                  "properties": {
                    "bucketName": {
                      "description": "Name of the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.",
                      "type": "string"
                    },
                    "bucketOwner": {
                      "description": "Amazon Web Services account that owns the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.",
                      "type": "string"
                    },
                    "outputFormat": {
                      "description": "EventBridge format for the log records. Valid values json, plain and w3c.",
                      "type": "string"
                    },
                    "prefix": {
                      "description": "Prefix text with which to begin Amazon S3 log object names.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "roleArn": {
              "description": "ARN of the role that allows the pipe to send data to the target.",
              "type": "string"
            },
            "roleArnRef": {
              "description": "Reference to a Role in iam to populate roleArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "roleArnSelector": {
              "description": "Selector for a Role in iam to populate roleArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "source": {
              "description": "Source resource of the pipe. This field typically requires an ARN (Amazon Resource Name). However, when using a self-managed Kafka cluster, you should use a different format. Instead of an ARN, use 'smk://' followed by the bootstrap server's address.",
              "type": "string"
            },
            "sourceParameters": {
              "description": "Parameters to configure a source for the pipe. Detailed below.",
              "properties": {
                "activemqBrokerParameters": {
                  "description": "The parameters for using an Active MQ broker as a source. Detailed below.",
                  "properties": {
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "credentials": {
                      "description": "The credentials needed to access the resource. Detailed below.",
                      "properties": {
                        "basicAuth": {
                          "description": "The ARN of the Secrets Manager secret containing the basic auth credentials.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    },
                    "queueName": {
                      "description": "The name of the destination queue to consume. Maximum length of 1000.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "dynamodbStreamParameters": {
                  "description": "The parameters for using a DynamoDB stream as a source.  Detailed below.",
                  "properties": {
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "deadLetterConfig": {
                      "description": "Define the target queue to send dead-letter queue events to. Detailed below.",
                      "properties": {
                        "arn": {
                          "description": "The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    },
                    "maximumRecordAgeInSeconds": {
                      "description": "Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.",
                      "type": "number"
                    },
                    "maximumRetryAttempts": {
                      "description": "Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.",
                      "type": "number"
                    },
                    "onPartialBatchItemFailure": {
                      "description": "Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.",
                      "type": "string"
                    },
                    "parallelizationFactor": {
                      "description": "The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.",
                      "type": "number"
                    },
                    "startingPosition": {
                      "description": "The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "filterCriteria": {
                  "description": "The collection of event patterns used to filter events. Detailed below.",
                  "properties": {
                    "filter": {
                      "description": "An array of up to 5 event patterns. Detailed below.",
                      "items": {
                        "properties": {
                          "pattern": {
                            "description": "The event pattern. At most 4096 characters.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "kinesisStreamParameters": {
                  "description": "The parameters for using a Kinesis stream as a source. Detailed below.",
                  "properties": {
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "deadLetterConfig": {
                      "description": "Define the target queue to send dead-letter queue events to. Detailed below.",
                      "properties": {
                        "arn": {
                          "description": "The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    },
                    "maximumRecordAgeInSeconds": {
                      "description": "Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.",
                      "type": "number"
                    },
                    "maximumRetryAttempts": {
                      "description": "Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.",
                      "type": "number"
                    },
                    "onPartialBatchItemFailure": {
                      "description": "Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.",
                      "type": "string"
                    },
                    "parallelizationFactor": {
                      "description": "The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.",
                      "type": "number"
                    },
                    "startingPosition": {
                      "description": "The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST, AT_TIMESTAMP.",
                      "type": "string"
                    },
                    "startingPositionTimestamp": {
                      "description": "With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "managedStreamingKafkaParameters": {
                  "description": "The parameters for using an MSK stream as a source. Detailed below.",
                  "properties": {
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "consumerGroupId": {
                      "description": "The name of the destination queue to consume. Maximum value of 200.",
                      "type": "string"
                    },
                    "credentials": {
                      "description": "The credentials needed to access the resource. Detailed below.",
                      "properties": {
                        "clientCertificateTlsAuth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        },
                        "saslScram512Auth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    },
                    "startingPosition": {
                      "description": "The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.",
                      "type": "string"
                    },
                    "topicName": {
                      "description": "The name of the topic that the pipe will read from. Maximum length of 249.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "rabbitmqBrokerParameters": {
                  "description": "The parameters for using a Rabbit MQ broker as a source. Detailed below.",
                  "properties": {
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "credentials": {
                      "description": "The credentials needed to access the resource. Detailed below.",
                      "properties": {
                        "basicAuth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    },
                    "queueName": {
                      "description": "The name of the destination queue to consume. Maximum length of 1000.",
                      "type": "string"
                    },
                    "virtualHost": {
                      "description": "The name of the virtual host associated with the source broker. Maximum length of 200.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "selfManagedKafkaParameters": {
                  "description": "The parameters for using a self-managed Apache Kafka stream as a source. Detailed below.",
                  "properties": {
                    "additionalBootstrapServers": {
                      "description": "An array of server URLs. Maximum number of 2 items, each of maximum length 300.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "x-kubernetes-list-type": "set"
                    },
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "consumerGroupId": {
                      "description": "The name of the destination queue to consume. Maximum value of 200.",
                      "type": "string"
                    },
                    "credentials": {
                      "description": "The credentials needed to access the resource. Detailed below.",
                      "properties": {
                        "basicAuth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        },
                        "clientCertificateTlsAuth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        },
                        "saslScram256Auth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        },
                        "saslScram512Auth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    },
                    "serverRootCaCertificate": {
                      "description": "The ARN of the Secrets Manager secret used for certification.",
                      "type": "string"
                    },
                    "startingPosition": {
                      "description": "The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.",
                      "type": "string"
                    },
                    "topicName": {
                      "description": "The name of the topic that the pipe will read from. Maximum length of 249.",
                      "type": "string"
                    },
                    "vpc": {
                      "description": "This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used. Detailed below.",
                      "properties": {
                        "securityGroups": {
                          "description": "List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        },
                        "subnets": {
                          "description": "List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "sqsQueueParameters": {
                  "description": "The parameters for using a Amazon SQS stream as a source. Detailed below.",
                  "properties": {
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "sourceRef": {
              "description": "Reference to a Queue in sqs to populate source.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "sourceSelector": {
              "description": "Selector for a Queue in sqs to populate source.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "target": {
              "description": "Target resource of the pipe (typically an ARN).",
              "type": "string"
            },
            "targetParameters": {
              "description": "Parameters to configure a target for your pipe. Detailed below.",
              "properties": {
                "batchJobParameters": {
                  "description": "The parameters for using an AWS Batch job as a target. Detailed below.",
                  "properties": {
                    "arrayProperties": {
                      "description": "The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job. Detailed below.",
                      "properties": {
                        "size": {
                          "description": "The size of the array, if this is an array batch job. Minimum value of 2. Maximum value of 10,000.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "containerOverrides": {
                      "description": "The overrides that are sent to a container. Detailed below.",
                      "properties": {
                        "command": {
                          "description": "List of commands to send to the container that overrides the default command from the Docker image or the task definition.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "environment": {
                          "description": "The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. Environment variables cannot start with \" AWS Batch \". This naming convention is reserved for variables that AWS Batch sets. Detailed below.",
                          "items": {
                            "properties": {
                              "name": {
                                "description": "The name of the key-value pair. For environment variables, this is the name of the environment variable.",
                                "type": "string"
                              },
                              "value": {
                                "description": "The value of the key-value pair. For environment variables, this is the value of the environment variable.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "instanceType": {
                          "description": "The instance type to use for a multi-node parallel job. This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.",
                          "type": "string"
                        },
                        "resourceRequirement": {
                          "description": "The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU. Detailed below.",
                          "items": {
                            "properties": {
                              "type": {
                                "description": "The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.",
                                "type": "string"
                              },
                              "value": {
                                "description": "The quantity of the specified resource to reserve for the container. The values vary based on the type specified.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "dependsOn": {
                      "description": "A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin. Detailed below.",
                      "items": {
                        "properties": {
                          "jobId": {
                            "description": "The job ID of the AWS Batch job that's associated with this dependency.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the job dependency. Valid Values: N_TO_N, SEQUENTIAL.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "jobDefinition": {
                      "description": "The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.",
                      "type": "string"
                    },
                    "jobName": {
                      "description": "The name of the job. It can be up to 128 letters long.",
                      "type": "string"
                    },
                    "parameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition. Detailed below.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    },
                    "retryStrategy": {
                      "description": "The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition. Detailed below.",
                      "properties": {
                        "attempts": {
                          "description": "The number of times to move a job to the RUNNABLE status. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value. Maximum value of 10.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "cloudwatchLogsParameters": {
                  "description": "The parameters for using an CloudWatch Logs log stream as a target. Detailed below.",
                  "properties": {
                    "logStreamName": {
                      "description": "The name of the log stream.",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. This is the JSON path to the field in the event e.g. $.detail.timestamp",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "ecsTaskParameters": {
                  "description": "The parameters for using an Amazon ECS task as a target. Detailed below.",
                  "properties": {
                    "capacityProviderStrategy": {
                      "description": "List of capacity provider strategies to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. Detailed below.",
                      "items": {
                        "properties": {
                          "base": {
                            "description": "The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. Maximum value of 100,000.",
                            "type": "number"
                          },
                          "capacityProvider": {
                            "description": "The short name of the capacity provider. Maximum value of 255.",
                            "type": "string"
                          },
                          "weight": {
                            "description": "The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Maximum value of 1,000.",
                            "type": "number"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "enableEcsManagedTags": {
                      "description": "Specifies whether to enable Amazon ECS managed tags for the task. Valid values: true, false.",
                      "type": "boolean"
                    },
                    "enableExecuteCommand": {
                      "description": "Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task. Valid values: true, false.",
                      "type": "boolean"
                    },
                    "group": {
                      "description": "Specifies an Amazon ECS task group for the task. The maximum length is 255 characters.",
                      "type": "string"
                    },
                    "launchType": {
                      "description": "Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. Valid Values: EC2, FARGATE, EXTERNAL",
                      "type": "string"
                    },
                    "networkConfiguration": {
                      "description": "Use this structure if the Amazon ECS task uses the awsvpc network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if LaunchType is FARGATE because the awsvpc mode is required for Fargate tasks. If you specify NetworkConfiguration when the target ECS task does not use the awsvpc network mode, the task fails. Detailed below.",
                      "properties": {
                        "awsVpcConfiguration": {
                          "description": "Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode. Detailed below.",
                          "properties": {
                            "assignPublicIp": {
                              "description": "Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE. Valid Values: ENABLED, DISABLED.",
                              "type": "string"
                            },
                            "securityGroups": {
                              "description": "Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "x-kubernetes-list-type": "set"
                            },
                            "subnets": {
                              "description": "Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "x-kubernetes-list-type": "set"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "overrides": {
                      "description": "The overrides that are associated with a task. Detailed below.",
                      "properties": {
                        "containerOverride": {
                          "description": "One or more container overrides that are sent to a task. Detailed below.",
                          "items": {
                            "properties": {
                              "command": {
                                "description": "List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "cpu": {
                                "description": "The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.",
                                "type": "number"
                              },
                              "environment": {
                                "description": "The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.",
                                "items": {
                                  "properties": {
                                    "name": {
                                      "description": "The name of the key-value pair. For environment variables, this is the name of the environment variable.",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The value of the key-value pair. For environment variables, this is the value of the environment variable.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "environmentFile": {
                                "description": "A list of files containing the environment variables to pass to a container, instead of the value from the container definition. Detailed below.",
                                "items": {
                                  "properties": {
                                    "type": {
                                      "description": "The file type to use. The only supported value is s3.",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "memory": {
                                "description": "The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.",
                                "type": "number"
                              },
                              "memoryReservation": {
                                "description": "The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.",
                                "type": "number"
                              },
                              "name": {
                                "description": "The name of the container that receives the override. This parameter is required if any override is specified.",
                                "type": "string"
                              },
                              "resourceRequirement": {
                                "description": "The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.",
                                "items": {
                                  "properties": {
                                    "type": {
                                      "description": "The type of resource to assign to a container. The supported values are GPU or InferenceAccelerator.",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The value for the specified resource type. If the GPU type is used, the value is the number of physical GPUs the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on. If the InferenceAccelerator type is used, the value matches the deviceName for an InferenceAccelerator specified in a task definition.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "cpu": {
                          "description": "The cpu override for the task.",
                          "type": "string"
                        },
                        "ephemeralStorage": {
                          "description": "The ephemeral storage setting override for the task.  Detailed below.",
                          "properties": {
                            "sizeInGib": {
                              "description": "The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.",
                              "type": "number"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "executionRoleArn": {
                          "description": "The Amazon Resource Name (ARN) of the task execution IAM role override for the task.",
                          "type": "string"
                        },
                        "inferenceAcceleratorOverride": {
                          "description": "List of Elastic Inference accelerator overrides for the task. Detailed below.",
                          "items": {
                            "properties": {
                              "deviceName": {
                                "description": "The Elastic Inference accelerator device name to override for the task. This parameter must match a deviceName specified in the task definition.",
                                "type": "string"
                              },
                              "deviceType": {
                                "description": "The Elastic Inference accelerator type to use.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "memory": {
                          "description": "The memory override for the task.",
                          "type": "string"
                        },
                        "taskRoleArn": {
                          "description": "The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "placementConstraint": {
                      "description": "An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). Detailed below.",
                      "items": {
                        "properties": {
                          "expression": {
                            "description": "A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. Maximum length of 2,000.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates. Valid Values: distinctInstance, memberOf.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "placementStrategy": {
                      "description": "The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. Detailed below.",
                      "items": {
                        "properties": {
                          "field": {
                            "description": "The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used. Maximum length of 255.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "platformVersion": {
                      "description": "Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This structure is used only if LaunchType is FARGATE.",
                      "type": "string"
                    },
                    "propagateTags": {
                      "description": "Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. Valid Values: TASK_DEFINITION",
                      "type": "string"
                    },
                    "referenceId": {
                      "description": "The reference ID to use for the task. Maximum length of 1,024.",
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Key-value map of tags that you apply to the task to help you categorize and organize them.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    },
                    "taskCount": {
                      "description": "The number of tasks to create based on TaskDefinition. The default is 1.",
                      "type": "number"
                    },
                    "taskDefinitionArn": {
                      "description": "The ARN of the task definition to use if the event target is an Amazon ECS task.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "eventbridgeEventBusParameters": {
                  "description": "The parameters for using an EventBridge event bus as a target. Detailed below.",
                  "properties": {
                    "detailType": {
                      "description": "A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.",
                      "type": "string"
                    },
                    "endpointId": {
                      "description": "The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is abcde.veo.",
                      "type": "string"
                    },
                    "resources": {
                      "description": "List of AWS resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "x-kubernetes-list-type": "set"
                    },
                    "source": {
                      "description": "The source of the event. Maximum length of 256.",
                      "type": "string"
                    },
                    "time": {
                      "description": "The time stamp of the event, per RFC3339. If no time stamp is provided, the time stamp of the PutEvents call is used. This is the JSON path to the field in the event e.g. $.detail.timestamp",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "httpParameters": {
                  "description": "These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations. Detailed below.",
                  "properties": {
                    "headerParameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination. Detailed below.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    },
                    "pathParameterValues": {
                      "description": "The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards (\"*\").",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "queryStringParameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination. Detailed below.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "inputTemplate": {
                  "description": "Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.",
                  "type": "string"
                },
                "kinesisStreamParameters": {
                  "description": "The parameters for using a Kinesis stream as a source. Detailed below.",
                  "properties": {
                    "partitionKey": {
                      "description": "Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "lambdaFunctionParameters": {
                  "description": "The parameters for using a Lambda function as a target. Detailed below.",
                  "properties": {
                    "invocationType": {
                      "description": "Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "redshiftDataParameters": {
                  "description": "These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API BatchExecuteStatement. Detailed below.",
                  "properties": {
                    "database": {
                      "description": "The name of the database. Required when authenticating using temporary credentials.",
                      "type": "string"
                    },
                    "dbUser": {
                      "description": "The database user name. Required when authenticating using temporary credentials.",
                      "type": "string"
                    },
                    "secretManagerArn": {
                      "description": "The name or ARN of the secret that enables access to the database. Required when authenticating using Secrets Manager.",
                      "type": "string"
                    },
                    "sqls": {
                      "description": "List of SQL statements text to run, each of maximum length of 100,000.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "x-kubernetes-list-type": "set"
                    },
                    "statementName": {
                      "description": "The name of the SQL statement. You can name the SQL statement when you create it to identify the query.",
                      "type": "string"
                    },
                    "withEvent": {
                      "description": "Indicates whether to send an event back to EventBridge after the SQL statement runs.",
                      "type": "boolean"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "sagemakerPipelineParameters": {
                  "description": "The parameters for using a SageMaker pipeline as a target. Detailed below.",
                  "properties": {
                    "pipelineParameter": {
                      "description": "List of Parameter names and values for SageMaker Model Building Pipeline execution. Detailed below.",
                      "items": {
                        "properties": {
                          "name": {
                            "description": "The name of the container that receives the override. This parameter is required if any override is specified.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "sqsQueueParameters": {
                  "description": "The parameters for using a Amazon SQS stream as a target. Detailed below.",
                  "properties": {
                    "messageDeduplicationId": {
                      "description": "This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of sent messages.",
                      "type": "string"
                    },
                    "messageGroupId": {
                      "description": "The FIFO message group ID to use as the target.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "stepFunctionStateMachineParameters": {
                  "description": "The parameters for using a Step Functions state machine as a target. Detailed below.",
                  "properties": {
                    "invocationType": {
                      "description": "Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "targetRef": {
              "description": "Reference to a Queue in sqs to populate target.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "targetSelector": {
              "description": "Selector for a Queue in sqs to populate target.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "properties": {
            "description": {
              "description": "A description of the pipe. At most 512 characters.",
              "type": "string"
            },
            "desiredState": {
              "description": "The state the pipe should be in. One of: RUNNING, STOPPED.",
              "type": "string"
            },
            "enrichment": {
              "description": "Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the User Guide.",
              "type": "string"
            },
            "enrichmentParameters": {
              "description": "Parameters to configure enrichment for your pipe. Detailed below.",
              "properties": {
                "httpParameters": {
                  "description": "Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination. If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence. Detailed below.",
                  "properties": {
                    "headerParameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    },
                    "pathParameterValues": {
                      "description": "The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards (\"*\").",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "queryStringParameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "inputTemplate": {
                  "description": "Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "enrichmentRef": {
              "description": "Reference to a APIDestination in cloudwatchevents to populate enrichment.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "enrichmentSelector": {
              "description": "Selector for a APIDestination in cloudwatchevents to populate enrichment.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "logConfiguration": {
              "description": "Logging configuration settings for the pipe. Detailed below.",
              "properties": {
                "cloudwatchLogsLogDestination": {
                  "description": "Amazon CloudWatch Logs logging configuration settings for the pipe. Detailed below.",
                  "properties": {
                    "logGroupArn": {
                      "description": "Amazon Web Services Resource Name (ARN) for the CloudWatch log group to which EventBridge sends the log records.",
                      "type": "string"
                    },
                    "logGroupArnRef": {
                      "description": "Reference to a Group in cloudwatchlogs to populate logGroupArn.",
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "logGroupArnSelector": {
                      "description": "Selector for a Group in cloudwatchlogs to populate logGroupArn.",
                      "properties": {
                        "matchControllerRef": {
                          "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                          "type": "boolean"
                        },
                        "matchLabels": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "MatchLabels ensures an object with matching labels is selected.",
                          "type": "object"
                        },
                        "policy": {
                          "description": "Policies for selection.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "firehoseLogDestination": {
                  "description": "Amazon Kinesis Data Firehose logging configuration settings for the pipe. Detailed below.",
                  "properties": {
                    "deliveryStreamArn": {
                      "description": "Amazon Resource Name (ARN) of the Kinesis Data Firehose delivery stream to which EventBridge delivers the pipe log records.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "includeExecutionData": {
                  "description": "String list that specifies whether the execution data (specifically, the payload, awsRequest, and awsResponse fields) is included in the log messages for this pipe. This applies to all log destinations for the pipe. Valid values ALL.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                },
                "level": {
                  "description": "The level of logging detail to include. Valid values OFF, ERROR, INFO and TRACE.",
                  "type": "string"
                },
                "s3LogDestination": {
                  "description": "Amazon S3 logging configuration settings for the pipe. Detailed below.",
                  "properties": {
                    "bucketName": {
                      "description": "Name of the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.",
                      "type": "string"
                    },
                    "bucketOwner": {
                      "description": "Amazon Web Services account that owns the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.",
                      "type": "string"
                    },
                    "outputFormat": {
                      "description": "EventBridge format for the log records. Valid values json, plain and w3c.",
                      "type": "string"
                    },
                    "prefix": {
                      "description": "Prefix text with which to begin Amazon S3 log object names.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "roleArn": {
              "description": "ARN of the role that allows the pipe to send data to the target.",
              "type": "string"
            },
            "roleArnRef": {
              "description": "Reference to a Role in iam to populate roleArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "roleArnSelector": {
              "description": "Selector for a Role in iam to populate roleArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "source": {
              "description": "Source resource of the pipe. This field typically requires an ARN (Amazon Resource Name). However, when using a self-managed Kafka cluster, you should use a different format. Instead of an ARN, use 'smk://' followed by the bootstrap server's address.",
              "type": "string"
            },
            "sourceParameters": {
              "description": "Parameters to configure a source for the pipe. Detailed below.",
              "properties": {
                "activemqBrokerParameters": {
                  "description": "The parameters for using an Active MQ broker as a source. Detailed below.",
                  "properties": {
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "credentials": {
                      "description": "The credentials needed to access the resource. Detailed below.",
                      "properties": {
                        "basicAuth": {
                          "description": "The ARN of the Secrets Manager secret containing the basic auth credentials.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    },
                    "queueName": {
                      "description": "The name of the destination queue to consume. Maximum length of 1000.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "dynamodbStreamParameters": {
                  "description": "The parameters for using a DynamoDB stream as a source.  Detailed below.",
                  "properties": {
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "deadLetterConfig": {
                      "description": "Define the target queue to send dead-letter queue events to. Detailed below.",
                      "properties": {
                        "arn": {
                          "description": "The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    },
                    "maximumRecordAgeInSeconds": {
                      "description": "Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.",
                      "type": "number"
                    },
                    "maximumRetryAttempts": {
                      "description": "Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.",
                      "type": "number"
                    },
                    "onPartialBatchItemFailure": {
                      "description": "Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.",
                      "type": "string"
                    },
                    "parallelizationFactor": {
                      "description": "The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.",
                      "type": "number"
                    },
                    "startingPosition": {
                      "description": "The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "filterCriteria": {
                  "description": "The collection of event patterns used to filter events. Detailed below.",
                  "properties": {
                    "filter": {
                      "description": "An array of up to 5 event patterns. Detailed below.",
                      "items": {
                        "properties": {
                          "pattern": {
                            "description": "The event pattern. At most 4096 characters.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "kinesisStreamParameters": {
                  "description": "The parameters for using a Kinesis stream as a source. Detailed below.",
                  "properties": {
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "deadLetterConfig": {
                      "description": "Define the target queue to send dead-letter queue events to. Detailed below.",
                      "properties": {
                        "arn": {
                          "description": "The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    },
                    "maximumRecordAgeInSeconds": {
                      "description": "Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.",
                      "type": "number"
                    },
                    "maximumRetryAttempts": {
                      "description": "Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.",
                      "type": "number"
                    },
                    "onPartialBatchItemFailure": {
                      "description": "Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.",
                      "type": "string"
                    },
                    "parallelizationFactor": {
                      "description": "The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.",
                      "type": "number"
                    },
                    "startingPosition": {
                      "description": "The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST, AT_TIMESTAMP.",
                      "type": "string"
                    },
                    "startingPositionTimestamp": {
                      "description": "With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "managedStreamingKafkaParameters": {
                  "description": "The parameters for using an MSK stream as a source. Detailed below.",
                  "properties": {
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "consumerGroupId": {
                      "description": "The name of the destination queue to consume. Maximum value of 200.",
                      "type": "string"
                    },
                    "credentials": {
                      "description": "The credentials needed to access the resource. Detailed below.",
                      "properties": {
                        "clientCertificateTlsAuth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        },
                        "saslScram512Auth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    },
                    "startingPosition": {
                      "description": "The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.",
                      "type": "string"
                    },
                    "topicName": {
                      "description": "The name of the topic that the pipe will read from. Maximum length of 249.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "rabbitmqBrokerParameters": {
                  "description": "The parameters for using a Rabbit MQ broker as a source. Detailed below.",
                  "properties": {
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "credentials": {
                      "description": "The credentials needed to access the resource. Detailed below.",
                      "properties": {
                        "basicAuth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    },
                    "queueName": {
                      "description": "The name of the destination queue to consume. Maximum length of 1000.",
                      "type": "string"
                    },
                    "virtualHost": {
                      "description": "The name of the virtual host associated with the source broker. Maximum length of 200.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "selfManagedKafkaParameters": {
                  "description": "The parameters for using a self-managed Apache Kafka stream as a source. Detailed below.",
                  "properties": {
                    "additionalBootstrapServers": {
                      "description": "An array of server URLs. Maximum number of 2 items, each of maximum length 300.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "x-kubernetes-list-type": "set"
                    },
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "consumerGroupId": {
                      "description": "The name of the destination queue to consume. Maximum value of 200.",
                      "type": "string"
                    },
                    "credentials": {
                      "description": "The credentials needed to access the resource. Detailed below.",
                      "properties": {
                        "basicAuth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        },
                        "clientCertificateTlsAuth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        },
                        "saslScram256Auth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        },
                        "saslScram512Auth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    },
                    "serverRootCaCertificate": {
                      "description": "The ARN of the Secrets Manager secret used for certification.",
                      "type": "string"
                    },
                    "startingPosition": {
                      "description": "The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.",
                      "type": "string"
                    },
                    "topicName": {
                      "description": "The name of the topic that the pipe will read from. Maximum length of 249.",
                      "type": "string"
                    },
                    "vpc": {
                      "description": "This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used. Detailed below.",
                      "properties": {
                        "securityGroups": {
                          "description": "List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        },
                        "subnets": {
                          "description": "List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "sqsQueueParameters": {
                  "description": "The parameters for using a Amazon SQS stream as a source. Detailed below.",
                  "properties": {
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "sourceRef": {
              "description": "Reference to a Queue in sqs to populate source.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "sourceSelector": {
              "description": "Selector for a Queue in sqs to populate source.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "target": {
              "description": "Target resource of the pipe (typically an ARN).",
              "type": "string"
            },
            "targetParameters": {
              "description": "Parameters to configure a target for your pipe. Detailed below.",
              "properties": {
                "batchJobParameters": {
                  "description": "The parameters for using an AWS Batch job as a target. Detailed below.",
                  "properties": {
                    "arrayProperties": {
                      "description": "The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job. Detailed below.",
                      "properties": {
                        "size": {
                          "description": "The size of the array, if this is an array batch job. Minimum value of 2. Maximum value of 10,000.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "containerOverrides": {
                      "description": "The overrides that are sent to a container. Detailed below.",
                      "properties": {
                        "command": {
                          "description": "List of commands to send to the container that overrides the default command from the Docker image or the task definition.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "environment": {
                          "description": "The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. Environment variables cannot start with \" AWS Batch \". This naming convention is reserved for variables that AWS Batch sets. Detailed below.",
                          "items": {
                            "properties": {
                              "name": {
                                "description": "The name of the key-value pair. For environment variables, this is the name of the environment variable.",
                                "type": "string"
                              },
                              "value": {
                                "description": "The value of the key-value pair. For environment variables, this is the value of the environment variable.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "instanceType": {
                          "description": "The instance type to use for a multi-node parallel job. This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.",
                          "type": "string"
                        },
                        "resourceRequirement": {
                          "description": "The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU. Detailed below.",
                          "items": {
                            "properties": {
                              "type": {
                                "description": "The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.",
                                "type": "string"
                              },
                              "value": {
                                "description": "The quantity of the specified resource to reserve for the container. The values vary based on the type specified.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "dependsOn": {
                      "description": "A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin. Detailed below.",
                      "items": {
                        "properties": {
                          "jobId": {
                            "description": "The job ID of the AWS Batch job that's associated with this dependency.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the job dependency. Valid Values: N_TO_N, SEQUENTIAL.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "jobDefinition": {
                      "description": "The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.",
                      "type": "string"
                    },
                    "jobName": {
                      "description": "The name of the job. It can be up to 128 letters long.",
                      "type": "string"
                    },
                    "parameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition. Detailed below.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    },
                    "retryStrategy": {
                      "description": "The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition. Detailed below.",
                      "properties": {
                        "attempts": {
                          "description": "The number of times to move a job to the RUNNABLE status. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value. Maximum value of 10.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "cloudwatchLogsParameters": {
                  "description": "The parameters for using an CloudWatch Logs log stream as a target. Detailed below.",
                  "properties": {
                    "logStreamName": {
                      "description": "The name of the log stream.",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. This is the JSON path to the field in the event e.g. $.detail.timestamp",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "ecsTaskParameters": {
                  "description": "The parameters for using an Amazon ECS task as a target. Detailed below.",
                  "properties": {
                    "capacityProviderStrategy": {
                      "description": "List of capacity provider strategies to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. Detailed below.",
                      "items": {
                        "properties": {
                          "base": {
                            "description": "The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. Maximum value of 100,000.",
                            "type": "number"
                          },
                          "capacityProvider": {
                            "description": "The short name of the capacity provider. Maximum value of 255.",
                            "type": "string"
                          },
                          "weight": {
                            "description": "The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Maximum value of 1,000.",
                            "type": "number"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "enableEcsManagedTags": {
                      "description": "Specifies whether to enable Amazon ECS managed tags for the task. Valid values: true, false.",
                      "type": "boolean"
                    },
                    "enableExecuteCommand": {
                      "description": "Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task. Valid values: true, false.",
                      "type": "boolean"
                    },
                    "group": {
                      "description": "Specifies an Amazon ECS task group for the task. The maximum length is 255 characters.",
                      "type": "string"
                    },
                    "launchType": {
                      "description": "Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. Valid Values: EC2, FARGATE, EXTERNAL",
                      "type": "string"
                    },
                    "networkConfiguration": {
                      "description": "Use this structure if the Amazon ECS task uses the awsvpc network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if LaunchType is FARGATE because the awsvpc mode is required for Fargate tasks. If you specify NetworkConfiguration when the target ECS task does not use the awsvpc network mode, the task fails. Detailed below.",
                      "properties": {
                        "awsVpcConfiguration": {
                          "description": "Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode. Detailed below.",
                          "properties": {
                            "assignPublicIp": {
                              "description": "Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE. Valid Values: ENABLED, DISABLED.",
                              "type": "string"
                            },
                            "securityGroups": {
                              "description": "Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "x-kubernetes-list-type": "set"
                            },
                            "subnets": {
                              "description": "Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "x-kubernetes-list-type": "set"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "overrides": {
                      "description": "The overrides that are associated with a task. Detailed below.",
                      "properties": {
                        "containerOverride": {
                          "description": "One or more container overrides that are sent to a task. Detailed below.",
                          "items": {
                            "properties": {
                              "command": {
                                "description": "List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "cpu": {
                                "description": "The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.",
                                "type": "number"
                              },
                              "environment": {
                                "description": "The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.",
                                "items": {
                                  "properties": {
                                    "name": {
                                      "description": "The name of the key-value pair. For environment variables, this is the name of the environment variable.",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The value of the key-value pair. For environment variables, this is the value of the environment variable.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "environmentFile": {
                                "description": "A list of files containing the environment variables to pass to a container, instead of the value from the container definition. Detailed below.",
                                "items": {
                                  "properties": {
                                    "type": {
                                      "description": "The file type to use. The only supported value is s3.",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "memory": {
                                "description": "The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.",
                                "type": "number"
                              },
                              "memoryReservation": {
                                "description": "The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.",
                                "type": "number"
                              },
                              "name": {
                                "description": "The name of the container that receives the override. This parameter is required if any override is specified.",
                                "type": "string"
                              },
                              "resourceRequirement": {
                                "description": "The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.",
                                "items": {
                                  "properties": {
                                    "type": {
                                      "description": "The type of resource to assign to a container. The supported values are GPU or InferenceAccelerator.",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The value for the specified resource type. If the GPU type is used, the value is the number of physical GPUs the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on. If the InferenceAccelerator type is used, the value matches the deviceName for an InferenceAccelerator specified in a task definition.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "cpu": {
                          "description": "The cpu override for the task.",
                          "type": "string"
                        },
                        "ephemeralStorage": {
                          "description": "The ephemeral storage setting override for the task.  Detailed below.",
                          "properties": {
                            "sizeInGib": {
                              "description": "The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.",
                              "type": "number"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "executionRoleArn": {
                          "description": "The Amazon Resource Name (ARN) of the task execution IAM role override for the task.",
                          "type": "string"
                        },
                        "inferenceAcceleratorOverride": {
                          "description": "List of Elastic Inference accelerator overrides for the task. Detailed below.",
                          "items": {
                            "properties": {
                              "deviceName": {
                                "description": "The Elastic Inference accelerator device name to override for the task. This parameter must match a deviceName specified in the task definition.",
                                "type": "string"
                              },
                              "deviceType": {
                                "description": "The Elastic Inference accelerator type to use.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "memory": {
                          "description": "The memory override for the task.",
                          "type": "string"
                        },
                        "taskRoleArn": {
                          "description": "The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "placementConstraint": {
                      "description": "An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). Detailed below.",
                      "items": {
                        "properties": {
                          "expression": {
                            "description": "A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. Maximum length of 2,000.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates. Valid Values: distinctInstance, memberOf.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "placementStrategy": {
                      "description": "The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. Detailed below.",
                      "items": {
                        "properties": {
                          "field": {
                            "description": "The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used. Maximum length of 255.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "platformVersion": {
                      "description": "Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This structure is used only if LaunchType is FARGATE.",
                      "type": "string"
                    },
                    "propagateTags": {
                      "description": "Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. Valid Values: TASK_DEFINITION",
                      "type": "string"
                    },
                    "referenceId": {
                      "description": "The reference ID to use for the task. Maximum length of 1,024.",
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Key-value map of tags that you apply to the task to help you categorize and organize them.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    },
                    "taskCount": {
                      "description": "The number of tasks to create based on TaskDefinition. The default is 1.",
                      "type": "number"
                    },
                    "taskDefinitionArn": {
                      "description": "The ARN of the task definition to use if the event target is an Amazon ECS task.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "eventbridgeEventBusParameters": {
                  "description": "The parameters for using an EventBridge event bus as a target. Detailed below.",
                  "properties": {
                    "detailType": {
                      "description": "A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.",
                      "type": "string"
                    },
                    "endpointId": {
                      "description": "The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is abcde.veo.",
                      "type": "string"
                    },
                    "resources": {
                      "description": "List of AWS resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "x-kubernetes-list-type": "set"
                    },
                    "source": {
                      "description": "The source of the event. Maximum length of 256.",
                      "type": "string"
                    },
                    "time": {
                      "description": "The time stamp of the event, per RFC3339. If no time stamp is provided, the time stamp of the PutEvents call is used. This is the JSON path to the field in the event e.g. $.detail.timestamp",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "httpParameters": {
                  "description": "These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations. Detailed below.",
                  "properties": {
                    "headerParameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination. Detailed below.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    },
                    "pathParameterValues": {
                      "description": "The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards (\"*\").",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "queryStringParameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination. Detailed below.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "inputTemplate": {
                  "description": "Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.",
                  "type": "string"
                },
                "kinesisStreamParameters": {
                  "description": "The parameters for using a Kinesis stream as a source. Detailed below.",
                  "properties": {
                    "partitionKey": {
                      "description": "Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "lambdaFunctionParameters": {
                  "description": "The parameters for using a Lambda function as a target. Detailed below.",
                  "properties": {
                    "invocationType": {
                      "description": "Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "redshiftDataParameters": {
                  "description": "These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API BatchExecuteStatement. Detailed below.",
                  "properties": {
                    "database": {
                      "description": "The name of the database. Required when authenticating using temporary credentials.",
                      "type": "string"
                    },
                    "dbUser": {
                      "description": "The database user name. Required when authenticating using temporary credentials.",
                      "type": "string"
                    },
                    "secretManagerArn": {
                      "description": "The name or ARN of the secret that enables access to the database. Required when authenticating using Secrets Manager.",
                      "type": "string"
                    },
                    "sqls": {
                      "description": "List of SQL statements text to run, each of maximum length of 100,000.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "x-kubernetes-list-type": "set"
                    },
                    "statementName": {
                      "description": "The name of the SQL statement. You can name the SQL statement when you create it to identify the query.",
                      "type": "string"
                    },
                    "withEvent": {
                      "description": "Indicates whether to send an event back to EventBridge after the SQL statement runs.",
                      "type": "boolean"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "sagemakerPipelineParameters": {
                  "description": "The parameters for using a SageMaker pipeline as a target. Detailed below.",
                  "properties": {
                    "pipelineParameter": {
                      "description": "List of Parameter names and values for SageMaker Model Building Pipeline execution. Detailed below.",
                      "items": {
                        "properties": {
                          "name": {
                            "description": "The name of the container that receives the override. This parameter is required if any override is specified.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "sqsQueueParameters": {
                  "description": "The parameters for using a Amazon SQS stream as a target. Detailed below.",
                  "properties": {
                    "messageDeduplicationId": {
                      "description": "This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of sent messages.",
                      "type": "string"
                    },
                    "messageGroupId": {
                      "description": "The FIFO message group ID to use as the target.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "stepFunctionStateMachineParameters": {
                  "description": "The parameters for using a Step Functions state machine as a target. Detailed below.",
                  "properties": {
                    "invocationType": {
                      "description": "Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "targetRef": {
              "description": "Reference to a Queue in sqs to populate target.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "targetSelector": {
              "description": "Selector for a Queue in sqs to populate target.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which\ncontains a name, metadata and a reference to secret store config to\nwhich any connection details for this managed resource should be written.\nConnection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used\nfor this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.annotations\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.labels\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret.\n- Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.\nThis field is planned to be replaced in a future release in favor of\nPublishConnectionDetailsTo. Currently, both could be set independently\nand connection details would be published to both without affecting\neach other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "PipeStatus defines the observed state of Pipe.",
      "properties": {
        "atProvider": {
          "properties": {
            "arn": {
              "description": "ARN of this pipe.",
              "type": "string"
            },
            "description": {
              "description": "A description of the pipe. At most 512 characters.",
              "type": "string"
            },
            "desiredState": {
              "description": "The state the pipe should be in. One of: RUNNING, STOPPED.",
              "type": "string"
            },
            "enrichment": {
              "description": "Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the User Guide.",
              "type": "string"
            },
            "enrichmentParameters": {
              "description": "Parameters to configure enrichment for your pipe. Detailed below.",
              "properties": {
                "httpParameters": {
                  "description": "Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination. If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence. Detailed below.",
                  "properties": {
                    "headerParameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    },
                    "pathParameterValues": {
                      "description": "The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards (\"*\").",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "queryStringParameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "inputTemplate": {
                  "description": "Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "id": {
              "description": "Same as name.",
              "type": "string"
            },
            "logConfiguration": {
              "description": "Logging configuration settings for the pipe. Detailed below.",
              "properties": {
                "cloudwatchLogsLogDestination": {
                  "description": "Amazon CloudWatch Logs logging configuration settings for the pipe. Detailed below.",
                  "properties": {
                    "logGroupArn": {
                      "description": "Amazon Web Services Resource Name (ARN) for the CloudWatch log group to which EventBridge sends the log records.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "firehoseLogDestination": {
                  "description": "Amazon Kinesis Data Firehose logging configuration settings for the pipe. Detailed below.",
                  "properties": {
                    "deliveryStreamArn": {
                      "description": "Amazon Resource Name (ARN) of the Kinesis Data Firehose delivery stream to which EventBridge delivers the pipe log records.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "includeExecutionData": {
                  "description": "String list that specifies whether the execution data (specifically, the payload, awsRequest, and awsResponse fields) is included in the log messages for this pipe. This applies to all log destinations for the pipe. Valid values ALL.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "set"
                },
                "level": {
                  "description": "The level of logging detail to include. Valid values OFF, ERROR, INFO and TRACE.",
                  "type": "string"
                },
                "s3LogDestination": {
                  "description": "Amazon S3 logging configuration settings for the pipe. Detailed below.",
                  "properties": {
                    "bucketName": {
                      "description": "Name of the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.",
                      "type": "string"
                    },
                    "bucketOwner": {
                      "description": "Amazon Web Services account that owns the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.",
                      "type": "string"
                    },
                    "outputFormat": {
                      "description": "EventBridge format for the log records. Valid values json, plain and w3c.",
                      "type": "string"
                    },
                    "prefix": {
                      "description": "Prefix text with which to begin Amazon S3 log object names.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "roleArn": {
              "description": "ARN of the role that allows the pipe to send data to the target.",
              "type": "string"
            },
            "source": {
              "description": "Source resource of the pipe. This field typically requires an ARN (Amazon Resource Name). However, when using a self-managed Kafka cluster, you should use a different format. Instead of an ARN, use 'smk://' followed by the bootstrap server's address.",
              "type": "string"
            },
            "sourceParameters": {
              "description": "Parameters to configure a source for the pipe. Detailed below.",
              "properties": {
                "activemqBrokerParameters": {
                  "description": "The parameters for using an Active MQ broker as a source. Detailed below.",
                  "properties": {
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "credentials": {
                      "description": "The credentials needed to access the resource. Detailed below.",
                      "properties": {
                        "basicAuth": {
                          "description": "The ARN of the Secrets Manager secret containing the basic auth credentials.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    },
                    "queueName": {
                      "description": "The name of the destination queue to consume. Maximum length of 1000.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "dynamodbStreamParameters": {
                  "description": "The parameters for using a DynamoDB stream as a source.  Detailed below.",
                  "properties": {
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "deadLetterConfig": {
                      "description": "Define the target queue to send dead-letter queue events to. Detailed below.",
                      "properties": {
                        "arn": {
                          "description": "The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    },
                    "maximumRecordAgeInSeconds": {
                      "description": "Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.",
                      "type": "number"
                    },
                    "maximumRetryAttempts": {
                      "description": "Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.",
                      "type": "number"
                    },
                    "onPartialBatchItemFailure": {
                      "description": "Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.",
                      "type": "string"
                    },
                    "parallelizationFactor": {
                      "description": "The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.",
                      "type": "number"
                    },
                    "startingPosition": {
                      "description": "The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "filterCriteria": {
                  "description": "The collection of event patterns used to filter events. Detailed below.",
                  "properties": {
                    "filter": {
                      "description": "An array of up to 5 event patterns. Detailed below.",
                      "items": {
                        "properties": {
                          "pattern": {
                            "description": "The event pattern. At most 4096 characters.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "kinesisStreamParameters": {
                  "description": "The parameters for using a Kinesis stream as a source. Detailed below.",
                  "properties": {
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "deadLetterConfig": {
                      "description": "Define the target queue to send dead-letter queue events to. Detailed below.",
                      "properties": {
                        "arn": {
                          "description": "The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    },
                    "maximumRecordAgeInSeconds": {
                      "description": "Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.",
                      "type": "number"
                    },
                    "maximumRetryAttempts": {
                      "description": "Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.",
                      "type": "number"
                    },
                    "onPartialBatchItemFailure": {
                      "description": "Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.",
                      "type": "string"
                    },
                    "parallelizationFactor": {
                      "description": "The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.",
                      "type": "number"
                    },
                    "startingPosition": {
                      "description": "The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST, AT_TIMESTAMP.",
                      "type": "string"
                    },
                    "startingPositionTimestamp": {
                      "description": "With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "managedStreamingKafkaParameters": {
                  "description": "The parameters for using an MSK stream as a source. Detailed below.",
                  "properties": {
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "consumerGroupId": {
                      "description": "The name of the destination queue to consume. Maximum value of 200.",
                      "type": "string"
                    },
                    "credentials": {
                      "description": "The credentials needed to access the resource. Detailed below.",
                      "properties": {
                        "clientCertificateTlsAuth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        },
                        "saslScram512Auth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    },
                    "startingPosition": {
                      "description": "The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.",
                      "type": "string"
                    },
                    "topicName": {
                      "description": "The name of the topic that the pipe will read from. Maximum length of 249.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "rabbitmqBrokerParameters": {
                  "description": "The parameters for using a Rabbit MQ broker as a source. Detailed below.",
                  "properties": {
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "credentials": {
                      "description": "The credentials needed to access the resource. Detailed below.",
                      "properties": {
                        "basicAuth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    },
                    "queueName": {
                      "description": "The name of the destination queue to consume. Maximum length of 1000.",
                      "type": "string"
                    },
                    "virtualHost": {
                      "description": "The name of the virtual host associated with the source broker. Maximum length of 200.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "selfManagedKafkaParameters": {
                  "description": "The parameters for using a self-managed Apache Kafka stream as a source. Detailed below.",
                  "properties": {
                    "additionalBootstrapServers": {
                      "description": "An array of server URLs. Maximum number of 2 items, each of maximum length 300.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "x-kubernetes-list-type": "set"
                    },
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "consumerGroupId": {
                      "description": "The name of the destination queue to consume. Maximum value of 200.",
                      "type": "string"
                    },
                    "credentials": {
                      "description": "The credentials needed to access the resource. Detailed below.",
                      "properties": {
                        "basicAuth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        },
                        "clientCertificateTlsAuth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        },
                        "saslScram256Auth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        },
                        "saslScram512Auth": {
                          "description": "The ARN of the Secrets Manager secret containing the credentials.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    },
                    "serverRootCaCertificate": {
                      "description": "The ARN of the Secrets Manager secret used for certification.",
                      "type": "string"
                    },
                    "startingPosition": {
                      "description": "The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.",
                      "type": "string"
                    },
                    "topicName": {
                      "description": "The name of the topic that the pipe will read from. Maximum length of 249.",
                      "type": "string"
                    },
                    "vpc": {
                      "description": "This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used. Detailed below.",
                      "properties": {
                        "securityGroups": {
                          "description": "List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        },
                        "subnets": {
                          "description": "List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "sqsQueueParameters": {
                  "description": "The parameters for using a Amazon SQS stream as a source. Detailed below.",
                  "properties": {
                    "batchSize": {
                      "description": "The maximum number of records to include in each batch. Maximum value of 10000.",
                      "type": "number"
                    },
                    "maximumBatchingWindowInSeconds": {
                      "description": "The maximum length of a time to wait for events. Maximum value of 300.",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "target": {
              "description": "Target resource of the pipe (typically an ARN).",
              "type": "string"
            },
            "targetParameters": {
              "description": "Parameters to configure a target for your pipe. Detailed below.",
              "properties": {
                "batchJobParameters": {
                  "description": "The parameters for using an AWS Batch job as a target. Detailed below.",
                  "properties": {
                    "arrayProperties": {
                      "description": "The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job. Detailed below.",
                      "properties": {
                        "size": {
                          "description": "The size of the array, if this is an array batch job. Minimum value of 2. Maximum value of 10,000.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "containerOverrides": {
                      "description": "The overrides that are sent to a container. Detailed below.",
                      "properties": {
                        "command": {
                          "description": "List of commands to send to the container that overrides the default command from the Docker image or the task definition.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "environment": {
                          "description": "The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. Environment variables cannot start with \" AWS Batch \". This naming convention is reserved for variables that AWS Batch sets. Detailed below.",
                          "items": {
                            "properties": {
                              "name": {
                                "description": "The name of the key-value pair. For environment variables, this is the name of the environment variable.",
                                "type": "string"
                              },
                              "value": {
                                "description": "The value of the key-value pair. For environment variables, this is the value of the environment variable.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "instanceType": {
                          "description": "The instance type to use for a multi-node parallel job. This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.",
                          "type": "string"
                        },
                        "resourceRequirement": {
                          "description": "The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU. Detailed below.",
                          "items": {
                            "properties": {
                              "type": {
                                "description": "The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.",
                                "type": "string"
                              },
                              "value": {
                                "description": "The quantity of the specified resource to reserve for the container. The values vary based on the type specified.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "dependsOn": {
                      "description": "A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin. Detailed below.",
                      "items": {
                        "properties": {
                          "jobId": {
                            "description": "The job ID of the AWS Batch job that's associated with this dependency.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the job dependency. Valid Values: N_TO_N, SEQUENTIAL.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "jobDefinition": {
                      "description": "The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.",
                      "type": "string"
                    },
                    "jobName": {
                      "description": "The name of the job. It can be up to 128 letters long.",
                      "type": "string"
                    },
                    "parameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition. Detailed below.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    },
                    "retryStrategy": {
                      "description": "The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition. Detailed below.",
                      "properties": {
                        "attempts": {
                          "description": "The number of times to move a job to the RUNNABLE status. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value. Maximum value of 10.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "cloudwatchLogsParameters": {
                  "description": "The parameters for using an CloudWatch Logs log stream as a target. Detailed below.",
                  "properties": {
                    "logStreamName": {
                      "description": "The name of the log stream.",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. This is the JSON path to the field in the event e.g. $.detail.timestamp",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "ecsTaskParameters": {
                  "description": "The parameters for using an Amazon ECS task as a target. Detailed below.",
                  "properties": {
                    "capacityProviderStrategy": {
                      "description": "List of capacity provider strategies to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. Detailed below.",
                      "items": {
                        "properties": {
                          "base": {
                            "description": "The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. Maximum value of 100,000.",
                            "type": "number"
                          },
                          "capacityProvider": {
                            "description": "The short name of the capacity provider. Maximum value of 255.",
                            "type": "string"
                          },
                          "weight": {
                            "description": "The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Maximum value of 1,000.",
                            "type": "number"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "enableEcsManagedTags": {
                      "description": "Specifies whether to enable Amazon ECS managed tags for the task. Valid values: true, false.",
                      "type": "boolean"
                    },
                    "enableExecuteCommand": {
                      "description": "Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task. Valid values: true, false.",
                      "type": "boolean"
                    },
                    "group": {
                      "description": "Specifies an Amazon ECS task group for the task. The maximum length is 255 characters.",
                      "type": "string"
                    },
                    "launchType": {
                      "description": "Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. Valid Values: EC2, FARGATE, EXTERNAL",
                      "type": "string"
                    },
                    "networkConfiguration": {
                      "description": "Use this structure if the Amazon ECS task uses the awsvpc network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if LaunchType is FARGATE because the awsvpc mode is required for Fargate tasks. If you specify NetworkConfiguration when the target ECS task does not use the awsvpc network mode, the task fails. Detailed below.",
                      "properties": {
                        "awsVpcConfiguration": {
                          "description": "Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode. Detailed below.",
                          "properties": {
                            "assignPublicIp": {
                              "description": "Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE. Valid Values: ENABLED, DISABLED.",
                              "type": "string"
                            },
                            "securityGroups": {
                              "description": "Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "x-kubernetes-list-type": "set"
                            },
                            "subnets": {
                              "description": "Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "x-kubernetes-list-type": "set"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "overrides": {
                      "description": "The overrides that are associated with a task. Detailed below.",
                      "properties": {
                        "containerOverride": {
                          "description": "One or more container overrides that are sent to a task. Detailed below.",
                          "items": {
                            "properties": {
                              "command": {
                                "description": "List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "cpu": {
                                "description": "The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.",
                                "type": "number"
                              },
                              "environment": {
                                "description": "The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.",
                                "items": {
                                  "properties": {
                                    "name": {
                                      "description": "The name of the key-value pair. For environment variables, this is the name of the environment variable.",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The value of the key-value pair. For environment variables, this is the value of the environment variable.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "environmentFile": {
                                "description": "A list of files containing the environment variables to pass to a container, instead of the value from the container definition. Detailed below.",
                                "items": {
                                  "properties": {
                                    "type": {
                                      "description": "The file type to use. The only supported value is s3.",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "memory": {
                                "description": "The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.",
                                "type": "number"
                              },
                              "memoryReservation": {
                                "description": "The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.",
                                "type": "number"
                              },
                              "name": {
                                "description": "The name of the container that receives the override. This parameter is required if any override is specified.",
                                "type": "string"
                              },
                              "resourceRequirement": {
                                "description": "The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.",
                                "items": {
                                  "properties": {
                                    "type": {
                                      "description": "The type of resource to assign to a container. The supported values are GPU or InferenceAccelerator.",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The value for the specified resource type. If the GPU type is used, the value is the number of physical GPUs the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on. If the InferenceAccelerator type is used, the value matches the deviceName for an InferenceAccelerator specified in a task definition.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                },
                                "type": "array"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "cpu": {
                          "description": "The cpu override for the task.",
                          "type": "string"
                        },
                        "ephemeralStorage": {
                          "description": "The ephemeral storage setting override for the task.  Detailed below.",
                          "properties": {
                            "sizeInGib": {
                              "description": "The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.",
                              "type": "number"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "executionRoleArn": {
                          "description": "The Amazon Resource Name (ARN) of the task execution IAM role override for the task.",
                          "type": "string"
                        },
                        "inferenceAcceleratorOverride": {
                          "description": "List of Elastic Inference accelerator overrides for the task. Detailed below.",
                          "items": {
                            "properties": {
                              "deviceName": {
                                "description": "The Elastic Inference accelerator device name to override for the task. This parameter must match a deviceName specified in the task definition.",
                                "type": "string"
                              },
                              "deviceType": {
                                "description": "The Elastic Inference accelerator type to use.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "memory": {
                          "description": "The memory override for the task.",
                          "type": "string"
                        },
                        "taskRoleArn": {
                          "description": "The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "placementConstraint": {
                      "description": "An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). Detailed below.",
                      "items": {
                        "properties": {
                          "expression": {
                            "description": "A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. Maximum length of 2,000.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates. Valid Values: distinctInstance, memberOf.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "placementStrategy": {
                      "description": "The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. Detailed below.",
                      "items": {
                        "properties": {
                          "field": {
                            "description": "The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used. Maximum length of 255.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "platformVersion": {
                      "description": "Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This structure is used only if LaunchType is FARGATE.",
                      "type": "string"
                    },
                    "propagateTags": {
                      "description": "Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. Valid Values: TASK_DEFINITION",
                      "type": "string"
                    },
                    "referenceId": {
                      "description": "The reference ID to use for the task. Maximum length of 1,024.",
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Key-value map of tags that you apply to the task to help you categorize and organize them.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    },
                    "taskCount": {
                      "description": "The number of tasks to create based on TaskDefinition. The default is 1.",
                      "type": "number"
                    },
                    "taskDefinitionArn": {
                      "description": "The ARN of the task definition to use if the event target is an Amazon ECS task.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "eventbridgeEventBusParameters": {
                  "description": "The parameters for using an EventBridge event bus as a target. Detailed below.",
                  "properties": {
                    "detailType": {
                      "description": "A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.",
                      "type": "string"
                    },
                    "endpointId": {
                      "description": "The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is abcde.veo.",
                      "type": "string"
                    },
                    "resources": {
                      "description": "List of AWS resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "x-kubernetes-list-type": "set"
                    },
                    "source": {
                      "description": "The source of the event. Maximum length of 256.",
                      "type": "string"
                    },
                    "time": {
                      "description": "The time stamp of the event, per RFC3339. If no time stamp is provided, the time stamp of the PutEvents call is used. This is the JSON path to the field in the event e.g. $.detail.timestamp",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "httpParameters": {
                  "description": "These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations. Detailed below.",
                  "properties": {
                    "headerParameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination. Detailed below.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    },
                    "pathParameterValues": {
                      "description": "The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards (\"*\").",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "queryStringParameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination. Detailed below.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "inputTemplate": {
                  "description": "Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.",
                  "type": "string"
                },
                "kinesisStreamParameters": {
                  "description": "The parameters for using a Kinesis stream as a source. Detailed below.",
                  "properties": {
                    "partitionKey": {
                      "description": "Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "lambdaFunctionParameters": {
                  "description": "The parameters for using a Lambda function as a target. Detailed below.",
                  "properties": {
                    "invocationType": {
                      "description": "Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "redshiftDataParameters": {
                  "description": "These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API BatchExecuteStatement. Detailed below.",
                  "properties": {
                    "database": {
                      "description": "The name of the database. Required when authenticating using temporary credentials.",
                      "type": "string"
                    },
                    "dbUser": {
                      "description": "The database user name. Required when authenticating using temporary credentials.",
                      "type": "string"
                    },
                    "secretManagerArn": {
                      "description": "The name or ARN of the secret that enables access to the database. Required when authenticating using Secrets Manager.",
                      "type": "string"
                    },
                    "sqls": {
                      "description": "List of SQL statements text to run, each of maximum length of 100,000.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "x-kubernetes-list-type": "set"
                    },
                    "statementName": {
                      "description": "The name of the SQL statement. You can name the SQL statement when you create it to identify the query.",
                      "type": "string"
                    },
                    "withEvent": {
                      "description": "Indicates whether to send an event back to EventBridge after the SQL statement runs.",
                      "type": "boolean"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "sagemakerPipelineParameters": {
                  "description": "The parameters for using a SageMaker pipeline as a target. Detailed below.",
                  "properties": {
                    "pipelineParameter": {
                      "description": "List of Parameter names and values for SageMaker Model Building Pipeline execution. Detailed below.",
                      "items": {
                        "properties": {
                          "name": {
                            "description": "The name of the container that receives the override. This parameter is required if any override is specified.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "sqsQueueParameters": {
                  "description": "The parameters for using a Amazon SQS stream as a target. Detailed below.",
                  "properties": {
                    "messageDeduplicationId": {
                      "description": "This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of sent messages.",
                      "type": "string"
                    },
                    "messageGroupId": {
                      "description": "The FIFO message group ID to use as the target.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "stepFunctionStateMachineParameters": {
                  "description": "The parameters for using a Step Functions state machine as a target. Detailed below.",
                  "properties": {
                    "invocationType": {
                      "description": "Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
