{
  "description": "Broker is the Schema for the Brokers API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "BrokerSpec defines the desired state of Broker",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource.",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "description": "BrokerParameters defines the desired state of Broker",
          "properties": {
            "authenticationStrategy": {
              "type": "string"
            },
            "autoMinorVersionUpgrade": {
              "type": "boolean"
            },
            "configuration": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "revision": {
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "creatorRequestID": {
              "type": "string"
            },
            "deploymentMode": {
              "type": "string"
            },
            "encryptionOptions": {
              "properties": {
                "kmsKeyID": {
                  "type": "string"
                },
                "useAWSOwnedKey": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "engineType": {
              "type": "string"
            },
            "engineVersion": {
              "type": "string"
            },
            "hostInstanceType": {
              "type": "string"
            },
            "ldapServerMetadata": {
              "properties": {
                "hosts": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "roleBase": {
                  "type": "string"
                },
                "roleName": {
                  "type": "string"
                },
                "roleSearchMatching": {
                  "type": "string"
                },
                "roleSearchSubtree": {
                  "type": "boolean"
                },
                "serviceAccountPassword": {
                  "type": "string"
                },
                "serviceAccountUsername": {
                  "type": "string"
                },
                "userBase": {
                  "type": "string"
                },
                "userRoleName": {
                  "type": "string"
                },
                "userSearchMatching": {
                  "type": "string"
                },
                "userSearchSubtree": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "logs": {
              "properties": {
                "audit": {
                  "type": "boolean"
                },
                "general": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "maintenanceWindowStartTime": {
              "properties": {
                "dayOfWeek": {
                  "type": "string"
                },
                "timeOfDay": {
                  "type": "string"
                },
                "timeZone": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "publiclyAccessible": {
              "type": "boolean"
            },
            "region": {
              "description": "Region is which region the Broker will be created.",
              "type": "string"
            },
            "securityGroupIdRefs": {
              "description": "SecurityGroupIDRefs is a list of references to SecurityGroups used to set the SecurityGroupsIDs.",
              "items": {
                "description": "A Reference to a named object.",
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "properties": {
                      "resolution": {
                        "default": "Required",
                        "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                        "enum": [
                          "Required",
                          "Optional"
                        ],
                        "type": "string"
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "securityGroupIdSelector": {
              "description": "SecurityGroupIDsSelector selects references to SecurityGroups used to set the SecurityGroupsIDs.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "securityGroups": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "storageType": {
              "type": "string"
            },
            "subnetIDRefs": {
              "description": "SubnetIDRefs is a list of references to Subnets used to set the SubnetIDs.",
              "items": {
                "description": "A Reference to a named object.",
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "properties": {
                      "resolution": {
                        "default": "Required",
                        "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                        "enum": [
                          "Required",
                          "Optional"
                        ],
                        "type": "string"
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "subnetIDSelector": {
              "description": "SubnetIDsSelector selects references to Subnets used to set the SubnetIDs.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "subnetIDs": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "users": {
              "items": {
                "description": "CustomUser contains the fields for Users with PasswordSecretRef",
                "properties": {
                  "consoleAccess": {
                    "type": "boolean"
                  },
                  "groups": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "passwordSecretRef": {
                    "description": "A SecretKeySelector is a reference to a secret key in an arbitrary namespace.",
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "key",
                      "name",
                      "namespace"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "username": {
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "required": [
            "autoMinorVersionUpgrade",
            "deploymentMode",
            "engineType",
            "engineVersion",
            "hostInstanceType",
            "publiclyAccessible",
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "providerRef": {
          "description": "ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "BrokerStatus defines the observed state of Broker.",
      "properties": {
        "atProvider": {
          "description": "BrokerObservation defines the observed state of Broker",
          "properties": {
            "brokerARN": {
              "type": "string"
            },
            "brokerID": {
              "type": "string"
            },
            "brokerInstances": {
              "items": {
                "properties": {
                  "consoleURL": {
                    "type": "string"
                  },
                  "endpoints": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "ipAddress": {
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "brokerState": {
              "type": "string"
            },
            "configurations": {
              "properties": {
                "current": {
                  "description": "A list of information about the configuration. \n Does not apply to RabbitMQ brokers.",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "revision": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "history": {
                  "items": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "revision": {
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "pending": {
                  "description": "A list of information about the configuration. \n Does not apply to RabbitMQ brokers.",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "revision": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "created": {
              "format": "date-time",
              "type": "string"
            },
            "logsSummary": {
              "properties": {
                "audit": {
                  "type": "boolean"
                },
                "auditLogGroup": {
                  "type": "string"
                },
                "general": {
                  "type": "boolean"
                },
                "generalLogGroup": {
                  "type": "string"
                },
                "pending": {
                  "description": "The list of information about logs to be enabled for the specified broker.",
                  "properties": {
                    "audit": {
                      "type": "boolean"
                    },
                    "general": {
                      "type": "boolean"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "pendingAuthenticationStrategy": {
              "type": "string"
            },
            "pendingEngineVersion": {
              "type": "string"
            },
            "pendingHostInstanceType": {
              "type": "string"
            },
            "pendingLDAPServerMetadata": {
              "properties": {
                "hosts": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "roleBase": {
                  "type": "string"
                },
                "roleName": {
                  "type": "string"
                },
                "roleSearchMatching": {
                  "type": "string"
                },
                "roleSearchSubtree": {
                  "type": "boolean"
                },
                "serviceAccountUsername": {
                  "type": "string"
                },
                "userBase": {
                  "type": "string"
                },
                "userRoleName": {
                  "type": "string"
                },
                "userSearchMatching": {
                  "type": "string"
                },
                "userSearchSubtree": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "pendingSecurityGroups": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "users": {
              "items": {
                "properties": {
                  "pendingChange": {
                    "description": "The type of change pending for the ActiveMQ user.",
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                "type": "string"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
