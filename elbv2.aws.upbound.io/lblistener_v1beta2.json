{
  "description": "LBListener is the Schema for the LBListeners API. Provides a Load Balancer Listener resource.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "LBListenerSpec defines the desired state of LBListener",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "alpnPolicy": {
              "description": "Name of the Application-Layer Protocol Negotiation (ALPN) policy. Can be set if protocol is TLS. Valid values are HTTP1Only, HTTP2Only, HTTP2Optional, HTTP2Preferred, and None.",
              "type": "string"
            },
            "certificateArn": {
              "description": "ARN of the default SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. For adding additional SSL certificates, see the aws_lb_listener_certificate resource.",
              "type": "string"
            },
            "defaultAction": {
              "description": "Configuration block for default actions. See below.",
              "items": {
                "properties": {
                  "authenticateCognito": {
                    "description": "Configuration block for using Amazon Cognito to authenticate users. Specify only when type is authenticate-cognito. See below.",
                    "properties": {
                      "authenticationRequestExtraParams": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Query parameters to include in the redirect request to the authorization endpoint. Max: 10. See below.",
                        "type": "object",
                        "x-kubernetes-map-type": "granular"
                      },
                      "onUnauthenticatedRequest": {
                        "description": "Behavior if the user is not authenticated. Valid values are deny, allow and authenticate.",
                        "type": "string"
                      },
                      "scope": {
                        "description": "Set of user claims to be requested from the IdP.",
                        "type": "string"
                      },
                      "sessionCookieName": {
                        "description": "Name of the cookie used to maintain session information.",
                        "type": "string"
                      },
                      "sessionTimeout": {
                        "description": "Maximum duration of the authentication session, in seconds.",
                        "type": "number"
                      },
                      "userPoolArn": {
                        "description": "ARN of the Cognito user pool.",
                        "type": "string"
                      },
                      "userPoolClientId": {
                        "description": "ID of the Cognito user pool client.",
                        "type": "string"
                      },
                      "userPoolDomain": {
                        "description": "Domain prefix or fully-qualified domain name of the Cognito user pool.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "authenticateOidc": {
                    "description": "Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when type is authenticate-oidc. See below.",
                    "properties": {
                      "authenticationRequestExtraParams": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Query parameters to include in the redirect request to the authorization endpoint. Max: 10.",
                        "type": "object",
                        "x-kubernetes-map-type": "granular"
                      },
                      "authorizationEndpoint": {
                        "description": "Authorization endpoint of the IdP.",
                        "type": "string"
                      },
                      "clientId": {
                        "description": "OAuth 2.0 client identifier.",
                        "type": "string"
                      },
                      "clientSecretSecretRef": {
                        "description": "OAuth 2.0 client secret.",
                        "properties": {
                          "key": {
                            "description": "The key to select.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the secret.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace of the secret.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "key",
                          "name",
                          "namespace"
                        ],
                        "type": "object",
                        "additionalProperties": false
                      },
                      "issuer": {
                        "description": "OIDC issuer identifier of the IdP.",
                        "type": "string"
                      },
                      "onUnauthenticatedRequest": {
                        "description": "Behavior if the user is not authenticated. Valid values: deny, allow and authenticate",
                        "type": "string"
                      },
                      "scope": {
                        "description": "Set of user claims to be requested from the IdP.",
                        "type": "string"
                      },
                      "sessionCookieName": {
                        "description": "Name of the cookie used to maintain session information.",
                        "type": "string"
                      },
                      "sessionTimeout": {
                        "description": "Maximum duration of the authentication session, in seconds.",
                        "type": "number"
                      },
                      "tokenEndpoint": {
                        "description": "Token endpoint of the IdP.",
                        "type": "string"
                      },
                      "userInfoEndpoint": {
                        "description": "User info endpoint of the IdP.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "fixedResponse": {
                    "description": "Information for creating an action that returns a custom HTTP response. Required if type is fixed-response.",
                    "properties": {
                      "contentType": {
                        "description": "Content type. Valid values are text/plain, text/css, text/html, application/javascript and application/json.",
                        "type": "string"
                      },
                      "messageBody": {
                        "description": "Message body.",
                        "type": "string"
                      },
                      "statusCode": {
                        "description": "HTTP response code. Valid values are 2XX, 4XX, or 5XX.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "forward": {
                    "description": "Configuration block for creating an action that distributes requests among one or more target groups. Specify only if type is forward. See below.",
                    "properties": {
                      "stickiness": {
                        "description": "Configuration block for target group stickiness for the rule. See below.",
                        "properties": {
                          "duration": {
                            "description": "Time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).",
                            "type": "number"
                          },
                          "enabled": {
                            "description": "Whether target group stickiness is enabled. Default is false.",
                            "type": "boolean"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "targetGroup": {
                        "description": "Set of 1-5 target group blocks. See below.",
                        "items": {
                          "properties": {
                            "arn": {
                              "description": "ARN of the target group.",
                              "type": "string"
                            },
                            "arnRef": {
                              "description": "Reference to a LBTargetGroup in elbv2 to populate arn.",
                              "properties": {
                                "name": {
                                  "description": "Name of the referenced object.",
                                  "type": "string"
                                },
                                "policy": {
                                  "description": "Policies for referencing.",
                                  "properties": {
                                    "resolution": {
                                      "default": "Required",
                                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                      "enum": [
                                        "Required",
                                        "Optional"
                                      ],
                                      "type": "string"
                                    },
                                    "resolve": {
                                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                      "enum": [
                                        "Always",
                                        "IfNotPresent"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "name"
                              ],
                              "type": "object",
                              "additionalProperties": false
                            },
                            "arnSelector": {
                              "description": "Selector for a LBTargetGroup in elbv2 to populate arn.",
                              "properties": {
                                "matchControllerRef": {
                                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                                  "type": "boolean"
                                },
                                "matchLabels": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "MatchLabels ensures an object with matching labels is selected.",
                                  "type": "object"
                                },
                                "policy": {
                                  "description": "Policies for selection.",
                                  "properties": {
                                    "resolution": {
                                      "default": "Required",
                                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                      "enum": [
                                        "Required",
                                        "Optional"
                                      ],
                                      "type": "string"
                                    },
                                    "resolve": {
                                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                      "enum": [
                                        "Always",
                                        "IfNotPresent"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            },
                            "weight": {
                              "description": "Weight. The range is 0 to 999.",
                              "type": "number"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "order": {
                    "description": "Order for the action. The action with the lowest value for order is performed first. Valid values are between 1 and 50000. Defaults to the position in the list of actions.",
                    "type": "number"
                  },
                  "redirect": {
                    "description": "Configuration block for creating a redirect action. Required if type is redirect. See below.",
                    "properties": {
                      "host": {
                        "description": "Hostname. This component is not percent-encoded. The hostname can contain #{host}. Defaults to #{host}.",
                        "type": "string"
                      },
                      "path": {
                        "description": "Absolute path, starting with the leading \"/\". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to /#{path}.",
                        "type": "string"
                      },
                      "port": {
                        "description": "Port. Specify a value from 1 to 65535 or #{port}. Defaults to #{port}.",
                        "type": "string"
                      },
                      "protocol": {
                        "description": "Protocol. Valid values are HTTP, HTTPS, or #{protocol}. Defaults to #{protocol}.",
                        "type": "string"
                      },
                      "query": {
                        "description": "Query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading \"?\". Defaults to #{query}.",
                        "type": "string"
                      },
                      "statusCode": {
                        "description": "HTTP redirect code. The redirect is either permanent (HTTP_301) or temporary (HTTP_302).",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "targetGroupArn": {
                    "description": "ARN of the Target Group to which to route traffic. Specify only if type is forward and you want to route to a single target group. To route to one or more target groups, use a forward block instead. Can be specified with forward but ARNs must match.",
                    "type": "string"
                  },
                  "targetGroupArnRef": {
                    "description": "Reference to a LBTargetGroup in elbv2 to populate targetGroupArn.",
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "targetGroupArnSelector": {
                    "description": "Selector for a LBTargetGroup in elbv2 to populate targetGroupArn.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": {
                    "description": "Type of routing action. Valid values are forward, redirect, fixed-response, authenticate-cognito and authenticate-oidc.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "loadBalancerArn": {
              "description": "ARN of the load balancer.",
              "type": "string"
            },
            "loadBalancerArnRef": {
              "description": "Reference to a LB in elbv2 to populate loadBalancerArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "loadBalancerArnSelector": {
              "description": "Selector for a LB in elbv2 to populate loadBalancerArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "mutualAuthentication": {
              "description": "The mutual authentication configuration information. See below.",
              "properties": {
                "advertiseTrustStoreCaNames": {
                  "description": "Valid values are off and on.",
                  "type": "string"
                },
                "ignoreClientCertificateExpiry": {
                  "description": "Whether client certificate expiry is ignored. Default is false.",
                  "type": "boolean"
                },
                "mode": {
                  "description": "Valid values are off, verify and passthrough.",
                  "type": "string"
                },
                "trustStoreArn": {
                  "description": "ARN of the elbv2 Trust Store.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "port": {
              "description": "Port on which the load balancer is listening. Not valid for Gateway Load Balancers.",
              "type": "number"
            },
            "protocol": {
              "description": "Protocol for connections from clients to the load balancer. For Application Load Balancers, valid values are HTTP and HTTPS, with a default of HTTP. For Network Load Balancers, valid values are TCP, TLS, UDP, and TCP_UDP. Not valid to use UDP or TCP_UDP if dual-stack mode is enabled. Not valid for Gateway Load Balancers.",
              "type": "string"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "sslPolicy": {
              "description": "Name of the SSL Policy for the listener. Required if protocol is HTTPS or TLS. Default is ELBSecurityPolicy-2016-08.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tcpIdleTimeoutSeconds": {
              "description": "TCP idle timeout value in seconds. Can only be set if protocol is TCP on Network Load Balancer, or with a Gateway Load Balancer. Not supported for Application Load Balancers. Valid values are between 60 and 6000 inclusive. Default: 350.",
              "type": "number"
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "properties": {
            "alpnPolicy": {
              "description": "Name of the Application-Layer Protocol Negotiation (ALPN) policy. Can be set if protocol is TLS. Valid values are HTTP1Only, HTTP2Only, HTTP2Optional, HTTP2Preferred, and None.",
              "type": "string"
            },
            "certificateArn": {
              "description": "ARN of the default SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. For adding additional SSL certificates, see the aws_lb_listener_certificate resource.",
              "type": "string"
            },
            "defaultAction": {
              "description": "Configuration block for default actions. See below.",
              "items": {
                "properties": {
                  "authenticateCognito": {
                    "description": "Configuration block for using Amazon Cognito to authenticate users. Specify only when type is authenticate-cognito. See below.",
                    "properties": {
                      "authenticationRequestExtraParams": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Query parameters to include in the redirect request to the authorization endpoint. Max: 10. See below.",
                        "type": "object",
                        "x-kubernetes-map-type": "granular"
                      },
                      "onUnauthenticatedRequest": {
                        "description": "Behavior if the user is not authenticated. Valid values are deny, allow and authenticate.",
                        "type": "string"
                      },
                      "scope": {
                        "description": "Set of user claims to be requested from the IdP.",
                        "type": "string"
                      },
                      "sessionCookieName": {
                        "description": "Name of the cookie used to maintain session information.",
                        "type": "string"
                      },
                      "sessionTimeout": {
                        "description": "Maximum duration of the authentication session, in seconds.",
                        "type": "number"
                      },
                      "userPoolArn": {
                        "description": "ARN of the Cognito user pool.",
                        "type": "string"
                      },
                      "userPoolClientId": {
                        "description": "ID of the Cognito user pool client.",
                        "type": "string"
                      },
                      "userPoolDomain": {
                        "description": "Domain prefix or fully-qualified domain name of the Cognito user pool.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "authenticateOidc": {
                    "description": "Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when type is authenticate-oidc. See below.",
                    "properties": {
                      "authenticationRequestExtraParams": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Query parameters to include in the redirect request to the authorization endpoint. Max: 10.",
                        "type": "object",
                        "x-kubernetes-map-type": "granular"
                      },
                      "authorizationEndpoint": {
                        "description": "Authorization endpoint of the IdP.",
                        "type": "string"
                      },
                      "clientId": {
                        "description": "OAuth 2.0 client identifier.",
                        "type": "string"
                      },
                      "clientSecretSecretRef": {
                        "description": "OAuth 2.0 client secret.",
                        "properties": {
                          "key": {
                            "description": "The key to select.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the secret.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace of the secret.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "key",
                          "name",
                          "namespace"
                        ],
                        "type": "object",
                        "additionalProperties": false
                      },
                      "issuer": {
                        "description": "OIDC issuer identifier of the IdP.",
                        "type": "string"
                      },
                      "onUnauthenticatedRequest": {
                        "description": "Behavior if the user is not authenticated. Valid values: deny, allow and authenticate",
                        "type": "string"
                      },
                      "scope": {
                        "description": "Set of user claims to be requested from the IdP.",
                        "type": "string"
                      },
                      "sessionCookieName": {
                        "description": "Name of the cookie used to maintain session information.",
                        "type": "string"
                      },
                      "sessionTimeout": {
                        "description": "Maximum duration of the authentication session, in seconds.",
                        "type": "number"
                      },
                      "tokenEndpoint": {
                        "description": "Token endpoint of the IdP.",
                        "type": "string"
                      },
                      "userInfoEndpoint": {
                        "description": "User info endpoint of the IdP.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "clientSecretSecretRef"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "fixedResponse": {
                    "description": "Information for creating an action that returns a custom HTTP response. Required if type is fixed-response.",
                    "properties": {
                      "contentType": {
                        "description": "Content type. Valid values are text/plain, text/css, text/html, application/javascript and application/json.",
                        "type": "string"
                      },
                      "messageBody": {
                        "description": "Message body.",
                        "type": "string"
                      },
                      "statusCode": {
                        "description": "HTTP response code. Valid values are 2XX, 4XX, or 5XX.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "forward": {
                    "description": "Configuration block for creating an action that distributes requests among one or more target groups. Specify only if type is forward. See below.",
                    "properties": {
                      "stickiness": {
                        "description": "Configuration block for target group stickiness for the rule. See below.",
                        "properties": {
                          "duration": {
                            "description": "Time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).",
                            "type": "number"
                          },
                          "enabled": {
                            "description": "Whether target group stickiness is enabled. Default is false.",
                            "type": "boolean"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "targetGroup": {
                        "description": "Set of 1-5 target group blocks. See below.",
                        "items": {
                          "properties": {
                            "arn": {
                              "description": "ARN of the target group.",
                              "type": "string"
                            },
                            "arnRef": {
                              "description": "Reference to a LBTargetGroup in elbv2 to populate arn.",
                              "properties": {
                                "name": {
                                  "description": "Name of the referenced object.",
                                  "type": "string"
                                },
                                "policy": {
                                  "description": "Policies for referencing.",
                                  "properties": {
                                    "resolution": {
                                      "default": "Required",
                                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                      "enum": [
                                        "Required",
                                        "Optional"
                                      ],
                                      "type": "string"
                                    },
                                    "resolve": {
                                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                      "enum": [
                                        "Always",
                                        "IfNotPresent"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "name"
                              ],
                              "type": "object",
                              "additionalProperties": false
                            },
                            "arnSelector": {
                              "description": "Selector for a LBTargetGroup in elbv2 to populate arn.",
                              "properties": {
                                "matchControllerRef": {
                                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                                  "type": "boolean"
                                },
                                "matchLabels": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "MatchLabels ensures an object with matching labels is selected.",
                                  "type": "object"
                                },
                                "policy": {
                                  "description": "Policies for selection.",
                                  "properties": {
                                    "resolution": {
                                      "default": "Required",
                                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                      "enum": [
                                        "Required",
                                        "Optional"
                                      ],
                                      "type": "string"
                                    },
                                    "resolve": {
                                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                      "enum": [
                                        "Always",
                                        "IfNotPresent"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "additionalProperties": false
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            },
                            "weight": {
                              "description": "Weight. The range is 0 to 999.",
                              "type": "number"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "order": {
                    "description": "Order for the action. The action with the lowest value for order is performed first. Valid values are between 1 and 50000. Defaults to the position in the list of actions.",
                    "type": "number"
                  },
                  "redirect": {
                    "description": "Configuration block for creating a redirect action. Required if type is redirect. See below.",
                    "properties": {
                      "host": {
                        "description": "Hostname. This component is not percent-encoded. The hostname can contain #{host}. Defaults to #{host}.",
                        "type": "string"
                      },
                      "path": {
                        "description": "Absolute path, starting with the leading \"/\". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to /#{path}.",
                        "type": "string"
                      },
                      "port": {
                        "description": "Port. Specify a value from 1 to 65535 or #{port}. Defaults to #{port}.",
                        "type": "string"
                      },
                      "protocol": {
                        "description": "Protocol. Valid values are HTTP, HTTPS, or #{protocol}. Defaults to #{protocol}.",
                        "type": "string"
                      },
                      "query": {
                        "description": "Query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading \"?\". Defaults to #{query}.",
                        "type": "string"
                      },
                      "statusCode": {
                        "description": "HTTP redirect code. The redirect is either permanent (HTTP_301) or temporary (HTTP_302).",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "targetGroupArn": {
                    "description": "ARN of the Target Group to which to route traffic. Specify only if type is forward and you want to route to a single target group. To route to one or more target groups, use a forward block instead. Can be specified with forward but ARNs must match.",
                    "type": "string"
                  },
                  "targetGroupArnRef": {
                    "description": "Reference to a LBTargetGroup in elbv2 to populate targetGroupArn.",
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "targetGroupArnSelector": {
                    "description": "Selector for a LBTargetGroup in elbv2 to populate targetGroupArn.",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object"
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "properties": {
                          "resolution": {
                            "default": "Required",
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "enum": [
                              "Required",
                              "Optional"
                            ],
                            "type": "string"
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": {
                    "description": "Type of routing action. Valid values are forward, redirect, fixed-response, authenticate-cognito and authenticate-oidc.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "loadBalancerArn": {
              "description": "ARN of the load balancer.",
              "type": "string"
            },
            "loadBalancerArnRef": {
              "description": "Reference to a LB in elbv2 to populate loadBalancerArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "loadBalancerArnSelector": {
              "description": "Selector for a LB in elbv2 to populate loadBalancerArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "mutualAuthentication": {
              "description": "The mutual authentication configuration information. See below.",
              "properties": {
                "advertiseTrustStoreCaNames": {
                  "description": "Valid values are off and on.",
                  "type": "string"
                },
                "ignoreClientCertificateExpiry": {
                  "description": "Whether client certificate expiry is ignored. Default is false.",
                  "type": "boolean"
                },
                "mode": {
                  "description": "Valid values are off, verify and passthrough.",
                  "type": "string"
                },
                "trustStoreArn": {
                  "description": "ARN of the elbv2 Trust Store.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "port": {
              "description": "Port on which the load balancer is listening. Not valid for Gateway Load Balancers.",
              "type": "number"
            },
            "protocol": {
              "description": "Protocol for connections from clients to the load balancer. For Application Load Balancers, valid values are HTTP and HTTPS, with a default of HTTP. For Network Load Balancers, valid values are TCP, TLS, UDP, and TCP_UDP. Not valid to use UDP or TCP_UDP if dual-stack mode is enabled. Not valid for Gateway Load Balancers.",
              "type": "string"
            },
            "sslPolicy": {
              "description": "Name of the SSL Policy for the listener. Required if protocol is HTTPS or TLS. Default is ELBSecurityPolicy-2016-08.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tcpIdleTimeoutSeconds": {
              "description": "TCP idle timeout value in seconds. Can only be set if protocol is TCP on Network Load Balancer, or with a Gateway Load Balancer. Not supported for Application Load Balancers. Valid values are between 60 and 6000 inclusive. Default: 350.",
              "type": "number"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which\ncontains a name, metadata and a reference to secret store config to\nwhich any connection details for this managed resource should be written.\nConnection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used\nfor this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.annotations\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.labels\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret.\n- Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.\nThis field is planned to be replaced in a future release in favor of\nPublishConnectionDetailsTo. Currently, both could be set independently\nand connection details would be published to both without affecting\neach other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "spec.forProvider.defaultAction is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.defaultAction) || (has(self.initProvider) && has(self.initProvider.defaultAction))"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "LBListenerStatus defines the observed state of LBListener.",
      "properties": {
        "atProvider": {
          "properties": {
            "alpnPolicy": {
              "description": "Name of the Application-Layer Protocol Negotiation (ALPN) policy. Can be set if protocol is TLS. Valid values are HTTP1Only, HTTP2Only, HTTP2Optional, HTTP2Preferred, and None.",
              "type": "string"
            },
            "arn": {
              "description": "ARN of the listener (matches id).",
              "type": "string"
            },
            "certificateArn": {
              "description": "ARN of the default SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. For adding additional SSL certificates, see the aws_lb_listener_certificate resource.",
              "type": "string"
            },
            "defaultAction": {
              "description": "Configuration block for default actions. See below.",
              "items": {
                "properties": {
                  "authenticateCognito": {
                    "description": "Configuration block for using Amazon Cognito to authenticate users. Specify only when type is authenticate-cognito. See below.",
                    "properties": {
                      "authenticationRequestExtraParams": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Query parameters to include in the redirect request to the authorization endpoint. Max: 10. See below.",
                        "type": "object",
                        "x-kubernetes-map-type": "granular"
                      },
                      "onUnauthenticatedRequest": {
                        "description": "Behavior if the user is not authenticated. Valid values are deny, allow and authenticate.",
                        "type": "string"
                      },
                      "scope": {
                        "description": "Set of user claims to be requested from the IdP.",
                        "type": "string"
                      },
                      "sessionCookieName": {
                        "description": "Name of the cookie used to maintain session information.",
                        "type": "string"
                      },
                      "sessionTimeout": {
                        "description": "Maximum duration of the authentication session, in seconds.",
                        "type": "number"
                      },
                      "userPoolArn": {
                        "description": "ARN of the Cognito user pool.",
                        "type": "string"
                      },
                      "userPoolClientId": {
                        "description": "ID of the Cognito user pool client.",
                        "type": "string"
                      },
                      "userPoolDomain": {
                        "description": "Domain prefix or fully-qualified domain name of the Cognito user pool.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "authenticateOidc": {
                    "description": "Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when type is authenticate-oidc. See below.",
                    "properties": {
                      "authenticationRequestExtraParams": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Query parameters to include in the redirect request to the authorization endpoint. Max: 10.",
                        "type": "object",
                        "x-kubernetes-map-type": "granular"
                      },
                      "authorizationEndpoint": {
                        "description": "Authorization endpoint of the IdP.",
                        "type": "string"
                      },
                      "clientId": {
                        "description": "OAuth 2.0 client identifier.",
                        "type": "string"
                      },
                      "issuer": {
                        "description": "OIDC issuer identifier of the IdP.",
                        "type": "string"
                      },
                      "onUnauthenticatedRequest": {
                        "description": "Behavior if the user is not authenticated. Valid values: deny, allow and authenticate",
                        "type": "string"
                      },
                      "scope": {
                        "description": "Set of user claims to be requested from the IdP.",
                        "type": "string"
                      },
                      "sessionCookieName": {
                        "description": "Name of the cookie used to maintain session information.",
                        "type": "string"
                      },
                      "sessionTimeout": {
                        "description": "Maximum duration of the authentication session, in seconds.",
                        "type": "number"
                      },
                      "tokenEndpoint": {
                        "description": "Token endpoint of the IdP.",
                        "type": "string"
                      },
                      "userInfoEndpoint": {
                        "description": "User info endpoint of the IdP.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "fixedResponse": {
                    "description": "Information for creating an action that returns a custom HTTP response. Required if type is fixed-response.",
                    "properties": {
                      "contentType": {
                        "description": "Content type. Valid values are text/plain, text/css, text/html, application/javascript and application/json.",
                        "type": "string"
                      },
                      "messageBody": {
                        "description": "Message body.",
                        "type": "string"
                      },
                      "statusCode": {
                        "description": "HTTP response code. Valid values are 2XX, 4XX, or 5XX.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "forward": {
                    "description": "Configuration block for creating an action that distributes requests among one or more target groups. Specify only if type is forward. See below.",
                    "properties": {
                      "stickiness": {
                        "description": "Configuration block for target group stickiness for the rule. See below.",
                        "properties": {
                          "duration": {
                            "description": "Time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).",
                            "type": "number"
                          },
                          "enabled": {
                            "description": "Whether target group stickiness is enabled. Default is false.",
                            "type": "boolean"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "targetGroup": {
                        "description": "Set of 1-5 target group blocks. See below.",
                        "items": {
                          "properties": {
                            "arn": {
                              "description": "ARN of the target group.",
                              "type": "string"
                            },
                            "weight": {
                              "description": "Weight. The range is 0 to 999.",
                              "type": "number"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "order": {
                    "description": "Order for the action. The action with the lowest value for order is performed first. Valid values are between 1 and 50000. Defaults to the position in the list of actions.",
                    "type": "number"
                  },
                  "redirect": {
                    "description": "Configuration block for creating a redirect action. Required if type is redirect. See below.",
                    "properties": {
                      "host": {
                        "description": "Hostname. This component is not percent-encoded. The hostname can contain #{host}. Defaults to #{host}.",
                        "type": "string"
                      },
                      "path": {
                        "description": "Absolute path, starting with the leading \"/\". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to /#{path}.",
                        "type": "string"
                      },
                      "port": {
                        "description": "Port. Specify a value from 1 to 65535 or #{port}. Defaults to #{port}.",
                        "type": "string"
                      },
                      "protocol": {
                        "description": "Protocol. Valid values are HTTP, HTTPS, or #{protocol}. Defaults to #{protocol}.",
                        "type": "string"
                      },
                      "query": {
                        "description": "Query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading \"?\". Defaults to #{query}.",
                        "type": "string"
                      },
                      "statusCode": {
                        "description": "HTTP redirect code. The redirect is either permanent (HTTP_301) or temporary (HTTP_302).",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "targetGroupArn": {
                    "description": "ARN of the Target Group to which to route traffic. Specify only if type is forward and you want to route to a single target group. To route to one or more target groups, use a forward block instead. Can be specified with forward but ARNs must match.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of routing action. Valid values are forward, redirect, fixed-response, authenticate-cognito and authenticate-oidc.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "id": {
              "description": "ARN of the listener (matches arn).",
              "type": "string"
            },
            "loadBalancerArn": {
              "description": "ARN of the load balancer.",
              "type": "string"
            },
            "mutualAuthentication": {
              "description": "The mutual authentication configuration information. See below.",
              "properties": {
                "advertiseTrustStoreCaNames": {
                  "description": "Valid values are off and on.",
                  "type": "string"
                },
                "ignoreClientCertificateExpiry": {
                  "description": "Whether client certificate expiry is ignored. Default is false.",
                  "type": "boolean"
                },
                "mode": {
                  "description": "Valid values are off, verify and passthrough.",
                  "type": "string"
                },
                "trustStoreArn": {
                  "description": "ARN of the elbv2 Trust Store.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "port": {
              "description": "Port on which the load balancer is listening. Not valid for Gateway Load Balancers.",
              "type": "number"
            },
            "protocol": {
              "description": "Protocol for connections from clients to the load balancer. For Application Load Balancers, valid values are HTTP and HTTPS, with a default of HTTP. For Network Load Balancers, valid values are TCP, TLS, UDP, and TCP_UDP. Not valid to use UDP or TCP_UDP if dual-stack mode is enabled. Not valid for Gateway Load Balancers.",
              "type": "string"
            },
            "sslPolicy": {
              "description": "Name of the SSL Policy for the listener. Required if protocol is HTTPS or TLS. Default is ELBSecurityPolicy-2016-08.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tcpIdleTimeoutSeconds": {
              "description": "TCP idle timeout value in seconds. Can only be set if protocol is TCP on Network Load Balancer, or with a Gateway Load Balancer. Not supported for Application Load Balancers. Valid values are between 60 and 6000 inclusive. Default: 350.",
              "type": "number"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
