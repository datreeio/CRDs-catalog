{
  "description": "ELB is the Schema for the ELBs API. Provides an Elastic Load Balancer resource.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ELBSpec defines the desired state of ELB",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "accessLogs": {
              "description": "An Access Logs block. Access Logs documented below.",
              "items": {
                "properties": {
                  "bucket": {
                    "description": "The S3 bucket name to store the logs in.",
                    "type": "string"
                  },
                  "bucketPrefix": {
                    "description": "The S3 bucket prefix. Logs are stored in the root if not configured.",
                    "type": "string"
                  },
                  "enabled": {
                    "description": "Boolean to enable / disable access_logs. Default is true",
                    "type": "boolean"
                  },
                  "interval": {
                    "description": "The publishing interval in minutes. Valid values: 5 and 60. Default: 60",
                    "type": "number"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "availabilityZones": {
              "description": "The AZ's to serve traffic in.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "connectionDraining": {
              "description": "Boolean to enable connection draining. Default: false",
              "type": "boolean"
            },
            "connectionDrainingTimeout": {
              "description": "The time in seconds to allow for connections to drain. Default: 300",
              "type": "number"
            },
            "crossZoneLoadBalancing": {
              "description": "Enable cross-zone load balancing. Default: true",
              "type": "boolean"
            },
            "desyncMitigationMode": {
              "description": "Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are monitor, defensive (default), strictest.",
              "type": "string"
            },
            "healthCheck": {
              "description": "A health_check block. Health Check documented below.",
              "items": {
                "properties": {
                  "healthyThreshold": {
                    "description": "The number of checks before the instance is declared healthy.",
                    "type": "number"
                  },
                  "interval": {
                    "description": "The publishing interval in minutes. Valid values: 5 and 60. Default: 60",
                    "type": "number"
                  },
                  "target": {
                    "description": "The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL\nvalues are:",
                    "type": "string"
                  },
                  "timeout": {
                    "description": "The length of time before the check times out.",
                    "type": "number"
                  },
                  "unhealthyThreshold": {
                    "description": "The number of checks before the instance is declared unhealthy.",
                    "type": "number"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "idleTimeout": {
              "description": "The time in seconds that the connection is allowed to be idle. Default: 60",
              "type": "number"
            },
            "instances": {
              "description": "A list of instance ids to place in the ELB pool.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "instancesRefs": {
              "description": "References to Instance in ec2 to populate instances.",
              "items": {
                "description": "A Reference to a named object.",
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "properties": {
                      "resolution": {
                        "default": "Required",
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "enum": [
                          "Required",
                          "Optional"
                        ],
                        "type": "string"
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "instancesSelector": {
              "description": "Selector for a list of Instance in ec2 to populate instances.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "internal": {
              "description": "If true, ELB will be an internal ELB.",
              "type": "boolean"
            },
            "listener": {
              "description": "A list of listener blocks. Listeners documented below.",
              "items": {
                "properties": {
                  "instancePort": {
                    "description": "The port on the instance to route to",
                    "type": "number"
                  },
                  "instanceProtocol": {
                    "description": "The protocol to use to the instance. Valid\nvalues are HTTP, HTTPS, TCP, or SSL",
                    "type": "string"
                  },
                  "lbPort": {
                    "description": "The port to listen on for the load balancer",
                    "type": "number"
                  },
                  "lbProtocol": {
                    "description": "The protocol to listen on. Valid values are HTTP,\nHTTPS, TCP, or SSL",
                    "type": "string"
                  },
                  "sslCertificateId": {
                    "description": "The ARN of an SSL certificate you have\nuploaded to AWS IAM. Note ECDSA-specific restrictions below.  Only valid when",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "securityGroups": {
              "description": "A list of security group IDs to assign to the ELB.\nOnly valid if creating an ELB within a VPC",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "sourceSecurityGroup": {
              "description": "The name of the security group that you can use as\npart of your inbound rules for your load balancer's back-end application\ninstances. Use this for Classic or Default VPC only.",
              "type": "string"
            },
            "subnets": {
              "description": "A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "subnetsRefs": {
              "description": "References to Subnet in ec2 to populate subnets.",
              "items": {
                "description": "A Reference to a named object.",
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "properties": {
                      "resolution": {
                        "default": "Required",
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "enum": [
                          "Required",
                          "Optional"
                        ],
                        "type": "string"
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "subnetsSelector": {
              "description": "Selector for a list of Subnet in ec2 to populate subnets.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "properties": {
            "accessLogs": {
              "description": "An Access Logs block. Access Logs documented below.",
              "items": {
                "properties": {
                  "bucket": {
                    "description": "The S3 bucket name to store the logs in.",
                    "type": "string"
                  },
                  "bucketPrefix": {
                    "description": "The S3 bucket prefix. Logs are stored in the root if not configured.",
                    "type": "string"
                  },
                  "enabled": {
                    "description": "Boolean to enable / disable access_logs. Default is true",
                    "type": "boolean"
                  },
                  "interval": {
                    "description": "The publishing interval in minutes. Valid values: 5 and 60. Default: 60",
                    "type": "number"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "availabilityZones": {
              "description": "The AZ's to serve traffic in.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "connectionDraining": {
              "description": "Boolean to enable connection draining. Default: false",
              "type": "boolean"
            },
            "connectionDrainingTimeout": {
              "description": "The time in seconds to allow for connections to drain. Default: 300",
              "type": "number"
            },
            "crossZoneLoadBalancing": {
              "description": "Enable cross-zone load balancing. Default: true",
              "type": "boolean"
            },
            "desyncMitigationMode": {
              "description": "Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are monitor, defensive (default), strictest.",
              "type": "string"
            },
            "healthCheck": {
              "description": "A health_check block. Health Check documented below.",
              "items": {
                "properties": {
                  "healthyThreshold": {
                    "description": "The number of checks before the instance is declared healthy.",
                    "type": "number"
                  },
                  "interval": {
                    "description": "The publishing interval in minutes. Valid values: 5 and 60. Default: 60",
                    "type": "number"
                  },
                  "target": {
                    "description": "The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL\nvalues are:",
                    "type": "string"
                  },
                  "timeout": {
                    "description": "The length of time before the check times out.",
                    "type": "number"
                  },
                  "unhealthyThreshold": {
                    "description": "The number of checks before the instance is declared unhealthy.",
                    "type": "number"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "idleTimeout": {
              "description": "The time in seconds that the connection is allowed to be idle. Default: 60",
              "type": "number"
            },
            "instances": {
              "description": "A list of instance ids to place in the ELB pool.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "instancesRefs": {
              "description": "References to Instance in ec2 to populate instances.",
              "items": {
                "description": "A Reference to a named object.",
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "properties": {
                      "resolution": {
                        "default": "Required",
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "enum": [
                          "Required",
                          "Optional"
                        ],
                        "type": "string"
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "instancesSelector": {
              "description": "Selector for a list of Instance in ec2 to populate instances.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "internal": {
              "description": "If true, ELB will be an internal ELB.",
              "type": "boolean"
            },
            "listener": {
              "description": "A list of listener blocks. Listeners documented below.",
              "items": {
                "properties": {
                  "instancePort": {
                    "description": "The port on the instance to route to",
                    "type": "number"
                  },
                  "instanceProtocol": {
                    "description": "The protocol to use to the instance. Valid\nvalues are HTTP, HTTPS, TCP, or SSL",
                    "type": "string"
                  },
                  "lbPort": {
                    "description": "The port to listen on for the load balancer",
                    "type": "number"
                  },
                  "lbProtocol": {
                    "description": "The protocol to listen on. Valid values are HTTP,\nHTTPS, TCP, or SSL",
                    "type": "string"
                  },
                  "sslCertificateId": {
                    "description": "The ARN of an SSL certificate you have\nuploaded to AWS IAM. Note ECDSA-specific restrictions below.  Only valid when",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "securityGroups": {
              "description": "A list of security group IDs to assign to the ELB.\nOnly valid if creating an ELB within a VPC",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "sourceSecurityGroup": {
              "description": "The name of the security group that you can use as\npart of your inbound rules for your load balancer's back-end application\ninstances. Use this for Classic or Default VPC only.",
              "type": "string"
            },
            "subnets": {
              "description": "A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "subnetsRefs": {
              "description": "References to Subnet in ec2 to populate subnets.",
              "items": {
                "description": "A Reference to a named object.",
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "properties": {
                      "resolution": {
                        "default": "Required",
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "enum": [
                          "Required",
                          "Optional"
                        ],
                        "type": "string"
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "subnetsSelector": {
              "description": "Selector for a list of Subnet in ec2 to populate subnets.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which\ncontains a name, metadata and a reference to secret store config to\nwhich any connection details for this managed resource should be written.\nConnection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used\nfor this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.annotations\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.labels\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret.\n- Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.\nThis field is planned to be replaced in a future release in favor of\nPublishConnectionDetailsTo. Currently, both could be set independently\nand connection details would be published to both without affecting\neach other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "spec.forProvider.listener is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.listener) || (has(self.initProvider) && has(self.initProvider.listener))"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "ELBStatus defines the observed state of ELB.",
      "properties": {
        "atProvider": {
          "properties": {
            "accessLogs": {
              "description": "An Access Logs block. Access Logs documented below.",
              "items": {
                "properties": {
                  "bucket": {
                    "description": "The S3 bucket name to store the logs in.",
                    "type": "string"
                  },
                  "bucketPrefix": {
                    "description": "The S3 bucket prefix. Logs are stored in the root if not configured.",
                    "type": "string"
                  },
                  "enabled": {
                    "description": "Boolean to enable / disable access_logs. Default is true",
                    "type": "boolean"
                  },
                  "interval": {
                    "description": "The publishing interval in minutes. Valid values: 5 and 60. Default: 60",
                    "type": "number"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "arn": {
              "description": "The ARN of the ELB",
              "type": "string"
            },
            "availabilityZones": {
              "description": "The AZ's to serve traffic in.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "connectionDraining": {
              "description": "Boolean to enable connection draining. Default: false",
              "type": "boolean"
            },
            "connectionDrainingTimeout": {
              "description": "The time in seconds to allow for connections to drain. Default: 300",
              "type": "number"
            },
            "crossZoneLoadBalancing": {
              "description": "Enable cross-zone load balancing. Default: true",
              "type": "boolean"
            },
            "desyncMitigationMode": {
              "description": "Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are monitor, defensive (default), strictest.",
              "type": "string"
            },
            "dnsName": {
              "description": "The DNS name of the ELB",
              "type": "string"
            },
            "healthCheck": {
              "description": "A health_check block. Health Check documented below.",
              "items": {
                "properties": {
                  "healthyThreshold": {
                    "description": "The number of checks before the instance is declared healthy.",
                    "type": "number"
                  },
                  "interval": {
                    "description": "The publishing interval in minutes. Valid values: 5 and 60. Default: 60",
                    "type": "number"
                  },
                  "target": {
                    "description": "The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL\nvalues are:",
                    "type": "string"
                  },
                  "timeout": {
                    "description": "The length of time before the check times out.",
                    "type": "number"
                  },
                  "unhealthyThreshold": {
                    "description": "The number of checks before the instance is declared unhealthy.",
                    "type": "number"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "id": {
              "description": "The name of the ELB",
              "type": "string"
            },
            "idleTimeout": {
              "description": "The time in seconds that the connection is allowed to be idle. Default: 60",
              "type": "number"
            },
            "instances": {
              "description": "A list of instance ids to place in the ELB pool.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "internal": {
              "description": "If true, ELB will be an internal ELB.",
              "type": "boolean"
            },
            "listener": {
              "description": "A list of listener blocks. Listeners documented below.",
              "items": {
                "properties": {
                  "instancePort": {
                    "description": "The port on the instance to route to",
                    "type": "number"
                  },
                  "instanceProtocol": {
                    "description": "The protocol to use to the instance. Valid\nvalues are HTTP, HTTPS, TCP, or SSL",
                    "type": "string"
                  },
                  "lbPort": {
                    "description": "The port to listen on for the load balancer",
                    "type": "number"
                  },
                  "lbProtocol": {
                    "description": "The protocol to listen on. Valid values are HTTP,\nHTTPS, TCP, or SSL",
                    "type": "string"
                  },
                  "sslCertificateId": {
                    "description": "The ARN of an SSL certificate you have\nuploaded to AWS IAM. Note ECDSA-specific restrictions below.  Only valid when",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "securityGroups": {
              "description": "A list of security group IDs to assign to the ELB.\nOnly valid if creating an ELB within a VPC",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "sourceSecurityGroup": {
              "description": "The name of the security group that you can use as\npart of your inbound rules for your load balancer's back-end application\ninstances. Use this for Classic or Default VPC only.",
              "type": "string"
            },
            "sourceSecurityGroupId": {
              "description": "The ID of the security group that you can use as\npart of your inbound rules for your load balancer's back-end application\ninstances. Only available on ELBs launched in a VPC.",
              "type": "string"
            },
            "subnets": {
              "description": "A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "zoneId": {
              "description": "The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
