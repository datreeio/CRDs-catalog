{
  "description": "TaskDefinition is the Schema for the TaskDefinitions API. Manages a revision of an ECS task definition.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "TaskDefinitionSpec defines the desired state of TaskDefinition",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "containerDefinitions": {
              "description": "A list of valid container definitions provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the Task Definition Parameters section from the official Developer Guide.",
              "type": "string"
            },
            "cpu": {
              "description": "Number of cpu units used by the task. If the requires_compatibilities is FARGATE this field is required.",
              "type": "string"
            },
            "ephemeralStorage": {
              "description": "The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.",
              "items": {
                "properties": {
                  "sizeInGib": {
                    "description": "The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.",
                    "type": "number"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "executionRoleArn": {
              "description": "ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.",
              "type": "string"
            },
            "executionRoleArnRef": {
              "description": "Reference to a Role in iam to populate executionRoleArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "executionRoleArnSelector": {
              "description": "Selector for a Role in iam to populate executionRoleArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "family": {
              "description": "A unique name for your task definition.",
              "type": "string"
            },
            "inferenceAccelerator": {
              "description": "Configuration block(s) with Inference Accelerators settings. Detailed below.",
              "items": {
                "properties": {
                  "deviceName": {
                    "description": "Elastic Inference accelerator device name. The deviceName must also be referenced in a container definition as a ResourceRequirement.",
                    "type": "string"
                  },
                  "deviceType": {
                    "description": "Elastic Inference accelerator type to use.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "ipcMode": {
              "description": "IPC resource namespace to be used for the containers in the task The valid values are host, task, and none.",
              "type": "string"
            },
            "memory": {
              "description": "Amount (in MiB) of memory used by the task. If the requires_compatibilities is FARGATE this field is required.",
              "type": "string"
            },
            "networkMode": {
              "description": "Docker networking mode to use for the containers in the task. Valid values are none, bridge, awsvpc, and host.",
              "type": "string"
            },
            "pidMode": {
              "description": "Process namespace to use for the containers in the task. The valid values are host and task.",
              "type": "string"
            },
            "placementConstraints": {
              "description": "Configuration block for rules that are taken into consideration during task placement. Maximum number of placement_constraints is 10. Detailed below.",
              "items": {
                "properties": {
                  "expression": {
                    "description": "Cluster Query Language expression to apply to the constraint. For more information, see Cluster Query Language in the Amazon EC2 Container Service Developer Guide.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of constraint. Use memberOf to restrict selection to a group of valid candidates. Note that distinctInstance is not supported in task definitions.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "proxyConfiguration": {
              "description": "Configuration block for the App Mesh proxy. Detailed below.",
              "items": {
                "properties": {
                  "containerName": {
                    "description": "Name of the container that will serve as the App Mesh proxy.",
                    "type": "string"
                  },
                  "properties": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.",
                    "type": "object",
                    "x-kubernetes-map-type": "granular"
                  },
                  "type": {
                    "description": "Proxy type. The default value is APPMESH. The only supported value is APPMESH.",
                    "type": "string"
                  },
                  "additionalProperties": false
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "requiresCompatibilities": {
              "description": "Set of launch types required by the task. The valid values are EC2 and FARGATE.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "runtimePlatform": {
              "description": "Configuration block for runtime_platform that containers in your task may use.",
              "items": {
                "properties": {
                  "cpuArchitecture": {
                    "description": "Must be set to either X86_64 or ARM64; see cpu architecture",
                    "type": "string"
                  },
                  "operatingSystemFamily": {
                    "description": "If the requires_compatibilities is FARGATE this field is required; must be set to a valid option from the operating system family in the runtime platform setting",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "skipDestroy": {
              "description": "Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is false.",
              "type": "boolean"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "taskRoleArn": {
              "description": "ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.",
              "type": "string"
            },
            "volume": {
              "description": "Configuration block for volumes that containers in your task may use. Detailed below.",
              "items": {
                "properties": {
                  "dockerVolumeConfiguration": {
                    "description": "Configuration block to configure a docker volume. Detailed below.",
                    "items": {
                      "properties": {
                        "autoprovision": {
                          "description": "If this value is true, the Docker volume is created if it does not already exist. Note: This field is only used if the scope is shared.",
                          "type": "boolean"
                        },
                        "driver": {
                          "description": "Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.",
                          "type": "string"
                        },
                        "driverOpts": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Map of Docker driver specific options.",
                          "type": "object",
                          "x-kubernetes-map-type": "granular"
                        },
                        "labels": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Map of custom metadata to add to your Docker volume.",
                          "type": "object",
                          "x-kubernetes-map-type": "granular"
                        },
                        "scope": {
                          "description": "Scope for the Docker volume, which determines its lifecycle, either task or shared.  Docker volumes that are scoped to a task are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as shared persist after the task stops.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "efsVolumeConfiguration": {
                    "description": "Configuration block for an EFS volume. Detailed below.",
                    "items": {
                      "properties": {
                        "authorizationConfig": {
                          "description": "Configuration block for authorization for the Amazon EFS file system. Detailed below.",
                          "items": {
                            "properties": {
                              "accessPointId": {
                                "description": "Access point ID to use. If an access point is specified, the root directory value will be relative to the directory set for the access point. If specified, transit encryption must be enabled in the EFSVolumeConfiguration.",
                                "type": "string"
                              },
                              "iam": {
                                "description": "Whether or not to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. Valid values: ENABLED, DISABLED. If this parameter is omitted, the default value of DISABLED is used.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "fileSystemId": {
                          "description": "ID of the EFS File System.",
                          "type": "string"
                        },
                        "rootDirectory": {
                          "description": "Directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying / will have the same effect as omitting this parameter. This argument is ignored when using authorization_config.",
                          "type": "string"
                        },
                        "transitEncryption": {
                          "description": "Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: ENABLED, DISABLED. If this parameter is omitted, the default value of DISABLED is used.",
                          "type": "string"
                        },
                        "transitEncryptionPort": {
                          "description": "Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "fsxWindowsFileServerVolumeConfiguration": {
                    "description": "Configuration block for an FSX Windows File Server volume. Detailed below.",
                    "items": {
                      "properties": {
                        "authorizationConfig": {
                          "description": "Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.",
                          "items": {
                            "properties": {
                              "credentialsParameter": {
                                "description": "The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an AWS Secrets Manager secret or AWS Systems Manager Parameter Store parameter. The ARNs refer to the stored credentials.",
                                "type": "string"
                              },
                              "domain": {
                                "description": "A fully qualified domain name hosted by an AWS Directory Service Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "fileSystemId": {
                          "description": "The Amazon FSx for Windows File Server file system ID to use.",
                          "type": "string"
                        },
                        "rootDirectory": {
                          "description": "The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "hostPath": {
                    "description": "Path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the volume. This name is referenced in the sourceVolume parameter of container definition in the mountPoints section.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "properties": {
            "containerDefinitions": {
              "description": "A list of valid container definitions provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the Task Definition Parameters section from the official Developer Guide.",
              "type": "string"
            },
            "cpu": {
              "description": "Number of cpu units used by the task. If the requires_compatibilities is FARGATE this field is required.",
              "type": "string"
            },
            "ephemeralStorage": {
              "description": "The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.",
              "items": {
                "properties": {
                  "sizeInGib": {
                    "description": "The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.",
                    "type": "number"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "executionRoleArn": {
              "description": "ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.",
              "type": "string"
            },
            "executionRoleArnRef": {
              "description": "Reference to a Role in iam to populate executionRoleArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "executionRoleArnSelector": {
              "description": "Selector for a Role in iam to populate executionRoleArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "family": {
              "description": "A unique name for your task definition.",
              "type": "string"
            },
            "inferenceAccelerator": {
              "description": "Configuration block(s) with Inference Accelerators settings. Detailed below.",
              "items": {
                "properties": {
                  "deviceName": {
                    "description": "Elastic Inference accelerator device name. The deviceName must also be referenced in a container definition as a ResourceRequirement.",
                    "type": "string"
                  },
                  "deviceType": {
                    "description": "Elastic Inference accelerator type to use.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "ipcMode": {
              "description": "IPC resource namespace to be used for the containers in the task The valid values are host, task, and none.",
              "type": "string"
            },
            "memory": {
              "description": "Amount (in MiB) of memory used by the task. If the requires_compatibilities is FARGATE this field is required.",
              "type": "string"
            },
            "networkMode": {
              "description": "Docker networking mode to use for the containers in the task. Valid values are none, bridge, awsvpc, and host.",
              "type": "string"
            },
            "pidMode": {
              "description": "Process namespace to use for the containers in the task. The valid values are host and task.",
              "type": "string"
            },
            "placementConstraints": {
              "description": "Configuration block for rules that are taken into consideration during task placement. Maximum number of placement_constraints is 10. Detailed below.",
              "items": {
                "properties": {
                  "expression": {
                    "description": "Cluster Query Language expression to apply to the constraint. For more information, see Cluster Query Language in the Amazon EC2 Container Service Developer Guide.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of constraint. Use memberOf to restrict selection to a group of valid candidates. Note that distinctInstance is not supported in task definitions.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "proxyConfiguration": {
              "description": "Configuration block for the App Mesh proxy. Detailed below.",
              "items": {
                "properties": {
                  "containerName": {
                    "description": "Name of the container that will serve as the App Mesh proxy.",
                    "type": "string"
                  },
                  "properties": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.",
                    "type": "object",
                    "x-kubernetes-map-type": "granular"
                  },
                  "type": {
                    "description": "Proxy type. The default value is APPMESH. The only supported value is APPMESH.",
                    "type": "string"
                  },
                  "additionalProperties": false
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "requiresCompatibilities": {
              "description": "Set of launch types required by the task. The valid values are EC2 and FARGATE.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "runtimePlatform": {
              "description": "Configuration block for runtime_platform that containers in your task may use.",
              "items": {
                "properties": {
                  "cpuArchitecture": {
                    "description": "Must be set to either X86_64 or ARM64; see cpu architecture",
                    "type": "string"
                  },
                  "operatingSystemFamily": {
                    "description": "If the requires_compatibilities is FARGATE this field is required; must be set to a valid option from the operating system family in the runtime platform setting",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "skipDestroy": {
              "description": "Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is false.",
              "type": "boolean"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "taskRoleArn": {
              "description": "ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.",
              "type": "string"
            },
            "volume": {
              "description": "Configuration block for volumes that containers in your task may use. Detailed below.",
              "items": {
                "properties": {
                  "dockerVolumeConfiguration": {
                    "description": "Configuration block to configure a docker volume. Detailed below.",
                    "items": {
                      "properties": {
                        "autoprovision": {
                          "description": "If this value is true, the Docker volume is created if it does not already exist. Note: This field is only used if the scope is shared.",
                          "type": "boolean"
                        },
                        "driver": {
                          "description": "Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.",
                          "type": "string"
                        },
                        "driverOpts": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Map of Docker driver specific options.",
                          "type": "object",
                          "x-kubernetes-map-type": "granular"
                        },
                        "labels": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Map of custom metadata to add to your Docker volume.",
                          "type": "object",
                          "x-kubernetes-map-type": "granular"
                        },
                        "scope": {
                          "description": "Scope for the Docker volume, which determines its lifecycle, either task or shared.  Docker volumes that are scoped to a task are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as shared persist after the task stops.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "efsVolumeConfiguration": {
                    "description": "Configuration block for an EFS volume. Detailed below.",
                    "items": {
                      "properties": {
                        "authorizationConfig": {
                          "description": "Configuration block for authorization for the Amazon EFS file system. Detailed below.",
                          "items": {
                            "properties": {
                              "accessPointId": {
                                "description": "Access point ID to use. If an access point is specified, the root directory value will be relative to the directory set for the access point. If specified, transit encryption must be enabled in the EFSVolumeConfiguration.",
                                "type": "string"
                              },
                              "iam": {
                                "description": "Whether or not to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. Valid values: ENABLED, DISABLED. If this parameter is omitted, the default value of DISABLED is used.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "fileSystemId": {
                          "description": "ID of the EFS File System.",
                          "type": "string"
                        },
                        "rootDirectory": {
                          "description": "Directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying / will have the same effect as omitting this parameter. This argument is ignored when using authorization_config.",
                          "type": "string"
                        },
                        "transitEncryption": {
                          "description": "Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: ENABLED, DISABLED. If this parameter is omitted, the default value of DISABLED is used.",
                          "type": "string"
                        },
                        "transitEncryptionPort": {
                          "description": "Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "fsxWindowsFileServerVolumeConfiguration": {
                    "description": "Configuration block for an FSX Windows File Server volume. Detailed below.",
                    "items": {
                      "properties": {
                        "authorizationConfig": {
                          "description": "Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.",
                          "items": {
                            "properties": {
                              "credentialsParameter": {
                                "description": "The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an AWS Secrets Manager secret or AWS Systems Manager Parameter Store parameter. The ARNs refer to the stored credentials.",
                                "type": "string"
                              },
                              "domain": {
                                "description": "A fully qualified domain name hosted by an AWS Directory Service Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "fileSystemId": {
                          "description": "The Amazon FSx for Windows File Server file system ID to use.",
                          "type": "string"
                        },
                        "rootDirectory": {
                          "description": "The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "hostPath": {
                    "description": "Path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the volume. This name is referenced in the sourceVolume parameter of container definition in the mountPoints section.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "spec.forProvider.containerDefinitions is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.containerDefinitions) || (has(self.initProvider) && has(self.initProvider.containerDefinitions))"
        },
        {
          "message": "spec.forProvider.family is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.family) || (has(self.initProvider) && has(self.initProvider.family))"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "TaskDefinitionStatus defines the observed state of TaskDefinition.",
      "properties": {
        "atProvider": {
          "properties": {
            "arn": {
              "description": "Full ARN of the Task Definition (including both family and revision).",
              "type": "string"
            },
            "arnWithoutRevision": {
              "description": "ARN of the Task Definition with the trailing revision removed. This may be useful for situations where the latest task definition is always desired. If a revision isn't specified, the latest ACTIVE revision is used. See the AWS documentation for details.",
              "type": "string"
            },
            "containerDefinitions": {
              "description": "A list of valid container definitions provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the Task Definition Parameters section from the official Developer Guide.",
              "type": "string"
            },
            "cpu": {
              "description": "Number of cpu units used by the task. If the requires_compatibilities is FARGATE this field is required.",
              "type": "string"
            },
            "ephemeralStorage": {
              "description": "The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.",
              "items": {
                "properties": {
                  "sizeInGib": {
                    "description": "The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.",
                    "type": "number"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "executionRoleArn": {
              "description": "ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.",
              "type": "string"
            },
            "family": {
              "description": "A unique name for your task definition.",
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "inferenceAccelerator": {
              "description": "Configuration block(s) with Inference Accelerators settings. Detailed below.",
              "items": {
                "properties": {
                  "deviceName": {
                    "description": "Elastic Inference accelerator device name. The deviceName must also be referenced in a container definition as a ResourceRequirement.",
                    "type": "string"
                  },
                  "deviceType": {
                    "description": "Elastic Inference accelerator type to use.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "ipcMode": {
              "description": "IPC resource namespace to be used for the containers in the task The valid values are host, task, and none.",
              "type": "string"
            },
            "memory": {
              "description": "Amount (in MiB) of memory used by the task. If the requires_compatibilities is FARGATE this field is required.",
              "type": "string"
            },
            "networkMode": {
              "description": "Docker networking mode to use for the containers in the task. Valid values are none, bridge, awsvpc, and host.",
              "type": "string"
            },
            "pidMode": {
              "description": "Process namespace to use for the containers in the task. The valid values are host and task.",
              "type": "string"
            },
            "placementConstraints": {
              "description": "Configuration block for rules that are taken into consideration during task placement. Maximum number of placement_constraints is 10. Detailed below.",
              "items": {
                "properties": {
                  "expression": {
                    "description": "Cluster Query Language expression to apply to the constraint. For more information, see Cluster Query Language in the Amazon EC2 Container Service Developer Guide.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of constraint. Use memberOf to restrict selection to a group of valid candidates. Note that distinctInstance is not supported in task definitions.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "proxyConfiguration": {
              "description": "Configuration block for the App Mesh proxy. Detailed below.",
              "items": {
                "properties": {
                  "containerName": {
                    "description": "Name of the container that will serve as the App Mesh proxy.",
                    "type": "string"
                  },
                  "properties": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.",
                    "type": "object",
                    "x-kubernetes-map-type": "granular"
                  },
                  "type": {
                    "description": "Proxy type. The default value is APPMESH. The only supported value is APPMESH.",
                    "type": "string"
                  },
                  "additionalProperties": false
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "requiresCompatibilities": {
              "description": "Set of launch types required by the task. The valid values are EC2 and FARGATE.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "revision": {
              "description": "Revision of the task in a particular family.",
              "type": "number"
            },
            "runtimePlatform": {
              "description": "Configuration block for runtime_platform that containers in your task may use.",
              "items": {
                "properties": {
                  "cpuArchitecture": {
                    "description": "Must be set to either X86_64 or ARM64; see cpu architecture",
                    "type": "string"
                  },
                  "operatingSystemFamily": {
                    "description": "If the requires_compatibilities is FARGATE this field is required; must be set to a valid option from the operating system family in the runtime platform setting",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "skipDestroy": {
              "description": "Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is false.",
              "type": "boolean"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "taskRoleArn": {
              "description": "ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.",
              "type": "string"
            },
            "volume": {
              "description": "Configuration block for volumes that containers in your task may use. Detailed below.",
              "items": {
                "properties": {
                  "dockerVolumeConfiguration": {
                    "description": "Configuration block to configure a docker volume. Detailed below.",
                    "items": {
                      "properties": {
                        "autoprovision": {
                          "description": "If this value is true, the Docker volume is created if it does not already exist. Note: This field is only used if the scope is shared.",
                          "type": "boolean"
                        },
                        "driver": {
                          "description": "Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.",
                          "type": "string"
                        },
                        "driverOpts": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Map of Docker driver specific options.",
                          "type": "object",
                          "x-kubernetes-map-type": "granular"
                        },
                        "labels": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Map of custom metadata to add to your Docker volume.",
                          "type": "object",
                          "x-kubernetes-map-type": "granular"
                        },
                        "scope": {
                          "description": "Scope for the Docker volume, which determines its lifecycle, either task or shared.  Docker volumes that are scoped to a task are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as shared persist after the task stops.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "efsVolumeConfiguration": {
                    "description": "Configuration block for an EFS volume. Detailed below.",
                    "items": {
                      "properties": {
                        "authorizationConfig": {
                          "description": "Configuration block for authorization for the Amazon EFS file system. Detailed below.",
                          "items": {
                            "properties": {
                              "accessPointId": {
                                "description": "Access point ID to use. If an access point is specified, the root directory value will be relative to the directory set for the access point. If specified, transit encryption must be enabled in the EFSVolumeConfiguration.",
                                "type": "string"
                              },
                              "iam": {
                                "description": "Whether or not to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. Valid values: ENABLED, DISABLED. If this parameter is omitted, the default value of DISABLED is used.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "fileSystemId": {
                          "description": "ID of the EFS File System.",
                          "type": "string"
                        },
                        "rootDirectory": {
                          "description": "Directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying / will have the same effect as omitting this parameter. This argument is ignored when using authorization_config.",
                          "type": "string"
                        },
                        "transitEncryption": {
                          "description": "Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: ENABLED, DISABLED. If this parameter is omitted, the default value of DISABLED is used.",
                          "type": "string"
                        },
                        "transitEncryptionPort": {
                          "description": "Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "fsxWindowsFileServerVolumeConfiguration": {
                    "description": "Configuration block for an FSX Windows File Server volume. Detailed below.",
                    "items": {
                      "properties": {
                        "authorizationConfig": {
                          "description": "Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.",
                          "items": {
                            "properties": {
                              "credentialsParameter": {
                                "description": "The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an AWS Secrets Manager secret or AWS Systems Manager Parameter Store parameter. The ARNs refer to the stored credentials.",
                                "type": "string"
                              },
                              "domain": {
                                "description": "A fully qualified domain name hosted by an AWS Directory Service Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.",
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "fileSystemId": {
                          "description": "The Amazon FSx for Windows File Server file system ID to use.",
                          "type": "string"
                        },
                        "rootDirectory": {
                          "description": "The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "hostPath": {
                    "description": "Path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the volume. This name is referenced in the sourceVolume parameter of container definition in the mountPoints section.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                "type": "string"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
