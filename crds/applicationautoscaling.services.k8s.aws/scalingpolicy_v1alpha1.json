{
  "description": "ScalingPolicy is the Schema for the ScalingPolicies API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ScalingPolicySpec defines the desired state of ScalingPolicy. \n Represents a scaling policy to use with Application Auto Scaling. \n For more information about configuring scaling policies for a specific service, see Getting started with Application Auto Scaling (https://docs.aws.amazon.com/autoscaling/application/userguide/getting-started.html) in the Application Auto Scaling User Guide.",
      "properties": {
        "policyName": {
          "description": "The name of the scaling policy.",
          "type": "string"
        },
        "policyType": {
          "description": "The policy type. This parameter is required if you are creating a scaling policy. \n The following policy types are supported: \n # TargetTrackingScaling\u2014Not supported for Amazon EMR \n StepScaling\u2014Not supported for DynamoDB, Amazon Comprehend, Lambda, Amazon Keyspaces, Amazon MSK, Amazon ElastiCache, or Neptune. \n For more information, see Target tracking scaling policies (https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html) and Step scaling policies (https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html) in the Application Auto Scaling User Guide.",
          "type": "string"
        },
        "resourceID": {
          "description": "The identifier of the resource associated with the scaling policy. This string consists of the resource type and unique identifier. \n - ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp. \n - Spot Fleet - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE. \n - EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0. \n - AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet. \n - DynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table. \n - DynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index. \n - Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster. \n - SageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering. \n - Custom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository (https://github.com/aws/aws-auto-scaling-custom-resource). \n - Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE. \n - Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE. \n - Lambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST. Example: function:my-function:prod or function:my-function:1. \n - Amazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable. \n - Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN. Example: arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5. \n - Amazon ElastiCache replication group - The resource type is replication-group and the unique identifier is the replication group name. Example: replication-group/mycluster. \n - Neptune cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:mycluster.",
          "type": "string"
        },
        "scalableDimension": {
          "description": "The scalable dimension. This string consists of the service namespace, resource type, and scaling property. \n - ecs:service:DesiredCount - The desired task count of an ECS service. \n - elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group. \n - ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet. \n - appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet. \n - dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table. \n - dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table. \n - dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index. \n - dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index. \n - rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition. \n - sagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an SageMaker model endpoint variant. \n - custom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service. \n - comprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint. \n - comprehend:entity-recognizer-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend entity recognizer endpoint. \n - lambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function. \n - cassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table. \n - cassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table. \n - kafka:broker-storage:VolumeSize - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster. \n - elasticache:replication-group:NodeGroups - The number of node groups for an Amazon ElastiCache replication group. \n - elasticache:replication-group:Replicas - The number of replicas per node group for an Amazon ElastiCache replication group. \n - neptune:cluster:ReadReplicaCount - The count of read replicas in an Amazon Neptune DB cluster.",
          "type": "string"
        },
        "serviceNamespace": {
          "description": "The namespace of the Amazon Web Services service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.",
          "type": "string"
        },
        "stepScalingPolicyConfiguration": {
          "description": "A step scaling policy. \n This parameter is required if you are creating a policy and the policy type is StepScaling.",
          "properties": {
            "adjustmentType": {
              "type": "string"
            },
            "cooldown": {
              "format": "int64",
              "type": "integer"
            },
            "metricAggregationType": {
              "type": "string"
            },
            "minAdjustmentMagnitude": {
              "format": "int64",
              "type": "integer"
            },
            "stepAdjustments": {
              "items": {
                "description": "Represents a step adjustment for a StepScalingPolicyConfiguration (https://docs.aws.amazon.com/autoscaling/application/APIReference/API_StepScalingPolicyConfiguration.html). Describes an adjustment based on the difference between the value of the aggregated CloudWatch metric and the breach threshold that you've defined for the alarm. \n For the following examples, suppose that you have an alarm with a breach threshold of 50: \n - To trigger the adjustment when the metric is greater than or equal to 50 and less than 60, specify a lower bound of 0 and an upper bound of 10. \n - To trigger the adjustment when the metric is greater than 40 and less than or equal to 50, specify a lower bound of -10 and an upper bound of 0. \n There are a few rules for the step adjustments for your step policy: \n - The ranges of your step adjustments can't overlap or have a gap. \n - At most one step adjustment can have a null lower bound. If one step adjustment has a negative lower bound, then there must be a step adjustment with a null lower bound. \n - At most one step adjustment can have a null upper bound. If one step adjustment has a positive upper bound, then there must be a step adjustment with a null upper bound. \n - The upper and lower bound can't be null in the same step adjustment.",
                "properties": {
                  "metricIntervalLowerBound": {
                    "type": "number"
                  },
                  "metricIntervalUpperBound": {
                    "type": "number"
                  },
                  "scalingAdjustment": {
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "targetTrackingScalingPolicyConfiguration": {
          "description": "A target tracking scaling policy. Includes support for predefined or customized metrics. \n This parameter is required if you are creating a policy and the policy type is TargetTrackingScaling.",
          "properties": {
            "customizedMetricSpecification": {
              "description": "Represents a CloudWatch metric of your choosing for a target tracking scaling policy to use with Application Auto Scaling. \n For information about the available metrics for a service, see Amazon Web Services Services That Publish CloudWatch Metrics (https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html) in the Amazon CloudWatch User Guide. \n To create your customized metric specification: \n * Add values for each required parameter from CloudWatch. You can use an existing metric, or a new metric that you create. To use your own metric, you must first publish the metric to CloudWatch. For more information, see Publish Custom Metrics (https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html) in the Amazon CloudWatch User Guide. \n * Choose a metric that changes proportionally with capacity. The value of the metric should increase or decrease in inverse proportion to the number of capacity units. That is, the value of the metric should decrease when capacity increases, and increase when capacity decreases. \n For more information about CloudWatch, see Amazon CloudWatch Concepts (https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html).",
              "properties": {
                "dimensions": {
                  "items": {
                    "description": "Describes the dimension names and values associated with a metric.",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "metricName": {
                  "type": "string"
                },
                "namespace": {
                  "type": "string"
                },
                "statistic": {
                  "type": "string"
                },
                "unit": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "disableScaleIn": {
              "type": "boolean"
            },
            "predefinedMetricSpecification": {
              "description": "Represents a predefined metric for a target tracking scaling policy to use with Application Auto Scaling. \n Only the Amazon Web Services that you're using send metrics to Amazon CloudWatch. To determine whether a desired metric already exists by looking up its namespace and dimension using the CloudWatch metrics dashboard in the console, follow the procedure in Building dashboards with CloudWatch (https://docs.aws.amazon.com/autoscaling/application/userguide/monitoring-cloudwatch.html) in the Application Auto Scaling User Guide.",
              "properties": {
                "predefinedMetricType": {
                  "type": "string"
                },
                "resourceLabel": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "scaleInCooldown": {
              "format": "int64",
              "type": "integer"
            },
            "scaleOutCooldown": {
              "format": "int64",
              "type": "integer"
            },
            "targetValue": {
              "type": "number"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "policyName",
        "resourceID",
        "scalableDimension",
        "serviceNamespace"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "ScalingPolicyStatus defines the observed state of ScalingPolicy",
      "properties": {
        "ackResourceMetadata": {
          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member that is used to contain resource sync state, account ownership, constructed ARN for the resource",
          "properties": {
            "arn": {
              "description": "ARN is the Amazon Resource Name for the resource. This is a globally-unique identifier and is set only by the ACK service controller once the controller has orchestrated the creation of the resource OR when it has verified that an \"adopted\" resource (a resource where the ARN annotation was set by the Kubernetes user on the CR) exists and matches the supplied CR's Spec field values. TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse https://github.com/aws/aws-controllers-k8s/issues/270",
              "type": "string"
            },
            "ownerAccountID": {
              "description": "OwnerAccountID is the AWS Account ID of the account that owns the backend AWS service API resource.",
              "type": "string"
            },
            "region": {
              "description": "Region is the AWS region in which the resource exists or will exist.",
              "type": "string"
            }
          },
          "required": [
            "ownerAccountID",
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "alarms": {
          "description": "The CloudWatch alarms created for the target tracking scaling policy.",
          "items": {
            "description": "Represents a CloudWatch alarm associated with a scaling policy.",
            "properties": {
              "alarmARN": {
                "type": "string"
              },
              "alarmName": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "conditions": {
          "description": "All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource",
          "items": {
            "description": "Condition is the common struct used by all CRDs managed by ACK service controllers to indicate terminal states  of the CR and its backend AWS service API resource",
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A human readable message indicating details about the transition.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type is the type of the Condition",
                "type": "string"
              }
            },
            "required": [
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "creationTime": {
          "description": "The Unix timestamp for when the scaling policy was created.",
          "format": "date-time",
          "type": "string"
        },
        "lastModifiedTime": {
          "description": "The Unix timestamp for when the scaling policy was created.",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
