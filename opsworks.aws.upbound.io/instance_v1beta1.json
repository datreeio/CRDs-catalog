{
  "description": "Instance is the Schema for the Instances API. Provides an OpsWorks instance resource.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "InstanceSpec defines the desired state of Instance",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "agentVersion": {
              "description": "OpsWorks agent to install. Default is INHERIT.",
              "type": "string"
            },
            "amiId": {
              "description": "AMI to use for the instance.  If an AMI is specified, os must be Custom.",
              "type": "string"
            },
            "architecture": {
              "description": "Machine architecture for created instances.  Valid values are x86_64 or i386. The default is x86_64.",
              "type": "string"
            },
            "autoScalingType": {
              "description": "Creates load-based or time-based instances.  Valid values are load, timer.",
              "type": "string"
            },
            "availabilityZone": {
              "description": "Name of the availability zone where instances will be created by default.",
              "type": "string"
            },
            "createdAt": {
              "description": "Time that the instance was created.",
              "type": "string"
            },
            "deleteEbs": {
              "description": "Whether to delete EBS volume on deletion. Default is true.",
              "type": "boolean"
            },
            "deleteEip": {
              "description": "Whether to delete the Elastic IP on deletion.",
              "type": "boolean"
            },
            "ebsBlockDevice": {
              "description": "Configuration block for additional EBS block devices to attach to the instance. See Block Devices below.",
              "items": {
                "properties": {
                  "deleteOnTermination": {
                    "description": "Whether the volume should be destroyed on instance termination. Default is true.",
                    "type": "boolean"
                  },
                  "deviceName": {
                    "description": "Name of the device to mount.",
                    "type": "string"
                  },
                  "iops": {
                    "description": "Amount of provisioned IOPS. This must be set with a volume_type of io1.",
                    "type": "number"
                  },
                  "snapshotId": {
                    "description": "Snapshot ID to mount.",
                    "type": "string"
                  },
                  "volumeSize": {
                    "description": "Size of the volume in gigabytes.",
                    "type": "number"
                  },
                  "volumeType": {
                    "description": "Type of volume. Valid values are standard, gp2, or io1. Default is standard.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "ebsOptimized": {
              "description": "Whether the launched EC2 instance will be EBS-optimized.",
              "type": "boolean"
            },
            "ecsClusterArn": {
              "description": "ECS cluster's ARN for container instances.",
              "type": "string"
            },
            "elasticIp": {
              "description": "Instance Elastic IP address.",
              "type": "string"
            },
            "ephemeralBlockDevice": {
              "description": "Configuration block for ephemeral (also known as \"Instance Store\") volumes on the instance. See Block Devices below.",
              "items": {
                "properties": {
                  "deviceName": {
                    "description": "Name of the block device to mount on the instance.",
                    "type": "string"
                  },
                  "virtualName": {
                    "description": "The Instance Store Device Name (e.g., ephemeral0).",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "hostname": {
              "description": "Instance's host name.",
              "type": "string"
            },
            "infrastructureClass": {
              "description": "For registered instances, infrastructure class: ec2 or on-premises.",
              "type": "string"
            },
            "installUpdatesOnBoot": {
              "description": "Controls where to install OS and package updates when the instance boots.  Default is true.",
              "type": "boolean"
            },
            "instanceProfileArn": {
              "description": "ARN of the instance's IAM profile.",
              "type": "string"
            },
            "instanceType": {
              "description": "Type of instance to start.",
              "type": "string"
            },
            "layerIds": {
              "description": "List of the layers the instance will belong to.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "layerIdsRefs": {
              "description": "References to CustomLayer in opsworks to populate layerIds.",
              "items": {
                "description": "A Reference to a named object.",
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "properties": {
                      "resolution": {
                        "default": "Required",
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "enum": [
                          "Required",
                          "Optional"
                        ],
                        "type": "string"
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "layerIdsSelector": {
              "description": "Selector for a list of CustomLayer in opsworks to populate layerIds.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "os": {
              "description": "Name of operating system that will be installed.",
              "type": "string"
            },
            "rootBlockDevice": {
              "description": "Configuration block for the root block device of the instance. See Block Devices below.",
              "items": {
                "properties": {
                  "deleteOnTermination": {
                    "description": "Whether the volume should be destroyed on instance termination. Default is true.",
                    "type": "boolean"
                  },
                  "iops": {
                    "description": "Amount of provisioned IOPS. This must be set with a volume_type of io1.",
                    "type": "number"
                  },
                  "volumeSize": {
                    "description": "Size of the volume in gigabytes.",
                    "type": "number"
                  },
                  "volumeType": {
                    "description": "Type of volume. Valid values are standard, gp2, or io1. Default is standard.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "rootDeviceType": {
              "description": "Name of the type of root device instances will have by default. Valid values are ebs or instance-store.",
              "type": "string"
            },
            "securityGroupIdRefs": {
              "description": "References to SecurityGroup in ec2 to populate securityGroupIds.",
              "items": {
                "description": "A Reference to a named object.",
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "properties": {
                      "resolution": {
                        "default": "Required",
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "enum": [
                          "Required",
                          "Optional"
                        ],
                        "type": "string"
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "securityGroupIdSelector": {
              "description": "Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "securityGroupIds": {
              "description": "Associated security groups.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sshKeyName": {
              "description": "Name of the SSH keypair that instances will have by default.",
              "type": "string"
            },
            "stackId": {
              "description": "Identifier of the stack the instance will belong to.",
              "type": "string"
            },
            "stackIdRef": {
              "description": "Reference to a Stack in opsworks to populate stackId.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "stackIdSelector": {
              "description": "Selector for a Stack in opsworks to populate stackId.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "state": {
              "description": "Desired state of the instance. Valid values are running or stopped.",
              "type": "string"
            },
            "status": {
              "description": "Instance status. Will be one of booting, connection_lost, online, pending, rebooting, requested, running_setup, setup_failed, shutting_down, start_failed, stop_failed, stopped, stopping, terminated, or terminating.",
              "type": "string"
            },
            "subnetId": {
              "description": "Subnet ID to attach to.",
              "type": "string"
            },
            "subnetIdRef": {
              "description": "Reference to a Subnet in ec2 to populate subnetId.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "subnetIdSelector": {
              "description": "Selector for a Subnet in ec2 to populate subnetId.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "tenancy": {
              "description": "Instance tenancy to use. Valid values are default, dedicated or host.",
              "type": "string"
            },
            "virtualizationType": {
              "description": "Keyword to choose what virtualization mode created instances will use. Valid values are paravirtual or hvm.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "properties": {
            "agentVersion": {
              "description": "OpsWorks agent to install. Default is INHERIT.",
              "type": "string"
            },
            "amiId": {
              "description": "AMI to use for the instance.  If an AMI is specified, os must be Custom.",
              "type": "string"
            },
            "architecture": {
              "description": "Machine architecture for created instances.  Valid values are x86_64 or i386. The default is x86_64.",
              "type": "string"
            },
            "autoScalingType": {
              "description": "Creates load-based or time-based instances.  Valid values are load, timer.",
              "type": "string"
            },
            "availabilityZone": {
              "description": "Name of the availability zone where instances will be created by default.",
              "type": "string"
            },
            "createdAt": {
              "description": "Time that the instance was created.",
              "type": "string"
            },
            "deleteEbs": {
              "description": "Whether to delete EBS volume on deletion. Default is true.",
              "type": "boolean"
            },
            "deleteEip": {
              "description": "Whether to delete the Elastic IP on deletion.",
              "type": "boolean"
            },
            "ebsBlockDevice": {
              "description": "Configuration block for additional EBS block devices to attach to the instance. See Block Devices below.",
              "items": {
                "properties": {
                  "deleteOnTermination": {
                    "description": "Whether the volume should be destroyed on instance termination. Default is true.",
                    "type": "boolean"
                  },
                  "deviceName": {
                    "description": "Name of the device to mount.",
                    "type": "string"
                  },
                  "iops": {
                    "description": "Amount of provisioned IOPS. This must be set with a volume_type of io1.",
                    "type": "number"
                  },
                  "snapshotId": {
                    "description": "Snapshot ID to mount.",
                    "type": "string"
                  },
                  "volumeSize": {
                    "description": "Size of the volume in gigabytes.",
                    "type": "number"
                  },
                  "volumeType": {
                    "description": "Type of volume. Valid values are standard, gp2, or io1. Default is standard.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "ebsOptimized": {
              "description": "Whether the launched EC2 instance will be EBS-optimized.",
              "type": "boolean"
            },
            "ecsClusterArn": {
              "description": "ECS cluster's ARN for container instances.",
              "type": "string"
            },
            "elasticIp": {
              "description": "Instance Elastic IP address.",
              "type": "string"
            },
            "ephemeralBlockDevice": {
              "description": "Configuration block for ephemeral (also known as \"Instance Store\") volumes on the instance. See Block Devices below.",
              "items": {
                "properties": {
                  "deviceName": {
                    "description": "Name of the block device to mount on the instance.",
                    "type": "string"
                  },
                  "virtualName": {
                    "description": "The Instance Store Device Name (e.g., ephemeral0).",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "hostname": {
              "description": "Instance's host name.",
              "type": "string"
            },
            "infrastructureClass": {
              "description": "For registered instances, infrastructure class: ec2 or on-premises.",
              "type": "string"
            },
            "installUpdatesOnBoot": {
              "description": "Controls where to install OS and package updates when the instance boots.  Default is true.",
              "type": "boolean"
            },
            "instanceProfileArn": {
              "description": "ARN of the instance's IAM profile.",
              "type": "string"
            },
            "instanceType": {
              "description": "Type of instance to start.",
              "type": "string"
            },
            "layerIds": {
              "description": "List of the layers the instance will belong to.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "layerIdsRefs": {
              "description": "References to CustomLayer in opsworks to populate layerIds.",
              "items": {
                "description": "A Reference to a named object.",
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "properties": {
                      "resolution": {
                        "default": "Required",
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "enum": [
                          "Required",
                          "Optional"
                        ],
                        "type": "string"
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "layerIdsSelector": {
              "description": "Selector for a list of CustomLayer in opsworks to populate layerIds.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "os": {
              "description": "Name of operating system that will be installed.",
              "type": "string"
            },
            "rootBlockDevice": {
              "description": "Configuration block for the root block device of the instance. See Block Devices below.",
              "items": {
                "properties": {
                  "deleteOnTermination": {
                    "description": "Whether the volume should be destroyed on instance termination. Default is true.",
                    "type": "boolean"
                  },
                  "iops": {
                    "description": "Amount of provisioned IOPS. This must be set with a volume_type of io1.",
                    "type": "number"
                  },
                  "volumeSize": {
                    "description": "Size of the volume in gigabytes.",
                    "type": "number"
                  },
                  "volumeType": {
                    "description": "Type of volume. Valid values are standard, gp2, or io1. Default is standard.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "rootDeviceType": {
              "description": "Name of the type of root device instances will have by default. Valid values are ebs or instance-store.",
              "type": "string"
            },
            "securityGroupIdRefs": {
              "description": "References to SecurityGroup in ec2 to populate securityGroupIds.",
              "items": {
                "description": "A Reference to a named object.",
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "properties": {
                      "resolution": {
                        "default": "Required",
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "enum": [
                          "Required",
                          "Optional"
                        ],
                        "type": "string"
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "securityGroupIdSelector": {
              "description": "Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "securityGroupIds": {
              "description": "Associated security groups.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sshKeyName": {
              "description": "Name of the SSH keypair that instances will have by default.",
              "type": "string"
            },
            "stackId": {
              "description": "Identifier of the stack the instance will belong to.",
              "type": "string"
            },
            "stackIdRef": {
              "description": "Reference to a Stack in opsworks to populate stackId.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "stackIdSelector": {
              "description": "Selector for a Stack in opsworks to populate stackId.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "state": {
              "description": "Desired state of the instance. Valid values are running or stopped.",
              "type": "string"
            },
            "status": {
              "description": "Instance status. Will be one of booting, connection_lost, online, pending, rebooting, requested, running_setup, setup_failed, shutting_down, start_failed, stop_failed, stopped, stopping, terminated, or terminating.",
              "type": "string"
            },
            "subnetId": {
              "description": "Subnet ID to attach to.",
              "type": "string"
            },
            "subnetIdRef": {
              "description": "Reference to a Subnet in ec2 to populate subnetId.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "subnetIdSelector": {
              "description": "Selector for a Subnet in ec2 to populate subnetId.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "tenancy": {
              "description": "Instance tenancy to use. Valid values are default, dedicated or host.",
              "type": "string"
            },
            "virtualizationType": {
              "description": "Keyword to choose what virtualization mode created instances will use. Valid values are paravirtual or hvm.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which\ncontains a name, metadata and a reference to secret store config to\nwhich any connection details for this managed resource should be written.\nConnection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used\nfor this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.annotations\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.labels\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret.\n- Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.\nThis field is planned to be replaced in a future release in favor of\nPublishConnectionDetailsTo. Currently, both could be set independently\nand connection details would be published to both without affecting\neach other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "InstanceStatus defines the observed state of Instance.",
      "properties": {
        "atProvider": {
          "properties": {
            "agentVersion": {
              "description": "OpsWorks agent to install. Default is INHERIT.",
              "type": "string"
            },
            "amiId": {
              "description": "AMI to use for the instance.  If an AMI is specified, os must be Custom.",
              "type": "string"
            },
            "architecture": {
              "description": "Machine architecture for created instances.  Valid values are x86_64 or i386. The default is x86_64.",
              "type": "string"
            },
            "autoScalingType": {
              "description": "Creates load-based or time-based instances.  Valid values are load, timer.",
              "type": "string"
            },
            "availabilityZone": {
              "description": "Name of the availability zone where instances will be created by default.",
              "type": "string"
            },
            "createdAt": {
              "description": "Time that the instance was created.",
              "type": "string"
            },
            "deleteEbs": {
              "description": "Whether to delete EBS volume on deletion. Default is true.",
              "type": "boolean"
            },
            "deleteEip": {
              "description": "Whether to delete the Elastic IP on deletion.",
              "type": "boolean"
            },
            "ebsBlockDevice": {
              "description": "Configuration block for additional EBS block devices to attach to the instance. See Block Devices below.",
              "items": {
                "properties": {
                  "deleteOnTermination": {
                    "description": "Whether the volume should be destroyed on instance termination. Default is true.",
                    "type": "boolean"
                  },
                  "deviceName": {
                    "description": "Name of the device to mount.",
                    "type": "string"
                  },
                  "iops": {
                    "description": "Amount of provisioned IOPS. This must be set with a volume_type of io1.",
                    "type": "number"
                  },
                  "snapshotId": {
                    "description": "Snapshot ID to mount.",
                    "type": "string"
                  },
                  "volumeSize": {
                    "description": "Size of the volume in gigabytes.",
                    "type": "number"
                  },
                  "volumeType": {
                    "description": "Type of volume. Valid values are standard, gp2, or io1. Default is standard.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "ebsOptimized": {
              "description": "Whether the launched EC2 instance will be EBS-optimized.",
              "type": "boolean"
            },
            "ec2InstanceId": {
              "description": "EC2 instance ID.",
              "type": "string"
            },
            "ecsClusterArn": {
              "description": "ECS cluster's ARN for container instances.",
              "type": "string"
            },
            "elasticIp": {
              "description": "Instance Elastic IP address.",
              "type": "string"
            },
            "ephemeralBlockDevice": {
              "description": "Configuration block for ephemeral (also known as \"Instance Store\") volumes on the instance. See Block Devices below.",
              "items": {
                "properties": {
                  "deviceName": {
                    "description": "Name of the block device to mount on the instance.",
                    "type": "string"
                  },
                  "virtualName": {
                    "description": "The Instance Store Device Name (e.g., ephemeral0).",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "hostname": {
              "description": "Instance's host name.",
              "type": "string"
            },
            "id": {
              "description": "ID of the OpsWorks instance.",
              "type": "string"
            },
            "infrastructureClass": {
              "description": "For registered instances, infrastructure class: ec2 or on-premises.",
              "type": "string"
            },
            "installUpdatesOnBoot": {
              "description": "Controls where to install OS and package updates when the instance boots.  Default is true.",
              "type": "boolean"
            },
            "instanceProfileArn": {
              "description": "ARN of the instance's IAM profile.",
              "type": "string"
            },
            "instanceType": {
              "description": "Type of instance to start.",
              "type": "string"
            },
            "lastServiceErrorId": {
              "description": "ID of the last service error.",
              "type": "string"
            },
            "layerIds": {
              "description": "List of the layers the instance will belong to.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "os": {
              "description": "Name of operating system that will be installed.",
              "type": "string"
            },
            "platform": {
              "description": "Instance's platform.",
              "type": "string"
            },
            "privateDns": {
              "description": "Private DNS name assigned to the instance. Can only be used inside the Amazon EC2, and only available if you've enabled DNS hostnames for your VPC.",
              "type": "string"
            },
            "privateIp": {
              "description": "Private IP address assigned to the instance.",
              "type": "string"
            },
            "publicDns": {
              "description": "Public DNS name assigned to the instance. For EC2-VPC, this is only available if you've enabled DNS hostnames for your VPC.",
              "type": "string"
            },
            "publicIp": {
              "description": "Public IP address assigned to the instance, if applicable.",
              "type": "string"
            },
            "registeredBy": {
              "description": "For registered instances, who performed the registration.",
              "type": "string"
            },
            "reportedAgentVersion": {
              "description": "Instance's reported AWS OpsWorks Stacks agent version.",
              "type": "string"
            },
            "reportedOsFamily": {
              "description": "For registered instances, the reported operating system family.",
              "type": "string"
            },
            "reportedOsName": {
              "description": "For registered instances, the reported operating system name.",
              "type": "string"
            },
            "reportedOsVersion": {
              "description": "For registered instances, the reported operating system version.",
              "type": "string"
            },
            "rootBlockDevice": {
              "description": "Configuration block for the root block device of the instance. See Block Devices below.",
              "items": {
                "properties": {
                  "deleteOnTermination": {
                    "description": "Whether the volume should be destroyed on instance termination. Default is true.",
                    "type": "boolean"
                  },
                  "iops": {
                    "description": "Amount of provisioned IOPS. This must be set with a volume_type of io1.",
                    "type": "number"
                  },
                  "volumeSize": {
                    "description": "Size of the volume in gigabytes.",
                    "type": "number"
                  },
                  "volumeType": {
                    "description": "Type of volume. Valid values are standard, gp2, or io1. Default is standard.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "rootDeviceType": {
              "description": "Name of the type of root device instances will have by default. Valid values are ebs or instance-store.",
              "type": "string"
            },
            "rootDeviceVolumeId": {
              "description": "Root device volume ID.",
              "type": "string"
            },
            "securityGroupIds": {
              "description": "Associated security groups.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sshHostDsaKeyFingerprint": {
              "description": "SSH key's Deep Security Agent (DSA) fingerprint.",
              "type": "string"
            },
            "sshHostRsaKeyFingerprint": {
              "description": "SSH key's RSA fingerprint.",
              "type": "string"
            },
            "sshKeyName": {
              "description": "Name of the SSH keypair that instances will have by default.",
              "type": "string"
            },
            "stackId": {
              "description": "Identifier of the stack the instance will belong to.",
              "type": "string"
            },
            "state": {
              "description": "Desired state of the instance. Valid values are running or stopped.",
              "type": "string"
            },
            "status": {
              "description": "Instance status. Will be one of booting, connection_lost, online, pending, rebooting, requested, running_setup, setup_failed, shutting_down, start_failed, stop_failed, stopped, stopping, terminated, or terminating.",
              "type": "string"
            },
            "subnetId": {
              "description": "Subnet ID to attach to.",
              "type": "string"
            },
            "tenancy": {
              "description": "Instance tenancy to use. Valid values are default, dedicated or host.",
              "type": "string"
            },
            "virtualizationType": {
              "description": "Keyword to choose what virtualization mode created instances will use. Valid values are paravirtual or hvm.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
