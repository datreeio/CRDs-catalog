{
  "description": "KsqlDB is the Schema for the ksqldbs API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "KsqlDBSpec defines the desired state of KsqlDB",
      "properties": {
        "bootstrapServers": {
          "default": "kafka:9094",
          "description": "Comma delimited string of Kafka brokers to use for bootstrap.",
          "type": "string"
        },
        "configMapRef": {
          "description": "The ConfigMap to select from.",
          "properties": {
            "key": {
              "default": "queries.sql",
              "description": "The ConfigMap data key to select. Must be a valid filename. Defaults to \"queries.sql\".",
              "minLength": 1,
              "type": "string"
            },
            "name": {
              "description": "Name of the ConfigMap to select from. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "maxLength": 253,
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "image": {
          "description": "Container image name. If not set this field is defaults to the value of environment variable KSQLDB_IMAGE on the controller. More info: https://kubernetes.io/docs/concepts/containers/images",
          "type": "string"
        },
        "kafkaCluster": {
          "default": "kafka-cluster",
          "description": "The Kafka cluster to provision topics in.",
          "type": "string"
        },
        "replicas": {
          "description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Ignored if Scale is set.",
          "format": "int32",
          "type": "integer"
        },
        "scale": {
          "description": "Defines an optional autoscaling configuration.",
          "properties": {
            "maxReplicas": {
              "default": 1,
              "description": "MaxReplicas is the upper limit for the number of replicas to which the Autoscaler can scale up. It cannot be less that minReplicas.",
              "format": "int32",
              "type": "integer"
            },
            "minReplicas": {
              "default": 1,
              "description": "MinReplicas is the lower limit for the number of replicas to which the Autoscaler can scale down.",
              "format": "int32",
              "type": "integer"
            }
          },
          "required": [
            "maxReplicas"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "schemaRegistry": {
          "default": "http://schema-registry.kafka.svc.cluster.local",
          "description": "SchemaRegistry is the uri of a confluent compatible schema registry.",
          "type": "string"
        },
        "serviceAccount": {
          "description": "Defines an optional ServiceAccount configuration.",
          "properties": {
            "annotations": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
              "type": "object"
            },
            "automountServiceAccountToken": {
              "description": "Whether the ServiceAccount token should be mounted automatically. (Only applicable if Existing=false)",
              "type": "boolean"
            },
            "existing": {
              "description": "Whether the ServiceAccount already exists, and should not be created.",
              "type": "boolean"
            },
            "imagePullSecrets": {
              "description": "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod",
              "items": {
                "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                "properties": {
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                    "type": "string"
                  }
                },
                "type": "object",
                "x-kubernetes-map-type": "atomic",
                "additionalProperties": false
              },
              "type": "array"
            },
            "labels": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
              "type": "object"
            },
            "name": {
              "description": "The name of the ServiceAccount. If not provided will be based off the metadata.name.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "template": {
          "description": "Template describes the KafkaTopics that will be created.",
          "properties": {
            "metadata": {
              "description": "Metadata sets the resource's metadata, i.e. annotations and labels",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                  "type": "object"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "topics": {
              "description": "Topics defines the configuration of the KafkaTopics.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                  "type": "object"
                },
                "config": {
                  "description": "The topic configuration.",
                  "x-kubernetes-preserve-unknown-fields": true
                },
                "existing": {
                  "description": "Whether the KafkaTopics already exist, and should not be created.",
                  "type": "boolean"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                  "type": "object"
                },
                "namespace": {
                  "default": "kafka",
                  "description": "Namespace in which to create the TopicProvider",
                  "maxLength": 63,
                  "type": "string"
                },
                "partitions": {
                  "description": "The number of partitions the topic should have. This cannot be decreased after topic creation. It can be increased after topic creation, but it is important to understand the consequences that has, especially for topics with semantic partitioning. When absent this will default to the broker configuration for `num.partitions`.",
                  "format": "int32",
                  "type": "integer"
                },
                "replicas": {
                  "description": "The number of replicas the topic should have. When absent this will default to the broker configuration for `default.replication.factor`.",
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "configMapRef"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "KsqlDBStatus defines the observed state of KsqlDB",
      "properties": {
        "conditions": {
          "description": "Conditions represents the observations of KsqlDB's current state. Known .status.conditions.type are: \"Ready\" and \"Degraded\"",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
