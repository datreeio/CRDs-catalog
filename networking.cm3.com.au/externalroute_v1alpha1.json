{
  "description": "ExternalRoute is the Schema for the externalroutes API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ExternalRouteSpec defines the desired state of ExternalRoute",
      "properties": {
        "exportTo": {
          "description": "A list of namespaces to which resources created by this ExternalRoute are exported. Exporting a service allows it to be used by sidecars, gateways and virtual services defined in other namespaces. This feature provides a mechanism for service owners and mesh administrators to control the visibility of services across namespace boundaries. \n If no namespaces are specified then the service is exported to all namespaces by default. \n The value \".\" is reserved and defines an export to the same namespace that the service is declared in. Similarly, the value \"*\" is reserved and defines an export to all namespaces. \n For a Kubernetes Service, the equivalent effect can be achieved by setting the annotation \"networking.istio.io/exportTo\" to a comma-separated list of namespace names.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "host": {
          "description": "The desired route destination",
          "type": "string"
        },
        "port": {
          "description": "The port to forward requests to the destination host on",
          "properties": {
            "name": {
              "description": "Label assigned to the port.",
              "type": "string"
            },
            "number": {
              "description": "A valid unsigned integer port number.",
              "format": "int32",
              "type": "integer"
            },
            "protocol": {
              "description": "The protocol exposed on the port. MUST BE one of HTTP|HTTPS|GRPC|HTTP2|MONGO|TCP|TLS. TLS implies the connection will be routed based on the SNI header to the destination without terminating the TLS connection.",
              "type": "string"
            },
            "target_port": {
              "description": "The port number on the endpoint where the traffic will be received. Applicable only when used with ServiceEntries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "ExternalRouteStatus defines the observed state of ExternalRoute",
      "type": "object"
    }
  },
  "type": "object"
}
