{
  "description": "Index is the Schema for the Indexs API. Provides an Amazon Kendra Index resource.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "IndexSpec defines the desired state of Index",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "capacityUnits": {
              "description": "A block that sets the number of additional document storage and query capacity units that should be used by the index. Detailed below.",
              "properties": {
                "queryCapacityUnits": {
                  "description": "The amount of extra query capacity for an index and GetQuerySuggestions capacity. For more information, refer to QueryCapacityUnits.",
                  "type": "number"
                },
                "storageCapacityUnits": {
                  "description": "The amount of extra storage capacity for an index. A single capacity unit provides 30 GB of storage space or 100,000 documents, whichever is reached first. Minimum value of 0.",
                  "type": "number"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "description": {
              "description": "The description of the Index.",
              "type": "string"
            },
            "documentMetadataConfigurationUpdates": {
              "description": "One or more blocks that specify the configuration settings for any metadata applied to the documents in the index. Minimum number of 0 items. Maximum number of 500 items. If specified, you must define all elements, including those that are provided by default. These index fields are documented at Amazon Kendra Index documentation. For an example resource that defines these default index fields, refer to the default example above. For an example resource that appends additional index fields, refer to the append example above. All arguments for each block must be specified. Note that blocks cannot be removed since index fields cannot be deleted. This argument is detailed below.",
              "items": {
                "properties": {
                  "name": {
                    "description": "The name of the index field. Minimum length of 1. Maximum length of 30.",
                    "type": "string"
                  },
                  "relevance": {
                    "description": "A block that provides manual tuning parameters to determine how the field affects the search results. Detailed below",
                    "properties": {
                      "duration": {
                        "description": "Specifies the time period that the boost applies to. For more information, refer to Duration.",
                        "type": "string"
                      },
                      "freshness": {
                        "description": "Indicates that this field determines how \"fresh\" a document is. For more information, refer to Freshness.",
                        "type": "boolean"
                      },
                      "importance": {
                        "description": "The relative importance of the field in the search. Larger numbers provide more of a boost than smaller numbers. Minimum value of 1. Maximum value of 10.",
                        "type": "number"
                      },
                      "rankOrder": {
                        "description": "Determines how values should be interpreted. For more information, refer to RankOrder.",
                        "type": "string"
                      },
                      "valuesImportanceMap": {
                        "additionalProperties": {
                          "type": "number"
                        },
                        "description": "A list of values that should be given a different boost when they appear in the result list. For more information, refer to ValueImportanceMap.",
                        "type": "object",
                        "x-kubernetes-map-type": "granular"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "search": {
                    "description": "A block that provides information about how the field is used during a search. Documented below. Detailed below",
                    "properties": {
                      "displayable": {
                        "description": "Determines whether the field is returned in the query response. The default is true.",
                        "type": "boolean"
                      },
                      "facetable": {
                        "description": "Indicates that the field can be used to create search facets, a count of results for each value in the field. The default is false.",
                        "type": "boolean"
                      },
                      "searchable": {
                        "description": "Determines whether the field is used in the search. If the Searchable field is true, you can use relevance tuning to manually tune how Amazon Kendra weights the field in the search. The default is true for string fields and false for number and date fields.",
                        "type": "boolean"
                      },
                      "sortable": {
                        "description": "Determines whether the field can be used to sort the results of a query. If you specify sorting on a field that does not have Sortable set to true, Amazon Kendra returns an exception. The default is false.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": {
                    "description": "The data type of the index field. Valid values are STRING_VALUE, STRING_LIST_VALUE, LONG_VALUE, DATE_VALUE.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "edition": {
              "description": "The Amazon Kendra edition to use for the index. Choose DEVELOPER_EDITION for indexes intended for development, testing, or proof of concept. Use ENTERPRISE_EDITION for your production databases. Once you set the edition for an index, it can't be changed. Defaults to ENTERPRISE_EDITION",
              "type": "string"
            },
            "name": {
              "description": "Specifies the name of the Index.",
              "type": "string"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "roleArn": {
              "description": "An AWS Identity and Access Management (IAM) role that gives Amazon Kendra permissions to access your Amazon CloudWatch logs and metrics. This is also the role you use when you call the BatchPutDocument API to index documents from an Amazon S3 bucket.",
              "type": "string"
            },
            "roleArnRef": {
              "description": "Reference to a Role in iam to populate roleArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "roleArnSelector": {
              "description": "Selector for a Role in iam to populate roleArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "serverSideEncryptionConfiguration": {
              "description": "A block that specifies the identifier of the AWS KMS customer managed key (CMK) that's used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs. Detailed below.",
              "properties": {
                "kmsKeyId": {
                  "description": "The identifier of the AWS KMScustomer master key (CMK). Amazon Kendra doesn't support asymmetric CMKs.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "userContextPolicy": {
              "description": "The user context policy. Valid values are ATTRIBUTE_FILTER or USER_TOKEN. For more information, refer to UserContextPolicy. Defaults to ATTRIBUTE_FILTER.",
              "type": "string"
            },
            "userGroupResolutionConfiguration": {
              "description": "A block that enables fetching access levels of groups and users from an AWS Single Sign-On identity source. To configure this, see UserGroupResolutionConfiguration. Detailed below.",
              "properties": {
                "userGroupResolutionMode": {
                  "description": "The identity store provider (mode) you want to use to fetch access levels of groups and users. AWS Single Sign-On is currently the only available mode. Your users and groups must exist in an AWS SSO identity source in order to use this mode. Valid Values are AWS_SSO or NONE.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "userTokenConfigurations": {
              "description": "A block that specifies the user token configuration. Detailed below.",
              "properties": {
                "jsonTokenTypeConfiguration": {
                  "description": "A block that specifies the information about the JSON token type configuration. Detailed below.",
                  "properties": {
                    "groupAttributeField": {
                      "description": "The group attribute field. Minimum length of 1. Maximum length of 2048.",
                      "type": "string"
                    },
                    "userNameAttributeField": {
                      "description": "The user name attribute field. Minimum length of 1. Maximum length of 2048.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "jwtTokenTypeConfiguration": {
                  "description": "A block that specifies the information about the JWT token type configuration. Detailed below.",
                  "properties": {
                    "claimRegex": {
                      "description": "The regular expression that identifies the claim. Minimum length of 1. Maximum length of 100.",
                      "type": "string"
                    },
                    "groupAttributeField": {
                      "description": "The group attribute field. Minimum length of 1. Maximum length of 2048.",
                      "type": "string"
                    },
                    "issuer": {
                      "description": "The issuer of the token. Minimum length of 1. Maximum length of 65.",
                      "type": "string"
                    },
                    "keyLocation": {
                      "description": "The location of the key. Valid values are URL or SECRET_MANAGER",
                      "type": "string"
                    },
                    "secretsManagerArn": {
                      "description": "The Amazon Resource Name (ARN) of the secret.",
                      "type": "string"
                    },
                    "url": {
                      "description": "The signing key URL. Valid pattern is ^(https?|ftp|file):\\/\\/([^\\s]*)",
                      "type": "string"
                    },
                    "userNameAttributeField": {
                      "description": "The user name attribute field. Minimum length of 1. Maximum length of 2048.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "properties": {
            "capacityUnits": {
              "description": "A block that sets the number of additional document storage and query capacity units that should be used by the index. Detailed below.",
              "properties": {
                "queryCapacityUnits": {
                  "description": "The amount of extra query capacity for an index and GetQuerySuggestions capacity. For more information, refer to QueryCapacityUnits.",
                  "type": "number"
                },
                "storageCapacityUnits": {
                  "description": "The amount of extra storage capacity for an index. A single capacity unit provides 30 GB of storage space or 100,000 documents, whichever is reached first. Minimum value of 0.",
                  "type": "number"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "description": {
              "description": "The description of the Index.",
              "type": "string"
            },
            "documentMetadataConfigurationUpdates": {
              "description": "One or more blocks that specify the configuration settings for any metadata applied to the documents in the index. Minimum number of 0 items. Maximum number of 500 items. If specified, you must define all elements, including those that are provided by default. These index fields are documented at Amazon Kendra Index documentation. For an example resource that defines these default index fields, refer to the default example above. For an example resource that appends additional index fields, refer to the append example above. All arguments for each block must be specified. Note that blocks cannot be removed since index fields cannot be deleted. This argument is detailed below.",
              "items": {
                "properties": {
                  "name": {
                    "description": "The name of the index field. Minimum length of 1. Maximum length of 30.",
                    "type": "string"
                  },
                  "relevance": {
                    "description": "A block that provides manual tuning parameters to determine how the field affects the search results. Detailed below",
                    "properties": {
                      "duration": {
                        "description": "Specifies the time period that the boost applies to. For more information, refer to Duration.",
                        "type": "string"
                      },
                      "freshness": {
                        "description": "Indicates that this field determines how \"fresh\" a document is. For more information, refer to Freshness.",
                        "type": "boolean"
                      },
                      "importance": {
                        "description": "The relative importance of the field in the search. Larger numbers provide more of a boost than smaller numbers. Minimum value of 1. Maximum value of 10.",
                        "type": "number"
                      },
                      "rankOrder": {
                        "description": "Determines how values should be interpreted. For more information, refer to RankOrder.",
                        "type": "string"
                      },
                      "valuesImportanceMap": {
                        "additionalProperties": {
                          "type": "number"
                        },
                        "description": "A list of values that should be given a different boost when they appear in the result list. For more information, refer to ValueImportanceMap.",
                        "type": "object",
                        "x-kubernetes-map-type": "granular"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "search": {
                    "description": "A block that provides information about how the field is used during a search. Documented below. Detailed below",
                    "properties": {
                      "displayable": {
                        "description": "Determines whether the field is returned in the query response. The default is true.",
                        "type": "boolean"
                      },
                      "facetable": {
                        "description": "Indicates that the field can be used to create search facets, a count of results for each value in the field. The default is false.",
                        "type": "boolean"
                      },
                      "searchable": {
                        "description": "Determines whether the field is used in the search. If the Searchable field is true, you can use relevance tuning to manually tune how Amazon Kendra weights the field in the search. The default is true for string fields and false for number and date fields.",
                        "type": "boolean"
                      },
                      "sortable": {
                        "description": "Determines whether the field can be used to sort the results of a query. If you specify sorting on a field that does not have Sortable set to true, Amazon Kendra returns an exception. The default is false.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": {
                    "description": "The data type of the index field. Valid values are STRING_VALUE, STRING_LIST_VALUE, LONG_VALUE, DATE_VALUE.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "edition": {
              "description": "The Amazon Kendra edition to use for the index. Choose DEVELOPER_EDITION for indexes intended for development, testing, or proof of concept. Use ENTERPRISE_EDITION for your production databases. Once you set the edition for an index, it can't be changed. Defaults to ENTERPRISE_EDITION",
              "type": "string"
            },
            "name": {
              "description": "Specifies the name of the Index.",
              "type": "string"
            },
            "roleArn": {
              "description": "An AWS Identity and Access Management (IAM) role that gives Amazon Kendra permissions to access your Amazon CloudWatch logs and metrics. This is also the role you use when you call the BatchPutDocument API to index documents from an Amazon S3 bucket.",
              "type": "string"
            },
            "roleArnRef": {
              "description": "Reference to a Role in iam to populate roleArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "roleArnSelector": {
              "description": "Selector for a Role in iam to populate roleArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "serverSideEncryptionConfiguration": {
              "description": "A block that specifies the identifier of the AWS KMS customer managed key (CMK) that's used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs. Detailed below.",
              "properties": {
                "kmsKeyId": {
                  "description": "The identifier of the AWS KMScustomer master key (CMK). Amazon Kendra doesn't support asymmetric CMKs.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "userContextPolicy": {
              "description": "The user context policy. Valid values are ATTRIBUTE_FILTER or USER_TOKEN. For more information, refer to UserContextPolicy. Defaults to ATTRIBUTE_FILTER.",
              "type": "string"
            },
            "userGroupResolutionConfiguration": {
              "description": "A block that enables fetching access levels of groups and users from an AWS Single Sign-On identity source. To configure this, see UserGroupResolutionConfiguration. Detailed below.",
              "properties": {
                "userGroupResolutionMode": {
                  "description": "The identity store provider (mode) you want to use to fetch access levels of groups and users. AWS Single Sign-On is currently the only available mode. Your users and groups must exist in an AWS SSO identity source in order to use this mode. Valid Values are AWS_SSO or NONE.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "userTokenConfigurations": {
              "description": "A block that specifies the user token configuration. Detailed below.",
              "properties": {
                "jsonTokenTypeConfiguration": {
                  "description": "A block that specifies the information about the JSON token type configuration. Detailed below.",
                  "properties": {
                    "groupAttributeField": {
                      "description": "The group attribute field. Minimum length of 1. Maximum length of 2048.",
                      "type": "string"
                    },
                    "userNameAttributeField": {
                      "description": "The user name attribute field. Minimum length of 1. Maximum length of 2048.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "jwtTokenTypeConfiguration": {
                  "description": "A block that specifies the information about the JWT token type configuration. Detailed below.",
                  "properties": {
                    "claimRegex": {
                      "description": "The regular expression that identifies the claim. Minimum length of 1. Maximum length of 100.",
                      "type": "string"
                    },
                    "groupAttributeField": {
                      "description": "The group attribute field. Minimum length of 1. Maximum length of 2048.",
                      "type": "string"
                    },
                    "issuer": {
                      "description": "The issuer of the token. Minimum length of 1. Maximum length of 65.",
                      "type": "string"
                    },
                    "keyLocation": {
                      "description": "The location of the key. Valid values are URL or SECRET_MANAGER",
                      "type": "string"
                    },
                    "secretsManagerArn": {
                      "description": "The Amazon Resource Name (ARN) of the secret.",
                      "type": "string"
                    },
                    "url": {
                      "description": "The signing key URL. Valid pattern is ^(https?|ftp|file):\\/\\/([^\\s]*)",
                      "type": "string"
                    },
                    "userNameAttributeField": {
                      "description": "The user name attribute field. Minimum length of 1. Maximum length of 2048.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which\ncontains a name, metadata and a reference to secret store config to\nwhich any connection details for this managed resource should be written.\nConnection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used\nfor this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.annotations\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.labels\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret.\n- Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.\nThis field is planned to be replaced in a future release in favor of\nPublishConnectionDetailsTo. Currently, both could be set independently\nand connection details would be published to both without affecting\neach other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "spec.forProvider.name is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "IndexStatus defines the observed state of Index.",
      "properties": {
        "atProvider": {
          "properties": {
            "arn": {
              "description": "The Amazon Resource Name (ARN) of the Index.",
              "type": "string"
            },
            "capacityUnits": {
              "description": "A block that sets the number of additional document storage and query capacity units that should be used by the index. Detailed below.",
              "properties": {
                "queryCapacityUnits": {
                  "description": "The amount of extra query capacity for an index and GetQuerySuggestions capacity. For more information, refer to QueryCapacityUnits.",
                  "type": "number"
                },
                "storageCapacityUnits": {
                  "description": "The amount of extra storage capacity for an index. A single capacity unit provides 30 GB of storage space or 100,000 documents, whichever is reached first. Minimum value of 0.",
                  "type": "number"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "createdAt": {
              "description": "The Unix datetime that the index was created.",
              "type": "string"
            },
            "description": {
              "description": "The description of the Index.",
              "type": "string"
            },
            "documentMetadataConfigurationUpdates": {
              "description": "One or more blocks that specify the configuration settings for any metadata applied to the documents in the index. Minimum number of 0 items. Maximum number of 500 items. If specified, you must define all elements, including those that are provided by default. These index fields are documented at Amazon Kendra Index documentation. For an example resource that defines these default index fields, refer to the default example above. For an example resource that appends additional index fields, refer to the append example above. All arguments for each block must be specified. Note that blocks cannot be removed since index fields cannot be deleted. This argument is detailed below.",
              "items": {
                "properties": {
                  "name": {
                    "description": "The name of the index field. Minimum length of 1. Maximum length of 30.",
                    "type": "string"
                  },
                  "relevance": {
                    "description": "A block that provides manual tuning parameters to determine how the field affects the search results. Detailed below",
                    "properties": {
                      "duration": {
                        "description": "Specifies the time period that the boost applies to. For more information, refer to Duration.",
                        "type": "string"
                      },
                      "freshness": {
                        "description": "Indicates that this field determines how \"fresh\" a document is. For more information, refer to Freshness.",
                        "type": "boolean"
                      },
                      "importance": {
                        "description": "The relative importance of the field in the search. Larger numbers provide more of a boost than smaller numbers. Minimum value of 1. Maximum value of 10.",
                        "type": "number"
                      },
                      "rankOrder": {
                        "description": "Determines how values should be interpreted. For more information, refer to RankOrder.",
                        "type": "string"
                      },
                      "valuesImportanceMap": {
                        "additionalProperties": {
                          "type": "number"
                        },
                        "description": "A list of values that should be given a different boost when they appear in the result list. For more information, refer to ValueImportanceMap.",
                        "type": "object",
                        "x-kubernetes-map-type": "granular"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "search": {
                    "description": "A block that provides information about how the field is used during a search. Documented below. Detailed below",
                    "properties": {
                      "displayable": {
                        "description": "Determines whether the field is returned in the query response. The default is true.",
                        "type": "boolean"
                      },
                      "facetable": {
                        "description": "Indicates that the field can be used to create search facets, a count of results for each value in the field. The default is false.",
                        "type": "boolean"
                      },
                      "searchable": {
                        "description": "Determines whether the field is used in the search. If the Searchable field is true, you can use relevance tuning to manually tune how Amazon Kendra weights the field in the search. The default is true for string fields and false for number and date fields.",
                        "type": "boolean"
                      },
                      "sortable": {
                        "description": "Determines whether the field can be used to sort the results of a query. If you specify sorting on a field that does not have Sortable set to true, Amazon Kendra returns an exception. The default is false.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": {
                    "description": "The data type of the index field. Valid values are STRING_VALUE, STRING_LIST_VALUE, LONG_VALUE, DATE_VALUE.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "edition": {
              "description": "The Amazon Kendra edition to use for the index. Choose DEVELOPER_EDITION for indexes intended for development, testing, or proof of concept. Use ENTERPRISE_EDITION for your production databases. Once you set the edition for an index, it can't be changed. Defaults to ENTERPRISE_EDITION",
              "type": "string"
            },
            "errorMessage": {
              "description": "When the Status field value is FAILED, this contains a message that explains why.",
              "type": "string"
            },
            "id": {
              "description": "The identifier of the Index.",
              "type": "string"
            },
            "indexStatistics": {
              "description": "A block that provides information about the number of FAQ questions and answers and the number of text documents indexed. Detailed below.",
              "items": {
                "properties": {
                  "faqStatistics": {
                    "description": "A block that specifies the number of question and answer topics in the index. Detailed below.",
                    "items": {
                      "properties": {
                        "indexedQuestionAnswersCount": {
                          "description": "The total number of FAQ questions and answers contained in the index.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "textDocumentStatistics": {
                    "description": "A block that specifies the number of text documents indexed. Detailed below.",
                    "items": {
                      "properties": {
                        "indexedTextBytes": {
                          "description": "The total size, in bytes, of the indexed documents.",
                          "type": "number"
                        },
                        "indexedTextDocumentsCount": {
                          "description": "The number of text documents indexed.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "name": {
              "description": "Specifies the name of the Index.",
              "type": "string"
            },
            "roleArn": {
              "description": "An AWS Identity and Access Management (IAM) role that gives Amazon Kendra permissions to access your Amazon CloudWatch logs and metrics. This is also the role you use when you call the BatchPutDocument API to index documents from an Amazon S3 bucket.",
              "type": "string"
            },
            "serverSideEncryptionConfiguration": {
              "description": "A block that specifies the identifier of the AWS KMS customer managed key (CMK) that's used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs. Detailed below.",
              "properties": {
                "kmsKeyId": {
                  "description": "The identifier of the AWS KMScustomer master key (CMK). Amazon Kendra doesn't support asymmetric CMKs.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "status": {
              "description": "The current status of the index. When the value is ACTIVE, the index is ready for use. If the Status field value is FAILED, the error_message field contains a message that explains why.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "updatedAt": {
              "description": "The Unix datetime that the index was last updated.",
              "type": "string"
            },
            "userContextPolicy": {
              "description": "The user context policy. Valid values are ATTRIBUTE_FILTER or USER_TOKEN. For more information, refer to UserContextPolicy. Defaults to ATTRIBUTE_FILTER.",
              "type": "string"
            },
            "userGroupResolutionConfiguration": {
              "description": "A block that enables fetching access levels of groups and users from an AWS Single Sign-On identity source. To configure this, see UserGroupResolutionConfiguration. Detailed below.",
              "properties": {
                "userGroupResolutionMode": {
                  "description": "The identity store provider (mode) you want to use to fetch access levels of groups and users. AWS Single Sign-On is currently the only available mode. Your users and groups must exist in an AWS SSO identity source in order to use this mode. Valid Values are AWS_SSO or NONE.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "userTokenConfigurations": {
              "description": "A block that specifies the user token configuration. Detailed below.",
              "properties": {
                "jsonTokenTypeConfiguration": {
                  "description": "A block that specifies the information about the JSON token type configuration. Detailed below.",
                  "properties": {
                    "groupAttributeField": {
                      "description": "The group attribute field. Minimum length of 1. Maximum length of 2048.",
                      "type": "string"
                    },
                    "userNameAttributeField": {
                      "description": "The user name attribute field. Minimum length of 1. Maximum length of 2048.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "jwtTokenTypeConfiguration": {
                  "description": "A block that specifies the information about the JWT token type configuration. Detailed below.",
                  "properties": {
                    "claimRegex": {
                      "description": "The regular expression that identifies the claim. Minimum length of 1. Maximum length of 100.",
                      "type": "string"
                    },
                    "groupAttributeField": {
                      "description": "The group attribute field. Minimum length of 1. Maximum length of 2048.",
                      "type": "string"
                    },
                    "issuer": {
                      "description": "The issuer of the token. Minimum length of 1. Maximum length of 65.",
                      "type": "string"
                    },
                    "keyLocation": {
                      "description": "The location of the key. Valid values are URL or SECRET_MANAGER",
                      "type": "string"
                    },
                    "secretsManagerArn": {
                      "description": "The Amazon Resource Name (ARN) of the secret.",
                      "type": "string"
                    },
                    "url": {
                      "description": "The signing key URL. Valid pattern is ^(https?|ftp|file):\\/\\/([^\\s]*)",
                      "type": "string"
                    },
                    "userNameAttributeField": {
                      "description": "The user name attribute field. Minimum length of 1. Maximum length of 2048.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
