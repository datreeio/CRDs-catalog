{
  "description": "FeatureGroup is the Schema for the FeatureGroups API. Provides a SageMaker Feature Group resource.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "FeatureGroupSpec defines the desired state of FeatureGroup",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "description": {
              "description": "A free-form description of a Feature Group.",
              "type": "string"
            },
            "eventTimeFeatureName": {
              "description": "The name of the feature that stores the EventTime of a Record in a Feature Group.",
              "type": "string"
            },
            "featureDefinition": {
              "description": "A list of Feature names and types. See Feature Definition Below.",
              "items": {
                "properties": {
                  "featureName": {
                    "description": "The name of a feature. feature_name cannot be any of the following: is_deleted, write_time, api_invocation_time.",
                    "type": "string"
                  },
                  "featureType": {
                    "description": "The value type of a feature. Valid values are Integral, Fractional, or String.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "offlineStoreConfig": {
              "description": "The Offline Feature Store Configuration. See Offline Store Config Below.",
              "items": {
                "properties": {
                  "dataCatalogConfig": {
                    "description": "The meta data of the Glue table that is autogenerated when an OfflineStore is created. See Data Catalog Config Below.",
                    "items": {
                      "properties": {
                        "catalog": {
                          "description": "The name of the Glue table catalog.",
                          "type": "string"
                        },
                        "database": {
                          "description": "The name of the Glue table database.",
                          "type": "string"
                        },
                        "tableName": {
                          "description": "The name of the Glue table.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "disableGlueTableCreation": {
                    "description": "Set to true to turn Online Store On.",
                    "type": "boolean"
                  },
                  "s3StorageConfig": {
                    "description": "The Amazon Simple Storage (Amazon S3) location of OfflineStore. See S3 Storage Config Below.",
                    "items": {
                      "properties": {
                        "kmsKeyId": {
                          "description": "The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.",
                          "type": "string"
                        },
                        "resolvedOutputS3Uri": {
                          "description": "The S3 path where offline records are written.",
                          "type": "string"
                        },
                        "s3Uri": {
                          "description": "The S3 URI, or location in Amazon S3, of OfflineStore.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "tableFormat": {
                    "description": "Format for the offline store table. Supported formats are Glue (Default) and Apache Iceberg (https://iceberg.apache.org/).",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "onlineStoreConfig": {
              "description": "The Online Feature Store Configuration. See Online Store Config Below.",
              "items": {
                "properties": {
                  "enableOnlineStore": {
                    "description": "Set to true to disable the automatic creation of an AWS Glue table when configuring an OfflineStore.",
                    "type": "boolean"
                  },
                  "securityConfig": {
                    "description": "Security config for at-rest encryption of your OnlineStore. See Security Config Below.",
                    "items": {
                      "properties": {
                        "kmsKeyId": {
                          "description": "The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "storageType": {
                    "description": "Option for different tiers of low latency storage for real-time data retrieval. Valid values are Standard, or InMemory.",
                    "type": "string"
                  },
                  "ttlDuration": {
                    "description": "Time to live duration, where the record is hard deleted after the expiration time is reached; ExpiresAt = EventTime + TtlDuration.. See TTl Duration Below.",
                    "items": {
                      "properties": {
                        "unit": {
                          "description": "TtlDuration time unit. Valid values are Seconds, Minutes, Hours, Days, or Weeks.",
                          "type": "string"
                        },
                        "value": {
                          "description": "TtlDuration time value.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "recordIdentifierFeatureName": {
              "description": "The name of the Feature whose value uniquely identifies a Record defined in the Feature Store. Only the latest record per identifier value will be stored in the Online Store.",
              "type": "string"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "roleArn": {
              "description": "The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the Offline Store if an offline_store_config is provided.",
              "type": "string"
            },
            "roleArnRef": {
              "description": "Reference to a Role in iam to populate roleArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "roleArnSelector": {
              "description": "Selector for a Role in iam to populate roleArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "properties": {
            "description": {
              "description": "A free-form description of a Feature Group.",
              "type": "string"
            },
            "eventTimeFeatureName": {
              "description": "The name of the feature that stores the EventTime of a Record in a Feature Group.",
              "type": "string"
            },
            "featureDefinition": {
              "description": "A list of Feature names and types. See Feature Definition Below.",
              "items": {
                "properties": {
                  "featureName": {
                    "description": "The name of a feature. feature_name cannot be any of the following: is_deleted, write_time, api_invocation_time.",
                    "type": "string"
                  },
                  "featureType": {
                    "description": "The value type of a feature. Valid values are Integral, Fractional, or String.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "offlineStoreConfig": {
              "description": "The Offline Feature Store Configuration. See Offline Store Config Below.",
              "items": {
                "properties": {
                  "dataCatalogConfig": {
                    "description": "The meta data of the Glue table that is autogenerated when an OfflineStore is created. See Data Catalog Config Below.",
                    "items": {
                      "properties": {
                        "catalog": {
                          "description": "The name of the Glue table catalog.",
                          "type": "string"
                        },
                        "database": {
                          "description": "The name of the Glue table database.",
                          "type": "string"
                        },
                        "tableName": {
                          "description": "The name of the Glue table.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "disableGlueTableCreation": {
                    "description": "Set to true to turn Online Store On.",
                    "type": "boolean"
                  },
                  "s3StorageConfig": {
                    "description": "The Amazon Simple Storage (Amazon S3) location of OfflineStore. See S3 Storage Config Below.",
                    "items": {
                      "properties": {
                        "kmsKeyId": {
                          "description": "The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.",
                          "type": "string"
                        },
                        "resolvedOutputS3Uri": {
                          "description": "The S3 path where offline records are written.",
                          "type": "string"
                        },
                        "s3Uri": {
                          "description": "The S3 URI, or location in Amazon S3, of OfflineStore.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "tableFormat": {
                    "description": "Format for the offline store table. Supported formats are Glue (Default) and Apache Iceberg (https://iceberg.apache.org/).",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "onlineStoreConfig": {
              "description": "The Online Feature Store Configuration. See Online Store Config Below.",
              "items": {
                "properties": {
                  "enableOnlineStore": {
                    "description": "Set to true to disable the automatic creation of an AWS Glue table when configuring an OfflineStore.",
                    "type": "boolean"
                  },
                  "securityConfig": {
                    "description": "Security config for at-rest encryption of your OnlineStore. See Security Config Below.",
                    "items": {
                      "properties": {
                        "kmsKeyId": {
                          "description": "The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "storageType": {
                    "description": "Option for different tiers of low latency storage for real-time data retrieval. Valid values are Standard, or InMemory.",
                    "type": "string"
                  },
                  "ttlDuration": {
                    "description": "Time to live duration, where the record is hard deleted after the expiration time is reached; ExpiresAt = EventTime + TtlDuration.. See TTl Duration Below.",
                    "items": {
                      "properties": {
                        "unit": {
                          "description": "TtlDuration time unit. Valid values are Seconds, Minutes, Hours, Days, or Weeks.",
                          "type": "string"
                        },
                        "value": {
                          "description": "TtlDuration time value.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "recordIdentifierFeatureName": {
              "description": "The name of the Feature whose value uniquely identifies a Record defined in the Feature Store. Only the latest record per identifier value will be stored in the Online Store.",
              "type": "string"
            },
            "roleArn": {
              "description": "The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the Offline Store if an offline_store_config is provided.",
              "type": "string"
            },
            "roleArnRef": {
              "description": "Reference to a Role in iam to populate roleArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "roleArnSelector": {
              "description": "Selector for a Role in iam to populate roleArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "spec.forProvider.eventTimeFeatureName is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.eventTimeFeatureName) || (has(self.initProvider) && has(self.initProvider.eventTimeFeatureName))"
        },
        {
          "message": "spec.forProvider.featureDefinition is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.featureDefinition) || (has(self.initProvider) && has(self.initProvider.featureDefinition))"
        },
        {
          "message": "spec.forProvider.recordIdentifierFeatureName is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.recordIdentifierFeatureName) || (has(self.initProvider) && has(self.initProvider.recordIdentifierFeatureName))"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "FeatureGroupStatus defines the observed state of FeatureGroup.",
      "properties": {
        "atProvider": {
          "properties": {
            "arn": {
              "description": "The Amazon Resource Name (ARN) assigned by AWS to this feature_group.",
              "type": "string"
            },
            "description": {
              "description": "A free-form description of a Feature Group.",
              "type": "string"
            },
            "eventTimeFeatureName": {
              "description": "The name of the feature that stores the EventTime of a Record in a Feature Group.",
              "type": "string"
            },
            "featureDefinition": {
              "description": "A list of Feature names and types. See Feature Definition Below.",
              "items": {
                "properties": {
                  "featureName": {
                    "description": "The name of a feature. feature_name cannot be any of the following: is_deleted, write_time, api_invocation_time.",
                    "type": "string"
                  },
                  "featureType": {
                    "description": "The value type of a feature. Valid values are Integral, Fractional, or String.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "id": {
              "type": "string"
            },
            "offlineStoreConfig": {
              "description": "The Offline Feature Store Configuration. See Offline Store Config Below.",
              "items": {
                "properties": {
                  "dataCatalogConfig": {
                    "description": "The meta data of the Glue table that is autogenerated when an OfflineStore is created. See Data Catalog Config Below.",
                    "items": {
                      "properties": {
                        "catalog": {
                          "description": "The name of the Glue table catalog.",
                          "type": "string"
                        },
                        "database": {
                          "description": "The name of the Glue table database.",
                          "type": "string"
                        },
                        "tableName": {
                          "description": "The name of the Glue table.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "disableGlueTableCreation": {
                    "description": "Set to true to turn Online Store On.",
                    "type": "boolean"
                  },
                  "s3StorageConfig": {
                    "description": "The Amazon Simple Storage (Amazon S3) location of OfflineStore. See S3 Storage Config Below.",
                    "items": {
                      "properties": {
                        "kmsKeyId": {
                          "description": "The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.",
                          "type": "string"
                        },
                        "resolvedOutputS3Uri": {
                          "description": "The S3 path where offline records are written.",
                          "type": "string"
                        },
                        "s3Uri": {
                          "description": "The S3 URI, or location in Amazon S3, of OfflineStore.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "tableFormat": {
                    "description": "Format for the offline store table. Supported formats are Glue (Default) and Apache Iceberg (https://iceberg.apache.org/).",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "onlineStoreConfig": {
              "description": "The Online Feature Store Configuration. See Online Store Config Below.",
              "items": {
                "properties": {
                  "enableOnlineStore": {
                    "description": "Set to true to disable the automatic creation of an AWS Glue table when configuring an OfflineStore.",
                    "type": "boolean"
                  },
                  "securityConfig": {
                    "description": "Security config for at-rest encryption of your OnlineStore. See Security Config Below.",
                    "items": {
                      "properties": {
                        "kmsKeyId": {
                          "description": "The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "storageType": {
                    "description": "Option for different tiers of low latency storage for real-time data retrieval. Valid values are Standard, or InMemory.",
                    "type": "string"
                  },
                  "ttlDuration": {
                    "description": "Time to live duration, where the record is hard deleted after the expiration time is reached; ExpiresAt = EventTime + TtlDuration.. See TTl Duration Below.",
                    "items": {
                      "properties": {
                        "unit": {
                          "description": "TtlDuration time unit. Valid values are Seconds, Minutes, Hours, Days, or Weeks.",
                          "type": "string"
                        },
                        "value": {
                          "description": "TtlDuration time value.",
                          "type": "number"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "recordIdentifierFeatureName": {
              "description": "The name of the Feature whose value uniquely identifies a Record defined in the Feature Store. Only the latest record per identifier value will be stored in the Online Store.",
              "type": "string"
            },
            "roleArn": {
              "description": "The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the Offline Store if an offline_store_config is provided.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                "type": "string"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
