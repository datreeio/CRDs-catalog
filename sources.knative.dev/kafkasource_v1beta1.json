{
  "description": "KafkaSource is the Schema for the kafkasources API.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "KafkaSourceSpec defines the desired state of the KafkaSource.",
      "properties": {
        "bootstrapServers": {
          "description": "Bootstrap servers are the Kafka servers the consumer will connect to.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ceOverrides": {
          "description": "CloudEventOverrides defines overrides to control the output format and modifications of the event sent to the sink.",
          "properties": {
            "extensions": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Extensions specify what attribute are added or overridden on the outbound event. Each `Extensions` key-value pair are set on the event as an attribute extension independently.",
              "type": "object"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "consumerGroup": {
          "description": "ConsumerGroupID is the consumer group ID.",
          "type": "string"
        },
        "consumers": {
          "description": "Number of desired consumers running in the consumer group. Defaults to 1. \n This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "type": "integer"
        },
        "delivery": {
          "description": "Delivery contains the delivery spec for this source",
          "properties": {
            "backoffDelay": {
              "description": "BackoffDelay is the delay before retrying. More information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html - https://en.wikipedia.org/wiki/ISO_8601 \n For linear policy, backoff delay is backoffDelay*<numberOfRetries>. For exponential policy, backoff delay is backoffDelay*2^<numberOfRetries>.",
              "type": "string"
            },
            "backoffPolicy": {
              "description": "BackoffPolicy is the retry backoff policy (linear, exponential).",
              "type": "string"
            },
            "deadLetterSink": {
              "description": "DeadLetterSink is the sink receiving event that could not be sent to a destination.",
              "properties": {
                "CACerts": {
                  "description": "CACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468. If set, these CAs are appended to the set of CAs provided by the Addressable target, if any.",
                  "type": "string"
                },
                "ref": {
                  "description": "Ref points to an Addressable.",
                  "properties": {
                    "address": {
                      "description": "Address points to a specific Address Name.",
                      "type": "string"
                    },
                    "apiVersion": {
                      "description": "API version of the referent.",
                      "type": "string"
                    },
                    "group": {
                      "description": "Group of the API, without the version of the group. This can be used as an alternative to the APIVersion, and then resolved using ResolveGroup. Note: This API is EXPERIMENTAL and might break anytime. For more details: https://github.com/knative/eventing/issues/5086",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ This is optional field, it gets defaulted to the object holding it if left out.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "kind",
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "uri": {
                  "description": "URI can be an absolute URL(non-empty scheme and non-empty host) pointing to the target or a relative URI. Relative URIs will be resolved using the base URI retrieved from Ref.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "retry": {
              "description": "Retry is the minimum number of retries the sender should attempt when sending an event before moving it to the dead letter sink.",
              "format": "int32",
              "type": "integer"
            },
            "retryAfterMax": {
              "description": "RetryAfterMax provides an optional upper bound on the duration specified in a \"Retry-After\" header when calculating backoff times for retrying 429 and 503 response codes.  Setting the value to zero (\"PT0S\") can be used to opt-out of respecting \"Retry-After\" header values altogether. This value only takes effect if \"Retry\" is configured, and also depends on specific implementations (Channels, Sources, etc.) choosing to provide this capability. \n Note: This API is EXPERIMENTAL and might be changed at anytime. While this experimental feature is in the Alpha/Beta stage, you must provide a valid value to opt-in for supporting \"Retry-After\" headers.  When the feature becomes Stable/GA \"Retry-After\" headers will be respected by default, and you can choose to specify \"PT0S\" to opt-out of supporting \"Retry-After\" headers. For more details: https://github.com/knative/eventing/issues/5811 \n More information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html - https://en.wikipedia.org/wiki/ISO_8601",
              "type": "string"
            },
            "timeout": {
              "description": "Timeout is the timeout of each single request. The value must be greater than 0. More information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html - https://en.wikipedia.org/wiki/ISO_8601 \n Note: This API is EXPERIMENTAL and might break anytime. For more details: https://github.com/knative/eventing/issues/5148",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "initialOffset": {
          "description": "InitialOffset is the Initial Offset for the consumer group. should be earliest or latest",
          "type": "string"
        },
        "net": {
          "properties": {
            "sasl": {
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "password": {
                  "description": "Password is the Kubernetes secret containing the SASL password.",
                  "properties": {
                    "secretKeyRef": {
                      "description": "The Secret key to select from.",
                      "properties": {
                        "key": {
                          "description": "The key of the secret to select from.  Must be a valid secret key.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                          "type": "string"
                        },
                        "optional": {
                          "description": "Specify whether the Secret or its key must be defined",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "key"
                      ],
                      "type": "object",
                      "x-kubernetes-map-type": "atomic",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "type": {
                  "description": "Type of saslType, defaults to plain (vs SCRAM-SHA-512 or SCRAM-SHA-256)",
                  "properties": {
                    "secretKeyRef": {
                      "description": "The Secret key to select from.",
                      "properties": {
                        "key": {
                          "description": "The key of the secret to select from.  Must be a valid secret key.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                          "type": "string"
                        },
                        "optional": {
                          "description": "Specify whether the Secret or its key must be defined",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "key"
                      ],
                      "type": "object",
                      "x-kubernetes-map-type": "atomic",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "user": {
                  "description": "User is the Kubernetes secret containing the SASL username.",
                  "properties": {
                    "secretKeyRef": {
                      "description": "The Secret key to select from.",
                      "properties": {
                        "key": {
                          "description": "The key of the secret to select from.  Must be a valid secret key.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                          "type": "string"
                        },
                        "optional": {
                          "description": "Specify whether the Secret or its key must be defined",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "key"
                      ],
                      "type": "object",
                      "x-kubernetes-map-type": "atomic",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "tls": {
              "properties": {
                "caCert": {
                  "description": "CACert is the Kubernetes secret containing the server CA cert.",
                  "properties": {
                    "secretKeyRef": {
                      "description": "The Secret key to select from.",
                      "properties": {
                        "key": {
                          "description": "The key of the secret to select from.  Must be a valid secret key.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                          "type": "string"
                        },
                        "optional": {
                          "description": "Specify whether the Secret or its key must be defined",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "key"
                      ],
                      "type": "object",
                      "x-kubernetes-map-type": "atomic",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "cert": {
                  "description": "Cert is the Kubernetes secret containing the client certificate.",
                  "properties": {
                    "secretKeyRef": {
                      "description": "The Secret key to select from.",
                      "properties": {
                        "key": {
                          "description": "The key of the secret to select from.  Must be a valid secret key.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                          "type": "string"
                        },
                        "optional": {
                          "description": "Specify whether the Secret or its key must be defined",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "key"
                      ],
                      "type": "object",
                      "x-kubernetes-map-type": "atomic",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "enable": {
                  "type": "boolean"
                },
                "key": {
                  "description": "Key is the Kubernetes secret containing the client key.",
                  "properties": {
                    "secretKeyRef": {
                      "description": "The Secret key to select from.",
                      "properties": {
                        "key": {
                          "description": "The key of the secret to select from.  Must be a valid secret key.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                          "type": "string"
                        },
                        "optional": {
                          "description": "Specify whether the Secret or its key must be defined",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "key"
                      ],
                      "type": "object",
                      "x-kubernetes-map-type": "atomic",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "ordering": {
          "description": "Ordering is the type of the consumer verticle. Should be ordered or unordered. By default, it is ordered.",
          "type": "string"
        },
        "sink": {
          "description": "Sink is a reference to an object that will resolve to a uri to use as the sink.",
          "properties": {
            "CACerts": {
              "description": "CACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468. If set, these CAs are appended to the set of CAs provided by the Addressable target, if any.",
              "type": "string"
            },
            "ref": {
              "description": "Ref points to an Addressable.",
              "properties": {
                "address": {
                  "description": "Address points to a specific Address Name.",
                  "type": "string"
                },
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "group": {
                  "description": "Group of the API, without the version of the group. This can be used as an alternative to the APIVersion, and then resolved using ResolveGroup. Note: This API is EXPERIMENTAL and might break anytime. For more details: https://github.com/knative/eventing/issues/5086",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ This is optional field, it gets defaulted to the object holding it if left out.",
                  "type": "string"
                }
              },
              "required": [
                "kind",
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "uri": {
              "description": "URI can be an absolute URL(non-empty scheme and non-empty host) pointing to the target or a relative URI. Relative URIs will be resolved using the base URI retrieved from Ref.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "topics": {
          "description": "Topic topics to consume messages from",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "bootstrapServers",
        "topics"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "KafkaSourceStatus defines the observed state of KafkaSource.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object"
        },
        "ceAttributes": {
          "description": "CloudEventAttributes are the specific attributes that the Source uses as part of its CloudEvents.",
          "items": {
            "description": "CloudEventAttributes specifies the attributes that a Source uses as part of its CloudEvents.",
            "properties": {
              "source": {
                "description": "Source is the CloudEvents source attribute.",
                "type": "string"
              },
              "type": {
                "description": "Type refers to the CloudEvent type attribute.",
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "claims": {
          "description": "Claims consumed by this KafkaSource instance",
          "type": "string"
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "items": {
            "description": "Condition defines a readiness condition for a Knative resource. See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).",
                "type": "string"
              },
              "message": {
                "description": "A human readable message indicating details about the transition.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition.",
                "type": "string"
              },
              "severity": {
                "description": "Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition.",
                "type": "string"
              }
            },
            "required": [
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "consumers": {
          "description": "Total number of consumers actually running in the consumer group.",
          "format": "int32",
          "type": "integer"
        },
        "maxAllowedVReplicas": {
          "format": "int32",
          "type": "integer"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "format": "int64",
          "type": "integer"
        },
        "placements": {
          "items": {
            "properties": {
              "podName": {
                "description": "PodName is the name of the pod where the resource is placed",
                "type": "string"
              },
              "vreplicas": {
                "description": "VReplicas is the number of virtual replicas assigned to in the pod",
                "format": "int32",
                "type": "integer"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "selector": {
          "description": "Use for labelSelectorPath when scaling Kafka source",
          "type": "string"
        },
        "sinkCACerts": {
          "description": "SinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "sinkUri": {
          "description": "SinkURI is the current active sink URI that has been configured for the Source.",
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
