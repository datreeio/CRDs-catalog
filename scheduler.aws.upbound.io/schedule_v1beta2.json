{
  "description": "Schedule is the Schema for the Schedules API. Provides an EventBridge Scheduler Schedule resource.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ScheduleSpec defines the desired state of Schedule",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "description": {
              "description": "Brief description of the schedule.",
              "type": "string"
            },
            "endDate": {
              "description": "The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the end date you specify. EventBridge Scheduler ignores the end date for one-time schedules. Example: 2030-01-01T01:00:00Z.",
              "type": "string"
            },
            "flexibleTimeWindow": {
              "description": "Configures a time window during which EventBridge Scheduler invokes the schedule. Detailed below.",
              "properties": {
                "maximumWindowInMinutes": {
                  "description": "Maximum time window during which a schedule can be invoked. Ranges from 1 to 1440 minutes.",
                  "type": "number"
                },
                "mode": {
                  "description": "Determines whether the schedule is invoked within a flexible time window. One of: OFF, FLEXIBLE.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "groupName": {
              "description": "Name of the schedule group to associate with this schedule. When omitted, the default schedule group is used.",
              "type": "string"
            },
            "kmsKeyArn": {
              "description": "ARN for the customer managed KMS key that EventBridge Scheduler will use to encrypt and decrypt your data.",
              "type": "string"
            },
            "kmsKeyArnRef": {
              "description": "Reference to a Key in kms to populate kmsKeyArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "kmsKeyArnSelector": {
              "description": "Selector for a Key in kms to populate kmsKeyArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name of the schedule. Conflicts with name_prefix.",
              "type": "string"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "scheduleExpression": {
              "description": "Defines when the schedule runs. Read more in Schedule types on EventBridge Scheduler.",
              "type": "string"
            },
            "scheduleExpressionTimezone": {
              "description": "Timezone in which the scheduling expression is evaluated. Defaults to UTC. Example: Australia/Sydney.",
              "type": "string"
            },
            "startDate": {
              "description": "The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the start date you specify. EventBridge Scheduler ignores the start date for one-time schedules. Example: 2030-01-01T01:00:00Z.",
              "type": "string"
            },
            "state": {
              "description": "Specifies whether the schedule is enabled or disabled. One of: ENABLED (default), DISABLED.",
              "type": "string"
            },
            "target": {
              "description": "Configures the target of the schedule. Detailed below.",
              "properties": {
                "arn": {
                  "description": "ARN of the target of this schedule, such as a SQS queue or ECS cluster. For universal targets, this is a Service ARN specific to the target service.",
                  "type": "string"
                },
                "arnRef": {
                  "description": "Reference to a Queue in sqs to populate arn.",
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "properties": {
                        "resolution": {
                          "default": "Required",
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "enum": [
                            "Required",
                            "Optional"
                          ],
                          "type": "string"
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "arnSelector": {
                  "description": "Selector for a Queue in sqs to populate arn.",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "properties": {
                        "resolution": {
                          "default": "Required",
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "enum": [
                            "Required",
                            "Optional"
                          ],
                          "type": "string"
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "deadLetterConfig": {
                  "description": "Information about an Amazon SQS queue that EventBridge Scheduler uses as a dead-letter queue for your schedule. If specified, EventBridge Scheduler delivers failed events that could not be successfully delivered to a target to the queue. Detailed below.",
                  "properties": {
                    "arn": {
                      "description": "ARN of the target of this schedule, such as a SQS queue or ECS cluster. For universal targets, this is a Service ARN specific to the target service.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "ecsParameters": {
                  "description": "Templated target type for the Amazon ECS RunTask API operation. Detailed below.",
                  "properties": {
                    "capacityProviderStrategy": {
                      "description": "Up to 6 capacity provider strategies to use for the task. Detailed below.",
                      "items": {
                        "properties": {
                          "base": {
                            "description": "How many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Ranges from 0 (default) to 100000.",
                            "type": "number"
                          },
                          "capacityProvider": {
                            "description": "Short name of the capacity provider.",
                            "type": "string"
                          },
                          "weight": {
                            "description": "Designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Ranges from from 0 to 1000.",
                            "type": "number"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "enableEcsManagedTags": {
                      "description": "Specifies whether to enable Amazon ECS managed tags for the task. For more information, see Tagging Your Amazon ECS Resources in the Amazon ECS Developer Guide.",
                      "type": "boolean"
                    },
                    "enableExecuteCommand": {
                      "description": "Specifies whether to enable the execute command functionality for the containers in this task.",
                      "type": "boolean"
                    },
                    "group": {
                      "description": "Specifies an ECS task group for the task. At most 255 characters.",
                      "type": "string"
                    },
                    "launchType": {
                      "description": "Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. One of: EC2, FARGATE, EXTERNAL.",
                      "type": "string"
                    },
                    "networkConfiguration": {
                      "description": "Configures the networking associated with the task. Detailed below.",
                      "properties": {
                        "assignPublicIp": {
                          "description": "Specifies whether the task's elastic network interface receives a public IP address. This attribute is a boolean type, where true maps to ENABLED and false to DISABLED. You can specify true only when the launch_type is set to FARGATE.",
                          "type": "boolean"
                        },
                        "securityGroups": {
                          "description": "Set of 1 to 5 Security Group ID-s to be associated with the task. These security groups must all be in the same VPC.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        },
                        "subnets": {
                          "description": "Set of 1 to 16 subnets to be associated with the task. These subnets must all be in the same VPC.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "placementConstraints": {
                      "description": "A set of up to 10 placement constraints to use for the task. Detailed below.",
                      "items": {
                        "properties": {
                          "expression": {
                            "description": "A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. For more information, see Cluster query language in the Amazon ECS Developer Guide.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of placement strategy. One of: random, spread, binpack.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "placementStrategy": {
                      "description": "A set of up to 5 placement strategies. Detailed below.",
                      "items": {
                        "properties": {
                          "field": {
                            "description": "The field to apply the placement strategy against.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of placement strategy. One of: random, spread, binpack.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "platformVersion": {
                      "description": "Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0.",
                      "type": "string"
                    },
                    "propagateTags": {
                      "description": "Specifies whether to propagate the tags from the task definition to the task. One of: TASK_DEFINITION.",
                      "type": "string"
                    },
                    "referenceId": {
                      "description": "Reference ID to use for the task.",
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Key-value map of resource tags.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    },
                    "taskCount": {
                      "description": "The number of tasks to create. Ranges from 1 (default) to 10.",
                      "type": "number"
                    },
                    "taskDefinitionArn": {
                      "description": "ARN of the task definition to use.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "eventbridgeParameters": {
                  "description": "Templated target type for the EventBridge PutEvents API operation. Detailed below.",
                  "properties": {
                    "detailType": {
                      "description": "Free-form string used to decide what fields to expect in the event detail. Up to 128 characters.",
                      "type": "string"
                    },
                    "source": {
                      "description": "Source of the event.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "input": {
                  "description": "Text, or well-formed JSON, passed to the target. Read more in Universal target.",
                  "type": "string"
                },
                "kinesisParameters": {
                  "description": "Templated target type for the Amazon Kinesis PutRecord API operation. Detailed below.",
                  "properties": {
                    "partitionKey": {
                      "description": "Specifies the shard to which EventBridge Scheduler sends the event. Up to 256 characters.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "retryPolicy": {
                  "description": "Information about the retry policy settings. Detailed below.",
                  "properties": {
                    "maximumEventAgeInSeconds": {
                      "description": "Maximum amount of time, in seconds, to continue to make retry attempts. Ranges from 60 to 86400 (default).",
                      "type": "number"
                    },
                    "maximumRetryAttempts": {
                      "description": "Maximum number of retry attempts to make before the request fails. Ranges from 0 to 185 (default).",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "roleArn": {
                  "description": "ARN of the IAM role that EventBridge Scheduler will use for this target when the schedule is invoked. Read more in Set up the execution role.",
                  "type": "string"
                },
                "roleArnRef": {
                  "description": "Reference to a Role in iam to populate roleArn.",
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "properties": {
                        "resolution": {
                          "default": "Required",
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "enum": [
                            "Required",
                            "Optional"
                          ],
                          "type": "string"
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "roleArnSelector": {
                  "description": "Selector for a Role in iam to populate roleArn.",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "properties": {
                        "resolution": {
                          "default": "Required",
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "enum": [
                            "Required",
                            "Optional"
                          ],
                          "type": "string"
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "sagemakerPipelineParameters": {
                  "description": "Templated target type for the Amazon SageMaker StartPipelineExecution API operation. Detailed below.",
                  "properties": {
                    "pipelineParameter": {
                      "description": "Set of up to 200 parameter names and values to use when executing the SageMaker Model Building Pipeline. Detailed below.",
                      "items": {
                        "properties": {
                          "name": {
                            "description": "Name of parameter to start execution of a SageMaker Model Building Pipeline.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value of parameter to start execution of a SageMaker Model Building Pipeline.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "sqsParameters": {
                  "description": "The templated target type for the Amazon SQS SendMessage API operation. Detailed below.",
                  "properties": {
                    "messageGroupId": {
                      "description": "FIFO message group ID to use as the target.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "properties": {
            "description": {
              "description": "Brief description of the schedule.",
              "type": "string"
            },
            "endDate": {
              "description": "The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the end date you specify. EventBridge Scheduler ignores the end date for one-time schedules. Example: 2030-01-01T01:00:00Z.",
              "type": "string"
            },
            "flexibleTimeWindow": {
              "description": "Configures a time window during which EventBridge Scheduler invokes the schedule. Detailed below.",
              "properties": {
                "maximumWindowInMinutes": {
                  "description": "Maximum time window during which a schedule can be invoked. Ranges from 1 to 1440 minutes.",
                  "type": "number"
                },
                "mode": {
                  "description": "Determines whether the schedule is invoked within a flexible time window. One of: OFF, FLEXIBLE.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "groupName": {
              "description": "Name of the schedule group to associate with this schedule. When omitted, the default schedule group is used.",
              "type": "string"
            },
            "kmsKeyArn": {
              "description": "ARN for the customer managed KMS key that EventBridge Scheduler will use to encrypt and decrypt your data.",
              "type": "string"
            },
            "kmsKeyArnRef": {
              "description": "Reference to a Key in kms to populate kmsKeyArn.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "kmsKeyArnSelector": {
              "description": "Selector for a Key in kms to populate kmsKeyArn.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name of the schedule. Conflicts with name_prefix.",
              "type": "string"
            },
            "scheduleExpression": {
              "description": "Defines when the schedule runs. Read more in Schedule types on EventBridge Scheduler.",
              "type": "string"
            },
            "scheduleExpressionTimezone": {
              "description": "Timezone in which the scheduling expression is evaluated. Defaults to UTC. Example: Australia/Sydney.",
              "type": "string"
            },
            "startDate": {
              "description": "The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the start date you specify. EventBridge Scheduler ignores the start date for one-time schedules. Example: 2030-01-01T01:00:00Z.",
              "type": "string"
            },
            "state": {
              "description": "Specifies whether the schedule is enabled or disabled. One of: ENABLED (default), DISABLED.",
              "type": "string"
            },
            "target": {
              "description": "Configures the target of the schedule. Detailed below.",
              "properties": {
                "arn": {
                  "description": "ARN of the target of this schedule, such as a SQS queue or ECS cluster. For universal targets, this is a Service ARN specific to the target service.",
                  "type": "string"
                },
                "arnRef": {
                  "description": "Reference to a Queue in sqs to populate arn.",
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "properties": {
                        "resolution": {
                          "default": "Required",
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "enum": [
                            "Required",
                            "Optional"
                          ],
                          "type": "string"
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "arnSelector": {
                  "description": "Selector for a Queue in sqs to populate arn.",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "properties": {
                        "resolution": {
                          "default": "Required",
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "enum": [
                            "Required",
                            "Optional"
                          ],
                          "type": "string"
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "deadLetterConfig": {
                  "description": "Information about an Amazon SQS queue that EventBridge Scheduler uses as a dead-letter queue for your schedule. If specified, EventBridge Scheduler delivers failed events that could not be successfully delivered to a target to the queue. Detailed below.",
                  "properties": {
                    "arn": {
                      "description": "ARN of the target of this schedule, such as a SQS queue or ECS cluster. For universal targets, this is a Service ARN specific to the target service.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "ecsParameters": {
                  "description": "Templated target type for the Amazon ECS RunTask API operation. Detailed below.",
                  "properties": {
                    "capacityProviderStrategy": {
                      "description": "Up to 6 capacity provider strategies to use for the task. Detailed below.",
                      "items": {
                        "properties": {
                          "base": {
                            "description": "How many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Ranges from 0 (default) to 100000.",
                            "type": "number"
                          },
                          "capacityProvider": {
                            "description": "Short name of the capacity provider.",
                            "type": "string"
                          },
                          "weight": {
                            "description": "Designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Ranges from from 0 to 1000.",
                            "type": "number"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "enableEcsManagedTags": {
                      "description": "Specifies whether to enable Amazon ECS managed tags for the task. For more information, see Tagging Your Amazon ECS Resources in the Amazon ECS Developer Guide.",
                      "type": "boolean"
                    },
                    "enableExecuteCommand": {
                      "description": "Specifies whether to enable the execute command functionality for the containers in this task.",
                      "type": "boolean"
                    },
                    "group": {
                      "description": "Specifies an ECS task group for the task. At most 255 characters.",
                      "type": "string"
                    },
                    "launchType": {
                      "description": "Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. One of: EC2, FARGATE, EXTERNAL.",
                      "type": "string"
                    },
                    "networkConfiguration": {
                      "description": "Configures the networking associated with the task. Detailed below.",
                      "properties": {
                        "assignPublicIp": {
                          "description": "Specifies whether the task's elastic network interface receives a public IP address. This attribute is a boolean type, where true maps to ENABLED and false to DISABLED. You can specify true only when the launch_type is set to FARGATE.",
                          "type": "boolean"
                        },
                        "securityGroups": {
                          "description": "Set of 1 to 5 Security Group ID-s to be associated with the task. These security groups must all be in the same VPC.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        },
                        "subnets": {
                          "description": "Set of 1 to 16 subnets to be associated with the task. These subnets must all be in the same VPC.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "placementConstraints": {
                      "description": "A set of up to 10 placement constraints to use for the task. Detailed below.",
                      "items": {
                        "properties": {
                          "expression": {
                            "description": "A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. For more information, see Cluster query language in the Amazon ECS Developer Guide.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of placement strategy. One of: random, spread, binpack.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "placementStrategy": {
                      "description": "A set of up to 5 placement strategies. Detailed below.",
                      "items": {
                        "properties": {
                          "field": {
                            "description": "The field to apply the placement strategy against.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of placement strategy. One of: random, spread, binpack.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "platformVersion": {
                      "description": "Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0.",
                      "type": "string"
                    },
                    "propagateTags": {
                      "description": "Specifies whether to propagate the tags from the task definition to the task. One of: TASK_DEFINITION.",
                      "type": "string"
                    },
                    "referenceId": {
                      "description": "Reference ID to use for the task.",
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Key-value map of resource tags.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    },
                    "taskCount": {
                      "description": "The number of tasks to create. Ranges from 1 (default) to 10.",
                      "type": "number"
                    },
                    "taskDefinitionArn": {
                      "description": "ARN of the task definition to use.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "eventbridgeParameters": {
                  "description": "Templated target type for the EventBridge PutEvents API operation. Detailed below.",
                  "properties": {
                    "detailType": {
                      "description": "Free-form string used to decide what fields to expect in the event detail. Up to 128 characters.",
                      "type": "string"
                    },
                    "source": {
                      "description": "Source of the event.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "input": {
                  "description": "Text, or well-formed JSON, passed to the target. Read more in Universal target.",
                  "type": "string"
                },
                "kinesisParameters": {
                  "description": "Templated target type for the Amazon Kinesis PutRecord API operation. Detailed below.",
                  "properties": {
                    "partitionKey": {
                      "description": "Specifies the shard to which EventBridge Scheduler sends the event. Up to 256 characters.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "retryPolicy": {
                  "description": "Information about the retry policy settings. Detailed below.",
                  "properties": {
                    "maximumEventAgeInSeconds": {
                      "description": "Maximum amount of time, in seconds, to continue to make retry attempts. Ranges from 60 to 86400 (default).",
                      "type": "number"
                    },
                    "maximumRetryAttempts": {
                      "description": "Maximum number of retry attempts to make before the request fails. Ranges from 0 to 185 (default).",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "roleArn": {
                  "description": "ARN of the IAM role that EventBridge Scheduler will use for this target when the schedule is invoked. Read more in Set up the execution role.",
                  "type": "string"
                },
                "roleArnRef": {
                  "description": "Reference to a Role in iam to populate roleArn.",
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "properties": {
                        "resolution": {
                          "default": "Required",
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "enum": [
                            "Required",
                            "Optional"
                          ],
                          "type": "string"
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "roleArnSelector": {
                  "description": "Selector for a Role in iam to populate roleArn.",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "properties": {
                        "resolution": {
                          "default": "Required",
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "enum": [
                            "Required",
                            "Optional"
                          ],
                          "type": "string"
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "sagemakerPipelineParameters": {
                  "description": "Templated target type for the Amazon SageMaker StartPipelineExecution API operation. Detailed below.",
                  "properties": {
                    "pipelineParameter": {
                      "description": "Set of up to 200 parameter names and values to use when executing the SageMaker Model Building Pipeline. Detailed below.",
                      "items": {
                        "properties": {
                          "name": {
                            "description": "Name of parameter to start execution of a SageMaker Model Building Pipeline.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value of parameter to start execution of a SageMaker Model Building Pipeline.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "sqsParameters": {
                  "description": "The templated target type for the Amazon SQS SendMessage API operation. Detailed below.",
                  "properties": {
                    "messageGroupId": {
                      "description": "FIFO message group ID to use as the target.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which\ncontains a name, metadata and a reference to secret store config to\nwhich any connection details for this managed resource should be written.\nConnection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used\nfor this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.annotations\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.labels\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret.\n- Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.\nThis field is planned to be replaced in a future release in favor of\nPublishConnectionDetailsTo. Currently, both could be set independently\nand connection details would be published to both without affecting\neach other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "spec.forProvider.flexibleTimeWindow is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.flexibleTimeWindow) || (has(self.initProvider) && has(self.initProvider.flexibleTimeWindow))"
        },
        {
          "message": "spec.forProvider.scheduleExpression is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scheduleExpression) || (has(self.initProvider) && has(self.initProvider.scheduleExpression))"
        },
        {
          "message": "spec.forProvider.target is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.target) || (has(self.initProvider) && has(self.initProvider.target))"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "ScheduleStatus defines the observed state of Schedule.",
      "properties": {
        "atProvider": {
          "properties": {
            "arn": {
              "description": "ARN of the SQS queue specified as the destination for the dead-letter queue.",
              "type": "string"
            },
            "description": {
              "description": "Brief description of the schedule.",
              "type": "string"
            },
            "endDate": {
              "description": "The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the end date you specify. EventBridge Scheduler ignores the end date for one-time schedules. Example: 2030-01-01T01:00:00Z.",
              "type": "string"
            },
            "flexibleTimeWindow": {
              "description": "Configures a time window during which EventBridge Scheduler invokes the schedule. Detailed below.",
              "properties": {
                "maximumWindowInMinutes": {
                  "description": "Maximum time window during which a schedule can be invoked. Ranges from 1 to 1440 minutes.",
                  "type": "number"
                },
                "mode": {
                  "description": "Determines whether the schedule is invoked within a flexible time window. One of: OFF, FLEXIBLE.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "groupName": {
              "description": "Name of the schedule group to associate with this schedule. When omitted, the default schedule group is used.",
              "type": "string"
            },
            "id": {
              "description": "Name of the schedule.",
              "type": "string"
            },
            "kmsKeyArn": {
              "description": "ARN for the customer managed KMS key that EventBridge Scheduler will use to encrypt and decrypt your data.",
              "type": "string"
            },
            "name": {
              "description": "Name of the schedule. Conflicts with name_prefix.",
              "type": "string"
            },
            "scheduleExpression": {
              "description": "Defines when the schedule runs. Read more in Schedule types on EventBridge Scheduler.",
              "type": "string"
            },
            "scheduleExpressionTimezone": {
              "description": "Timezone in which the scheduling expression is evaluated. Defaults to UTC. Example: Australia/Sydney.",
              "type": "string"
            },
            "startDate": {
              "description": "The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the start date you specify. EventBridge Scheduler ignores the start date for one-time schedules. Example: 2030-01-01T01:00:00Z.",
              "type": "string"
            },
            "state": {
              "description": "Specifies whether the schedule is enabled or disabled. One of: ENABLED (default), DISABLED.",
              "type": "string"
            },
            "target": {
              "description": "Configures the target of the schedule. Detailed below.",
              "properties": {
                "arn": {
                  "description": "ARN of the target of this schedule, such as a SQS queue or ECS cluster. For universal targets, this is a Service ARN specific to the target service.",
                  "type": "string"
                },
                "deadLetterConfig": {
                  "description": "Information about an Amazon SQS queue that EventBridge Scheduler uses as a dead-letter queue for your schedule. If specified, EventBridge Scheduler delivers failed events that could not be successfully delivered to a target to the queue. Detailed below.",
                  "properties": {
                    "arn": {
                      "description": "ARN of the target of this schedule, such as a SQS queue or ECS cluster. For universal targets, this is a Service ARN specific to the target service.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "ecsParameters": {
                  "description": "Templated target type for the Amazon ECS RunTask API operation. Detailed below.",
                  "properties": {
                    "capacityProviderStrategy": {
                      "description": "Up to 6 capacity provider strategies to use for the task. Detailed below.",
                      "items": {
                        "properties": {
                          "base": {
                            "description": "How many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Ranges from 0 (default) to 100000.",
                            "type": "number"
                          },
                          "capacityProvider": {
                            "description": "Short name of the capacity provider.",
                            "type": "string"
                          },
                          "weight": {
                            "description": "Designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Ranges from from 0 to 1000.",
                            "type": "number"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "enableEcsManagedTags": {
                      "description": "Specifies whether to enable Amazon ECS managed tags for the task. For more information, see Tagging Your Amazon ECS Resources in the Amazon ECS Developer Guide.",
                      "type": "boolean"
                    },
                    "enableExecuteCommand": {
                      "description": "Specifies whether to enable the execute command functionality for the containers in this task.",
                      "type": "boolean"
                    },
                    "group": {
                      "description": "Specifies an ECS task group for the task. At most 255 characters.",
                      "type": "string"
                    },
                    "launchType": {
                      "description": "Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. One of: EC2, FARGATE, EXTERNAL.",
                      "type": "string"
                    },
                    "networkConfiguration": {
                      "description": "Configures the networking associated with the task. Detailed below.",
                      "properties": {
                        "assignPublicIp": {
                          "description": "Specifies whether the task's elastic network interface receives a public IP address. This attribute is a boolean type, where true maps to ENABLED and false to DISABLED. You can specify true only when the launch_type is set to FARGATE.",
                          "type": "boolean"
                        },
                        "securityGroups": {
                          "description": "Set of 1 to 5 Security Group ID-s to be associated with the task. These security groups must all be in the same VPC.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        },
                        "subnets": {
                          "description": "Set of 1 to 16 subnets to be associated with the task. These subnets must all be in the same VPC.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "placementConstraints": {
                      "description": "A set of up to 10 placement constraints to use for the task. Detailed below.",
                      "items": {
                        "properties": {
                          "expression": {
                            "description": "A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. For more information, see Cluster query language in the Amazon ECS Developer Guide.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of placement strategy. One of: random, spread, binpack.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "placementStrategy": {
                      "description": "A set of up to 5 placement strategies. Detailed below.",
                      "items": {
                        "properties": {
                          "field": {
                            "description": "The field to apply the placement strategy against.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of placement strategy. One of: random, spread, binpack.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "platformVersion": {
                      "description": "Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0.",
                      "type": "string"
                    },
                    "propagateTags": {
                      "description": "Specifies whether to propagate the tags from the task definition to the task. One of: TASK_DEFINITION.",
                      "type": "string"
                    },
                    "referenceId": {
                      "description": "Reference ID to use for the task.",
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Key-value map of resource tags.",
                      "type": "object",
                      "x-kubernetes-map-type": "granular"
                    },
                    "taskCount": {
                      "description": "The number of tasks to create. Ranges from 1 (default) to 10.",
                      "type": "number"
                    },
                    "taskDefinitionArn": {
                      "description": "ARN of the task definition to use.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "eventbridgeParameters": {
                  "description": "Templated target type for the EventBridge PutEvents API operation. Detailed below.",
                  "properties": {
                    "detailType": {
                      "description": "Free-form string used to decide what fields to expect in the event detail. Up to 128 characters.",
                      "type": "string"
                    },
                    "source": {
                      "description": "Source of the event.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "input": {
                  "description": "Text, or well-formed JSON, passed to the target. Read more in Universal target.",
                  "type": "string"
                },
                "kinesisParameters": {
                  "description": "Templated target type for the Amazon Kinesis PutRecord API operation. Detailed below.",
                  "properties": {
                    "partitionKey": {
                      "description": "Specifies the shard to which EventBridge Scheduler sends the event. Up to 256 characters.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "retryPolicy": {
                  "description": "Information about the retry policy settings. Detailed below.",
                  "properties": {
                    "maximumEventAgeInSeconds": {
                      "description": "Maximum amount of time, in seconds, to continue to make retry attempts. Ranges from 60 to 86400 (default).",
                      "type": "number"
                    },
                    "maximumRetryAttempts": {
                      "description": "Maximum number of retry attempts to make before the request fails. Ranges from 0 to 185 (default).",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "roleArn": {
                  "description": "ARN of the IAM role that EventBridge Scheduler will use for this target when the schedule is invoked. Read more in Set up the execution role.",
                  "type": "string"
                },
                "sagemakerPipelineParameters": {
                  "description": "Templated target type for the Amazon SageMaker StartPipelineExecution API operation. Detailed below.",
                  "properties": {
                    "pipelineParameter": {
                      "description": "Set of up to 200 parameter names and values to use when executing the SageMaker Model Building Pipeline. Detailed below.",
                      "items": {
                        "properties": {
                          "name": {
                            "description": "Name of parameter to start execution of a SageMaker Model Building Pipeline.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value of parameter to start execution of a SageMaker Model Building Pipeline.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "sqsParameters": {
                  "description": "The templated target type for the Amazon SQS SendMessage API operation. Detailed below.",
                  "properties": {
                    "messageGroupId": {
                      "description": "FIFO message group ID to use as the target.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
