{
  "description": "KafkaTopic is the Schema for the kafkatopics API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "KafkaTopicSpec defines the desired state of KafkaTopic",
      "properties": {
        "authSecretRef": {
          "description": "Authentication reference to Aiven token in a secret",
          "properties": {
            "key": {
              "minLength": 1,
              "type": "string"
            },
            "name": {
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "key",
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "config": {
          "description": "Kafka topic configuration",
          "properties": {
            "cleanup_policy": {
              "description": "cleanup.policy value",
              "type": "string"
            },
            "compression_type": {
              "description": "compression.type value",
              "type": "string"
            },
            "delete_retention_ms": {
              "description": "delete.retention.ms value",
              "format": "int64",
              "type": "integer"
            },
            "file_delete_delay_ms": {
              "description": "file.delete.delay.ms value",
              "format": "int64",
              "type": "integer"
            },
            "flush_messages": {
              "description": "flush.messages value",
              "format": "int64",
              "type": "integer"
            },
            "flush_ms": {
              "description": "flush.ms value",
              "format": "int64",
              "type": "integer"
            },
            "index_interval_bytes": {
              "description": "index.interval.bytes value",
              "format": "int64",
              "type": "integer"
            },
            "local_retention_bytes": {
              "description": "local.retention.bytes value",
              "format": "int64",
              "type": "integer"
            },
            "local_retention_ms": {
              "description": "local.retention.ms value",
              "format": "int64",
              "type": "integer"
            },
            "max_compaction_lag_ms": {
              "description": "max.compaction.lag.ms value",
              "format": "int64",
              "type": "integer"
            },
            "max_message_bytes": {
              "description": "max.message.bytes value",
              "format": "int64",
              "type": "integer"
            },
            "message_downconversion_enable": {
              "description": "message.downconversion.enable value",
              "type": "boolean"
            },
            "message_format_version": {
              "description": "message.format.version value",
              "type": "string"
            },
            "message_timestamp_difference_max_ms": {
              "description": "message.timestamp.difference.max.ms value",
              "format": "int64",
              "type": "integer"
            },
            "message_timestamp_type": {
              "description": "message.timestamp.type value",
              "type": "string"
            },
            "min_cleanable_dirty_ratio": {
              "description": "min.cleanable.dirty.ratio value",
              "type": "number"
            },
            "min_compaction_lag_ms": {
              "description": "min.compaction.lag.ms value",
              "format": "int64",
              "type": "integer"
            },
            "min_insync_replicas": {
              "description": "min.insync.replicas value",
              "format": "int64",
              "type": "integer"
            },
            "preallocate": {
              "description": "preallocate value",
              "type": "boolean"
            },
            "remote_storage_enable": {
              "description": "remote_storage_enable",
              "type": "boolean"
            },
            "retention_bytes": {
              "description": "retention.bytes value",
              "format": "int64",
              "type": "integer"
            },
            "retention_ms": {
              "description": "retention.ms value",
              "format": "int64",
              "type": "integer"
            },
            "segment_bytes": {
              "description": "segment.bytes value",
              "format": "int64",
              "type": "integer"
            },
            "segment_index_bytes": {
              "description": "segment.index.bytes value",
              "format": "int64",
              "type": "integer"
            },
            "segment_jitter_ms": {
              "description": "segment.jitter.ms value",
              "format": "int64",
              "type": "integer"
            },
            "segment_ms": {
              "description": "segment.ms value",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "partitions": {
          "description": "Number of partitions to create in the topic",
          "maximum": 1000000,
          "minimum": 1,
          "type": "integer"
        },
        "project": {
          "description": "Identifies the project this resource belongs to",
          "maxLength": 63,
          "pattern": "^[a-zA-Z0-9_-]+$",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "message": "Value is immutable",
              "rule": "self == oldSelf"
            }
          ]
        },
        "replication": {
          "description": "Replication factor for the topic",
          "minimum": 2,
          "type": "integer"
        },
        "serviceName": {
          "description": "Specifies the name of the service that this resource belongs to",
          "maxLength": 63,
          "pattern": "^[a-z][-a-z0-9]+$",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "message": "Value is immutable",
              "rule": "self == oldSelf"
            }
          ]
        },
        "tags": {
          "description": "Kafka topic tags",
          "items": {
            "properties": {
              "key": {
                "maxLength": 64,
                "minLength": 1,
                "pattern": "^[a-zA-Z0-9_-]+$",
                "type": "string"
              },
              "value": {
                "maxLength": 256,
                "pattern": "^[a-zA-Z0-9_-]+$",
                "type": "string"
              }
            },
            "required": [
              "key"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "termination_protection": {
          "description": "It is a Kubernetes side deletion protections, which prevents the kafka topic\nfrom being deleted by Kubernetes. It is recommended to enable this for any production\ndatabases containing critical data.",
          "type": "boolean"
        },
        "topicName": {
          "description": "Topic name. If provided, is used instead of metadata.name.\nThis field supports additional characters, has a longer length,\nand will replace metadata.name in future releases",
          "maxLength": 249,
          "minLength": 1,
          "type": "string",
          "x-kubernetes-validations": [
            {
              "message": "Value is immutable",
              "rule": "self == oldSelf"
            }
          ]
        }
      },
      "required": [
        "partitions",
        "project",
        "replication",
        "serviceName"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "KafkaTopicStatus defines the observed state of KafkaTopic",
      "properties": {
        "conditions": {
          "description": "Conditions represent the latest available observations of an KafkaTopic state",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "state": {
          "description": "State represents the state of the kafka topic",
          "type": "string"
        }
      },
      "required": [
        "conditions",
        "state"
      ],
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
