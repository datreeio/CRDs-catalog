{
  "description": "Subscription is the Schema for the Subscriptions API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "SubscriptionSpec defines the desired state of Subscription. \n A wrapper type for the attributes of an Amazon SNS subscription.",
      "properties": {
        "deliveryPolicy": {
          "type": "string"
        },
        "endpoint": {
          "description": "The endpoint that you want to receive notifications. Endpoints vary by protocol: \n - For the http protocol, the (public) endpoint is a URL beginning with http://. \n - For the https protocol, the (public) endpoint is a URL beginning with https://. \n - For the email protocol, the endpoint is an email address. \n - For the email-json protocol, the endpoint is an email address. \n - For the sms protocol, the endpoint is a phone number of an SMS-enabled device. \n - For the sqs protocol, the endpoint is the ARN of an Amazon SQS queue. \n - For the application protocol, the endpoint is the EndpointArn of a mobile app and device. \n - For the lambda protocol, the endpoint is the ARN of an Lambda function. \n - For the firehose protocol, the endpoint is the ARN of an Amazon Kinesis Data Firehose delivery stream.",
          "type": "string"
        },
        "filterPolicy": {
          "type": "string"
        },
        "filterPolicyScope": {
          "type": "string"
        },
        "protocol": {
          "description": "The protocol that you want to use. Supported protocols include: \n - http \u2013 delivery of JSON-encoded message via HTTP POST \n - https \u2013 delivery of JSON-encoded message via HTTPS POST \n - email \u2013 delivery of message via SMTP \n - email-json \u2013 delivery of JSON-encoded message via SMTP \n - sms \u2013 delivery of message via SMS \n - sqs \u2013 delivery of JSON-encoded message to an Amazon SQS queue \n - application \u2013 delivery of JSON-encoded message to an EndpointArn for a mobile app and device \n - lambda \u2013 delivery of JSON-encoded message to an Lambda function \n - firehose \u2013 delivery of JSON-encoded message to an Amazon Kinesis Data Firehose delivery stream.",
          "type": "string"
        },
        "rawMessageDelivery": {
          "type": "string"
        },
        "redrivePolicy": {
          "type": "string"
        },
        "subscriptionRoleARN": {
          "type": "string"
        },
        "topicARN": {
          "description": "The ARN of the topic you want to subscribe to.",
          "type": "string"
        },
        "topicRef": {
          "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: \n from: name: my-api",
          "properties": {
            "from": {
              "description": "AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "protocol"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "SubscriptionStatus defines the observed state of Subscription",
      "properties": {
        "ackResourceMetadata": {
          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member that is used to contain resource sync state, account ownership, constructed ARN for the resource",
          "properties": {
            "arn": {
              "description": "ARN is the Amazon Resource Name for the resource. This is a globally-unique identifier and is set only by the ACK service controller once the controller has orchestrated the creation of the resource OR when it has verified that an \"adopted\" resource (a resource where the ARN annotation was set by the Kubernetes user on the CR) exists and matches the supplied CR's Spec field values. TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse https://github.com/aws/aws-controllers-k8s/issues/270",
              "type": "string"
            },
            "ownerAccountID": {
              "description": "OwnerAccountID is the AWS Account ID of the account that owns the backend AWS service API resource.",
              "type": "string"
            },
            "region": {
              "description": "Region is the AWS region in which the resource exists or will exist.",
              "type": "string"
            }
          },
          "required": [
            "ownerAccountID",
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource",
          "items": {
            "description": "Condition is the common struct used by all CRDs managed by ACK service controllers to indicate terminal states  of the CR and its backend AWS service API resource",
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A human readable message indicating details about the transition.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type is the type of the Condition",
                "type": "string"
              }
            },
            "required": [
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "confirmationWasAuthenticated": {
          "type": "string"
        },
        "effectiveDeliveryPolicy": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "pendingConfirmation": {
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
