{
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "properties": {
        "External": {
          "description": "FilterExternal closely mimics AuthService.getambassador.io.",
          "properties": {
            "add_linkerd_headers": {
              "type": "boolean"
            },
            "allow_request_body": {
              "type": "boolean"
            },
            "allowed_authorization_headers": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "allowed_request_headers": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "auth_service": {
              "type": "string"
            },
            "failure_mode_allow": {
              "type": "boolean"
            },
            "include_body": {
              "properties": {
                "allow_partial": {
                  "type": "boolean"
                },
                "max_bytes": {
                  "type": "integer"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "path_prefix": {
              "type": "string"
            },
            "proto": {
              "enum": [
                "http",
                "grpc"
              ],
              "type": "string"
            },
            "status_on_error": {
              "properties": {
                "code": {
                  "type": "integer"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "timeout_ms": {
              "description": "TODO(lukeshu): In v3alpha2, change all of the `{foo}_ms`/`MillisecondDuration` fields to `{foo}`/`metav1.Duration`.",
              "type": "integer"
            },
            "tls": {
              "description": "Emissary supports setting \"tls\" to the name of a TLSContext.  Edge Stack External Filters do NOT yet support that; in External Filters \"tls\" is a boolean indicating whether to originate TLS.",
              "type": "boolean"
            },
            "v3ProtocolVersion": {
              "enum": [
                "v2",
                "v3"
              ],
              "type": "string"
            }
          },
          "required": [
            "auth_service"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "JWT": {
          "description": "FilterJWT \n Currently supported algorithms: \n - RSA   - \"RS256\"   - \"RS384\"   - \"RS512\" \n - RSA-PSS   - \"PS256\"   - \"PS384\"   - \"PS512\" \n - ECDSA   - \"ES256\"   - \"ES384\"   - \"ES512\" \n - HMAC-SHA   - \"HS256\"   - \"HS384\"   - \"HS512\" \n - \"none\" \n This is this list of algos built-in to github.com/golang-jwt/jwt/v4 https://github.com/golang-jwt/jwt/tree/v4.4.2#signing-methods-and-key-types v4.4.2.  Keep this list in sync if we pull in a golang-jwt update. More algorithms can be added with jwt.RegistersigningMethod(). \n Haha, JK, our JWKS parser only understands RSA keys.",
          "properties": {
            "audience": {
              "type": "string"
            },
            "errorResponse": {
              "properties": {
                "bodyTemplate": {
                  "type": "string"
                },
                "contentType": {
                  "type": "string"
                },
                "headers": {
                  "items": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "realm": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "injectRequestHeaders": {
              "items": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "insecureTLS": {
              "type": "boolean"
            },
            "issuer": {
              "type": "string"
            },
            "jwksURI": {
              "type": "string"
            },
            "leewayForExpiresAt": {
              "type": "string"
            },
            "leewayForIssuedAt": {
              "type": "string"
            },
            "leewayForNotBefore": {
              "type": "string"
            },
            "renegotiateTLS": {
              "enum": [
                "never",
                "onceAsClient",
                "freelyAsClient"
              ],
              "type": "string"
            },
            "requireAudience": {
              "type": "boolean"
            },
            "requireExpiresAt": {
              "type": "boolean"
            },
            "requireIssuedAt": {
              "type": "boolean"
            },
            "requireIssuer": {
              "type": "boolean"
            },
            "requireNotBefore": {
              "type": "boolean"
            },
            "v3MaxStale": {
              "type": "string"
            },
            "validAlgorithms": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "OAuth2": {
          "properties": {
            "accessTokenJWTFilter": {
              "properties": {
                "arguments": {
                  "properties": {
                    "scope": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "inheritScopeArgument": {
                  "type": "boolean"
                },
                "name": {
                  "type": "string"
                },
                "namespace": {
                  "type": "string"
                },
                "stripInheritedScope": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "accessTokenValidation": {
              "type": "string"
            },
            "allowMalformedAccessToken": {
              "type": "boolean"
            },
            "audience": {
              "type": "string"
            },
            "authorizationURL": {
              "type": "string"
            },
            "clientAuthentication": {
              "properties": {
                "jwtAssertion": {
                  "properties": {
                    "audience": {
                      "type": "string"
                    },
                    "lifetime": {
                      "type": "string"
                    },
                    "nbfSafetyMargin": {
                      "type": "string"
                    },
                    "otherClaims": {
                      "description": "UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.",
                      "type": "object",
                      "x-kubernetes-preserve-unknown-fields": true
                    },
                    "otherHeaderParameters": {
                      "description": "UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.",
                      "type": "object",
                      "x-kubernetes-preserve-unknown-fields": true
                    },
                    "setClientID": {
                      "type": "boolean"
                    },
                    "setIAT": {
                      "type": "boolean"
                    },
                    "setNBF": {
                      "type": "boolean"
                    },
                    "signingMethod": {
                      "enum": [
                        "ES256",
                        "ES384",
                        "ES512",
                        "HS256",
                        "HS384",
                        "HS512",
                        "PS256",
                        "PS384",
                        "PS512",
                        "RS256",
                        "RS384",
                        "RS512",
                        "none"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "method": {
                  "enum": [
                    "",
                    "HeaderPassword",
                    "BodyPassword",
                    "JWTAssertion"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "clientID": {
              "type": "string"
            },
            "clientSessionMaxIdle": {
              "type": "string"
            },
            "clientURL": {
              "type": "string"
            },
            "expirationSafetyMargin": {
              "type": "string"
            },
            "extraAuthorizationParameters": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "grantType": {
              "type": "string"
            },
            "injectRequestHeaders": {
              "items": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "insecureTLS": {
              "type": "boolean"
            },
            "maxStale": {
              "type": "string"
            },
            "protectedOrigins": {
              "items": {
                "properties": {
                  "includeSubdomains": {
                    "type": "boolean"
                  },
                  "internalOrigin": {
                    "type": "string"
                  },
                  "origin": {
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "renegotiateTLS": {
              "enum": [
                "never",
                "onceAsClient",
                "freelyAsClient"
              ],
              "type": "string"
            },
            "secret": {
              "type": "string"
            },
            "secretName": {
              "type": "string"
            },
            "secretNamespace": {
              "type": "string"
            },
            "stateTTL": {
              "type": "string"
            },
            "useSessionCookies": {
              "properties": {
                "ifRequestHeader": {
                  "description": "HeaderFieldSelector allows for matching on header fields using an exact match value or using a regular expression match.",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "negate": {
                      "type": "boolean"
                    },
                    "value": {
                      "description": "Value is an exact match, empty is a valid value",
                      "type": "string"
                    },
                    "valueRegex": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "value": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "v3postLogoutRedirectURI": {
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "Plugin": {
          "properties": {
            "name": {
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "v3APIKey": {
          "description": "FilterAPIKey enforce a set of API Keys.",
          "properties": {
            "httpHeader": {
              "type": "string"
            },
            "keys": {
              "items": {
                "description": "APIKeyItem defines how to resolve the values of the keys.",
                "properties": {
                  "secretName": {
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "required": [
            "keys"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object",
      "x-kubernetes-preserve-unknown-fields": true,
      "additionalProperties": false
    }
  },
  "type": "object"
}
