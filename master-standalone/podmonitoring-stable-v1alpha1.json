{
  "description": "PodMonitoring defines monitoring for a set of pods.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "Specification of desired Pod selection for target discovery by\nPrometheus.",
      "properties": {
        "endpoints": {
          "description": "The endpoints to scrape on the selected pods.",
          "items": {
            "description": "ScrapeEndpoint specifies a Prometheus metrics endpoint to scrape.",
            "properties": {
              "interval": {
                "description": "Interval at which to scrape metrics. Must be a valid Prometheus duration.",
                "type": "string"
              },
              "metricRelabeling": {
                "description": "Relabeling rules for metrics scraped from this endpoint. Relabeling rules that\noverride protected target labels (project_id, location, cluster, namespace, job,\ninstance, or __address__) are not permitted. The labelmap action is not permitted\nin general.",
                "items": {
                  "description": "RelabelingRule defines a single Prometheus relabeling rule.",
                  "properties": {
                    "action": {
                      "description": "Action to perform based on regex matching. Defaults to 'replace'.",
                      "type": "string"
                    },
                    "modulus": {
                      "description": "Modulus to take of the hash of the source label values.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "regex": {
                      "description": "Regular expression against which the extracted value is matched. Defaults to '(.*)'.",
                      "type": "string"
                    },
                    "replacement": {
                      "description": "Replacement value against which a regex replace is performed if the\nregular expression matches. Regex capture groups are available. Defaults to '$1'.",
                      "type": "string"
                    },
                    "separator": {
                      "description": "Separator placed between concatenated source label values. Defaults to ';'.",
                      "type": "string"
                    },
                    "sourceLabels": {
                      "description": "The source labels select values from existing labels. Their content is concatenated\nusing the configured separator and matched against the configured regular expression\nfor the replace, keep, and drop actions.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "targetLabel": {
                      "description": "Label to which the resulting value is written in a replace action.\nIt is mandatory for replace actions. Regex capture groups are available.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "type": "array"
              },
              "params": {
                "additionalProperties": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "description": "HTTP GET params to use when scraping.",
                "type": "object"
              },
              "path": {
                "description": "HTTP path to scrape metrics from. Defaults to \"/metrics\".",
                "type": "string"
              },
              "port": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "Name or number of the port to scrape.",
                "x-kubernetes-int-or-string": true
              },
              "proxyUrl": {
                "description": "Proxy URL to scrape through. Encoded passwords are not supported.",
                "type": "string"
              },
              "scheme": {
                "description": "Protocol scheme to use to scrape.",
                "type": "string"
              },
              "timeout": {
                "description": "Timeout for metrics scrapes. Must be a valid Prometheus duration.\nMust not be larger then the scrape interval.",
                "type": "string"
              }
            },
            "required": [
              "port"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "limits": {
          "description": "Limits to apply at scrape time.",
          "properties": {
            "labelNameLength": {
              "description": "Maximum label name length.\nUses Prometheus default if left unspecified.",
              "format": "int64",
              "type": "integer"
            },
            "labelValueLength": {
              "description": "Maximum label value length.\nUses Prometheus default if left unspecified.",
              "format": "int64",
              "type": "integer"
            },
            "labels": {
              "description": "Maximum number of labels accepted for a single sample.\nUses Prometheus default if left unspecified.",
              "format": "int64",
              "type": "integer"
            },
            "samples": {
              "description": "Maximum number of samples accepted within a single scrape.\nUses Prometheus default if left unspecified.",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "selector": {
          "description": "Label selector that specifies which pods are selected for this monitoring\nconfiguration.",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "key",
                  "operator"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "matchLabels": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object"
            }
          },
          "type": "object",
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        },
        "targetLabels": {
          "description": "Labels to add to the Prometheus target for discovered endpoints.",
          "properties": {
            "fromPod": {
              "description": "Labels to transfer from the Kubernetes Pod to Prometheus target labels.\nMappings are applied in order.",
              "items": {
                "description": "LabelMapping specifies how to transfer a label from a Kubernetes resource\nonto a Prometheus target.",
                "properties": {
                  "from": {
                    "description": "Kubenetes resource label to remap.",
                    "type": "string"
                  },
                  "to": {
                    "description": "Remapped Prometheus target label.\nDefaults to the same name as `From`.",
                    "type": "string"
                  }
                },
                "required": [
                  "from"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "metadata": {
              "description": "Pod metadata labels that are set on all scraped targets.\nPermitted keys are `pod`, `container`, and `node` for PodMonitoring and\n`pod`, `container`, `node`, and `namespace` for ClusterPodMonitoring.\nDefaults to [pod, container] for PodMonitoring and [namespace, pod, container]\nfor ClusterPodMonitoring.\nIf set to null, it will be interpreted as the empty list for PodMonitoring\nand to [namespace] for ClusterPodMonitoring. This is for backwards-compatibility\nonly.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "endpoints",
        "selector"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "Most recently observed status of the resource.",
      "properties": {
        "conditions": {
          "description": "Represents the latest available observations of a podmonitor's current state.",
          "items": {
            "description": "MonitoringCondition describes a condition of a PodMonitoring.",
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "lastUpdateTime": {
                "description": "The last time this condition was updated.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A human-readable message indicating details about the transition.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "MonitoringConditionType is the type of MonitoringCondition.",
                "type": "string"
              }
            },
            "required": [
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "observedGeneration": {
          "description": "The generation observed by the controller.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
