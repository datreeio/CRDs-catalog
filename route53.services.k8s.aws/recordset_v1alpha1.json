{
  "description": "RecordSet is the Schema for the RecordSets API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "RecordSetSpec defines the desired state of RecordSet.",
      "properties": {
        "aliasTarget": {
          "description": "Alias resource record sets only: Information about the Amazon Web Services\nresource, such as a CloudFront distribution or an Amazon S3 bucket, that\nyou want to route traffic to.\n\nIf you're creating resource records sets for a private hosted zone, note\nthe following:\n\n  - You can't create an alias resource record set in a private hosted zone\n    to route traffic to a CloudFront distribution.\n\n  - For information about creating failover resource record sets in a private\n    hosted zone, see Configuring Failover in a Private Hosted Zone (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html)\n    in the Amazon Route 53 Developer Guide.",
          "properties": {
            "dnsName": {
              "type": "string"
            },
            "evaluateTargetHealth": {
              "type": "boolean"
            },
            "hostedZoneID": {
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "changeBatch": {
          "description": "A complex type that contains an optional comment and the Changes element.",
          "properties": {
            "changes": {
              "items": {
                "description": "The information for each resource record set that you want to change.",
                "properties": {
                  "action": {
                    "type": "string"
                  },
                  "resourceRecordSet": {
                    "description": "Information about the resource record set to create or delete.",
                    "properties": {
                      "aliasTarget": {
                        "description": "Alias resource record sets only: Information about the Amazon Web Services\nresource, such as a CloudFront distribution or an Amazon S3 bucket, that\nyou want to route traffic to.\n\nWhen creating resource record sets for a private hosted zone, note the following:\n\n   * For information about creating failover resource record sets in a private\n   hosted zone, see Configuring Failover in a Private Hosted Zone (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html).",
                        "properties": {
                          "dnsName": {
                            "type": "string"
                          },
                          "evaluateTargetHealth": {
                            "type": "boolean"
                          },
                          "hostedZoneID": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "cidrRoutingConfig": {
                        "description": "The object that is specified in resource record set object when you are linking\na resource record set to a CIDR location.\n\nA LocationName with an asterisk \u201c*\u201d can be used to create a default CIDR\nrecord. CollectionId is still required for default record.",
                        "properties": {
                          "collectionID": {
                            "type": "string"
                          },
                          "locationName": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "failover": {
                        "type": "string"
                      },
                      "geoLocation": {
                        "description": "A complex type that contains information about a geographic location.",
                        "properties": {
                          "continentCode": {
                            "type": "string"
                          },
                          "countryCode": {
                            "type": "string"
                          },
                          "subdivisionCode": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "healthCheckID": {
                        "type": "string"
                      },
                      "multiValueAnswer": {
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      },
                      "region": {
                        "type": "string"
                      },
                      "resourceRecords": {
                        "items": {
                          "description": "Information specific to the resource record.\n\nIf you're creating an alias resource record set, omit ResourceRecord.",
                          "properties": {
                            "value": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "type": "array"
                      },
                      "setIdentifier": {
                        "type": "string"
                      },
                      "trafficPolicyInstanceID": {
                        "type": "string"
                      },
                      "ttl": {
                        "format": "int64",
                        "type": "integer"
                      },
                      "type_": {
                        "type": "string"
                      },
                      "weight": {
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "comment": {
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "cidrRoutingConfig": {
          "description": "The object that is specified in resource record set object when you are linking\na resource record set to a CIDR location.\n\nA LocationName with an asterisk \u201c*\u201d can be used to create a default CIDR\nrecord. CollectionId is still required for default record.",
          "properties": {
            "collectionID": {
              "type": "string"
            },
            "locationName": {
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "failover": {
          "description": "Failover resource record sets only: To configure failover, you add the Failover\nelement to two resource record sets. For one resource record set, you specify\nPRIMARY as the value for Failover; for the other resource record set, you\nspecify SECONDARY. In addition, you include the HealthCheckId element and\nspecify the health check that you want Amazon Route 53 to perform for each\nresource record set.\n\nExcept where noted, the following failover behaviors assume that you have\nincluded the HealthCheckId element in both resource record sets:\n\n  - When the primary resource record set is healthy, Route 53 responds to\n    DNS queries with the applicable value from the primary resource record\n    set regardless of the health of the secondary resource record set.\n\n  - When the primary resource record set is unhealthy and the secondary\n    resource record set is healthy, Route 53 responds to DNS queries with\n    the applicable value from the secondary resource record set.\n\n  - When the secondary resource record set is unhealthy, Route 53 responds\n    to DNS queries with the applicable value from the primary resource record\n    set regardless of the health of the primary resource record set.\n\n  - If you omit the HealthCheckId element for the secondary resource record\n    set, and if the primary resource record set is unhealthy, Route 53 always\n    responds to DNS queries with the applicable value from the secondary resource\n    record set. This is true regardless of the health of the associated endpoint.\n\nYou can't create non-failover resource record sets that have the same values\nfor the Name and Type elements as failover resource record sets.\n\nFor failover alias resource record sets, you must also include the EvaluateTargetHealth\nelement and set the value to true.\n\nFor more information about configuring failover for Route 53, see the following\ntopics in the Amazon Route 53 Developer Guide:\n\n  - Route 53 Health Checks and DNS Failover (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html)\n\n  - Configuring Failover in a Private Hosted Zone (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html)",
          "type": "string"
        },
        "geoLocation": {
          "description": "Geolocation resource record sets only: A complex type that lets you control\nhow Amazon Route 53 responds to DNS queries based on the geographic origin\nof the query. For example, if you want all queries from Africa to be routed\nto a web server with an IP address of 192.0.2.111, create a resource record\nset with a Type of A and a ContinentCode of AF.\n\nIf you create separate resource record sets for overlapping geographic regions\n(for example, one resource record set for a continent and one for a country\non the same continent), priority goes to the smallest geographic region.\nThis allows you to route most queries for a continent to one resource and\nto route queries for a country on that continent to a different resource.\n\nYou can't create two geolocation resource record sets that specify the same\ngeographic location.\n\nThe value * in the CountryCode element matches all geographic locations that\naren't specified in other geolocation resource record sets that have the\nsame values for the Name and Type elements.\n\nGeolocation works by mapping IP addresses to locations. However, some IP\naddresses aren't mapped to geographic locations, so even if you create geolocation\nresource record sets that cover all seven continents, Route 53 will receive\nsome DNS queries from locations that it can't identify. We recommend that\nyou create a resource record set for which the value of CountryCode is *.\nTwo groups of queries are routed to the resource that you specify in this\nrecord: queries that come from locations for which you haven't created geolocation\nresource record sets and queries from IP addresses that aren't mapped to\na location. If you don't create a * resource record set, Route 53 returns\na \"no answer\" response for queries from those locations.\n\nYou can't create non-geolocation resource record sets that have the same\nvalues for the Name and Type elements as geolocation resource record sets.",
          "properties": {
            "continentCode": {
              "type": "string"
            },
            "countryCode": {
              "type": "string"
            },
            "subdivisionCode": {
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "healthCheckID": {
          "description": "If you want Amazon Route 53 to return this resource record set in response\nto a DNS query only when the status of a health check is healthy, include\nthe HealthCheckId element and specify the ID of the applicable health check.\n\nRoute 53 determines whether a resource record set is healthy based on one\nof the following:\n\n  - By periodically sending a request to the endpoint that is specified\n    in the health check\n\n  - By aggregating the status of a specified group of health checks (calculated\n    health checks)\n\n  - By determining the current state of a CloudWatch alarm (CloudWatch metric\n    health checks)\n\nRoute 53 doesn't check the health of the endpoint that is specified in the\nresource record set, for example, the endpoint specified by the IP address\nin the Value element. When you add a HealthCheckId element to a resource\nrecord set, Route 53 checks the health of the endpoint that you specified\nin the health check.\n\nFor more information, see the following topics in the Amazon Route 53 Developer\nGuide:\n\n  - How Amazon Route 53 Determines Whether an Endpoint Is Healthy (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html)\n\n  - Route 53 Health Checks and DNS Failover (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html)\n\n  - Configuring Failover in a Private Hosted Zone (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html)\n\n# When to Specify HealthCheckId\n\nSpecifying a value for HealthCheckId is useful only when Route 53 is choosing\nbetween two or more resource record sets to respond to a DNS query, and you\nwant Route 53 to base the choice in part on the status of a health check.\nConfiguring health checks makes sense only in the following configurations:\n\n  - Non-alias resource record sets: You're checking the health of a group\n    of non-alias resource record sets that have the same routing policy, name,\n    and type (such as multiple weighted records named www.example.com with\n    a type of A) and you specify health check IDs for all the resource record\n    sets. If the health check status for a resource record set is healthy,\n    Route 53 includes the record among the records that it responds to DNS\n    queries with. If the health check status for a resource record set is\n    unhealthy, Route 53 stops responding to DNS queries using the value for\n    that resource record set. If the health check status for all resource\n    record sets in the group is unhealthy, Route 53 considers all resource\n    record sets in the group healthy and responds to DNS queries accordingly.\n\n  - Alias resource record sets: You specify the following settings: You\n    set EvaluateTargetHealth to true for an alias resource record set in a\n    group of resource record sets that have the same routing policy, name,\n    and type (such as multiple weighted records named www.example.com with\n    a type of A). You configure the alias resource record set to route traffic\n    to a non-alias resource record set in the same hosted zone. You specify\n    a health check ID for the non-alias resource record set. If the health\n    check status is healthy, Route 53 considers the alias resource record\n    set to be healthy and includes the alias record among the records that\n    it responds to DNS queries with. If the health check status is unhealthy,\n    Route 53 stops responding to DNS queries using the alias resource record\n    set. The alias resource record set can also route traffic to a group of\n    non-alias resource record sets that have the same routing policy, name,\n    and type. In that configuration, associate health checks with all of the\n    resource record sets in the group of non-alias resource record sets.\n\n# Geolocation Routing\n\nFor geolocation resource record sets, if an endpoint is unhealthy, Route\n53 looks for a resource record set for the larger, associated geographic\nregion. For example, suppose you have resource record sets for a state in\nthe United States, for the entire United States, for North America, and a\nresource record set that has * for CountryCode is *, which applies to all\nlocations. If the endpoint for the state resource record set is unhealthy,\nRoute 53 checks for healthy resource record sets in the following order until\nit finds a resource record set for which the endpoint is healthy:\n\n  - The United States\n\n  - North America\n\n  - The default resource record set\n\n# Specifying the Health Check Endpoint by Domain Name\n\nIf your health checks specify the endpoint only by domain name, we recommend\nthat you create a separate health check for each endpoint. For example, create\na health check for each HTTP server that is serving content for www.example.com.\nFor the value of FullyQualifiedDomainName, specify the domain name of the\nserver (such as us-east-2-www.example.com), not the name of the resource\nrecord sets (www.example.com).\n\nHealth check results will be unpredictable if you do the following:\n\n  - Create a health check that has the same value for FullyQualifiedDomainName\n    as the name of a resource record set.\n\n  - Associate that health check with the resource record set.",
          "type": "string"
        },
        "hostedZoneID": {
          "description": "The ID of the hosted zone that contains the resource record sets that you\nwant to change.",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "message": "Value is immutable once set",
              "rule": "self == oldSelf"
            }
          ]
        },
        "hostedZoneRef": {
          "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
          "properties": {
            "from": {
              "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
              "properties": {
                "name": {
                  "type": "string"
                },
                "namespace": {
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "multiValueAnswer": {
          "description": "Multivalue answer resource record sets only: To route traffic approximately\nrandomly to multiple resources, such as web servers, create one multivalue\nanswer record for each resource and specify true for MultiValueAnswer. Note\nthe following:\n\n  - If you associate a health check with a multivalue answer resource record\n    set, Amazon Route 53 responds to DNS queries with the corresponding IP\n    address only when the health check is healthy.\n\n  - If you don't associate a health check with a multivalue answer record,\n    Route 53 always considers the record to be healthy.\n\n  - Route 53 responds to DNS queries with up to eight healthy records; if\n    you have eight or fewer healthy records, Route 53 responds to all DNS\n    queries with all the healthy records.\n\n  - If you have more than eight healthy records, Route 53 responds to different\n    DNS resolvers with different combinations of healthy records.\n\n  - When all records are unhealthy, Route 53 responds to DNS queries with\n    up to eight unhealthy records.\n\n  - If a resource becomes unavailable after a resolver caches a response,\n    client software typically tries another of the IP addresses in the response.\n\nYou can't create multivalue answer alias records.",
          "type": "boolean"
        },
        "name": {
          "description": "For ChangeResourceRecordSets requests, the name of the record that you want\nto create, update, or delete. For ListResourceRecordSets responses, the name\nof a record in the specified hosted zone.\n\n# ChangeResourceRecordSets Only\n\nEnter a fully qualified domain name, for example, www.example.com. You can\noptionally include a trailing dot. If you omit the trailing dot, Amazon Route\n53 assumes that the domain name that you specify is fully qualified. This\nmeans that Route 53 treats www.example.com (without a trailing dot) and www.example.com.\n(with a trailing dot) as identical.\n\nFor information about how to specify characters other than a-z, 0-9, and\n- (hyphen) and how to specify internationalized domain names, see DNS Domain\nName Format (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html)\nin the Amazon Route 53 Developer Guide.\n\nYou can use the asterisk (*) wildcard to replace the leftmost label in a\ndomain name, for example, *.example.com. Note the following:\n\n  - The * must replace the entire label. For example, you can't specify\n    *prod.example.com or prod*.example.com.\n\n  - The * can't replace any of the middle labels, for example, marketing.*.example.com.\n\n  - If you include * in any position other than the leftmost label in a\n    domain name, DNS treats it as an * character (ASCII 42), not as a wildcard.\n    You can't use the * wildcard for resource records sets that have a type\n    of NS.",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "message": "Value is immutable once set",
              "rule": "self == oldSelf"
            }
          ]
        },
        "recordType": {
          "description": "The DNS record type. For information about different record types and how\ndata is encoded for them, see Supported DNS Resource Record Types (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html)\nin the Amazon Route 53 Developer Guide.\n\nValid values for basic resource record sets: A | AAAA | CAA | CNAME | DS\n|MX | NAPTR | NS | PTR | SOA | SPF | SRV | TXT| TLSA| SSHFP| SVCB| HTTPS\n\nValues for weighted, latency, geolocation, and failover resource record sets:\nA | AAAA | CAA | CNAME | MX | NAPTR | PTR | SPF | SRV | TXT| TLSA| SSHFP|\nSVCB| HTTPS. When creating a group of weighted, latency, geolocation, or\nfailover resource record sets, specify the same value for all of the resource\nrecord sets in the group.\n\nValid values for multivalue answer resource record sets: A | AAAA | MX |\nNAPTR | PTR | SPF | SRV | TXT| CAA| TLSA| SSHFP| SVCB| HTTPS\n\nSPF records were formerly used to verify the identity of the sender of email\nmessages. However, we no longer recommend that you create resource record\nsets for which the value of Type is SPF. RFC 7208, Sender Policy Framework\n(SPF) for Authorizing Use of Domains in Email, Version 1, has been updated\nto say, \"...[I]ts existence and mechanism defined in [RFC4408] have led to\nsome interoperability issues. Accordingly, its use is no longer appropriate\nfor SPF version 1; implementations are not to use it.\" In RFC 7208, see section\n14.1, The SPF DNS Record Type (http://tools.ietf.org/html/rfc7208#section-14.1).\n\nValues for alias resource record sets:\n\n  - Amazon API Gateway custom regional APIs and edge-optimized APIs: A\n\n  - CloudFront distributions: A If IPv6 is enabled for the distribution,\n    create two resource record sets to route traffic to your distribution,\n    one with a value of A and one with a value of AAAA.\n\n  - Amazon API Gateway environment that has a regionalized subdomain: A\n\n  - ELB load balancers: A | AAAA\n\n  - Amazon S3 buckets: A\n\n  - Amazon Virtual Private Cloud interface VPC endpoints A\n\n  - Another resource record set in this hosted zone: Specify the type of\n    the resource record set that you're creating the alias for. All values\n    are supported except NS and SOA. If you're creating an alias record that\n    has the same name as the hosted zone (known as the zone apex), you can't\n    route traffic to a record for which the value of Type is CNAME. This is\n    because the alias record must have the same type as the record you're\n    routing traffic to, and creating a CNAME record for the zone apex isn't\n    supported even for an alias record.",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "message": "Value is immutable once set",
              "rule": "self == oldSelf"
            }
          ]
        },
        "region": {
          "description": "Latency-based resource record sets only: The Amazon EC2 Region where you\ncreated the resource that this resource record set refers to. The resource\ntypically is an Amazon Web Services resource, such as an EC2 instance or\nan ELB load balancer, and is referred to by an IP address or a DNS domain\nname, depending on the record type.\n\nWhen Amazon Route 53 receives a DNS query for a domain name and type for\nwhich you have created latency resource record sets, Route 53 selects the\nlatency resource record set that has the lowest latency between the end user\nand the associated Amazon EC2 Region. Route 53 then returns the value that\nis associated with the selected resource record set.\n\nNote the following:\n\n  - You can only specify one ResourceRecord per latency resource record\n    set.\n\n  - You can only create one latency resource record set for each Amazon\n    EC2 Region.\n\n  - You aren't required to create latency resource record sets for all Amazon\n    EC2 Regions. Route 53 will choose the region with the best latency from\n    among the regions that you create latency resource record sets for.\n\n  - You can't create non-latency resource record sets that have the same\n    values for the Name and Type elements as latency resource record sets.",
          "type": "string"
        },
        "resourceRecords": {
          "description": "Information about the resource records to act upon.\n\nIf you're creating an alias resource record set, omit ResourceRecords.",
          "items": {
            "description": "Information specific to the resource record.\n\nIf you're creating an alias resource record set, omit ResourceRecord.",
            "properties": {
              "value": {
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "setIdentifier": {
          "description": "Resource record sets that have a routing policy other than simple: An identifier\nthat differentiates among multiple resource record sets that have the same\ncombination of name and type, such as multiple weighted resource record sets\nnamed acme.example.com that have a type of A. In a group of resource record\nsets that have the same name and type, the value of SetIdentifier must be\nunique for each resource record set.\n\nFor information about routing policies, see Choosing a Routing Policy (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html)\nin the Amazon Route 53 Developer Guide.",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "message": "Value is immutable once set",
              "rule": "self == oldSelf"
            }
          ]
        },
        "ttl": {
          "description": "The resource record cache time to live (TTL), in seconds. Note the following:\n\n  - If you're creating or updating an alias resource record set, omit TTL.\n    Amazon Route 53 uses the value of TTL for the alias target.\n\n  - If you're associating this resource record set with a health check (if\n    you're adding a HealthCheckId element), we recommend that you specify\n    a TTL of 60 seconds or less so clients respond quickly to changes in health\n    status.\n\n  - All of the resource record sets in a group of weighted resource record\n    sets must have the same value for TTL.\n\n  - If a group of weighted resource record sets includes one or more weighted\n    alias resource record sets for which the alias target is an ELB load balancer,\n    we recommend that you specify a TTL of 60 seconds for all of the non-alias\n    weighted resource record sets that have the same name and type. Values\n    other than 60 seconds (the TTL for load balancers) will change the effect\n    of the values that you specify for Weight.",
          "format": "int64",
          "type": "integer"
        },
        "weight": {
          "description": "Weighted resource record sets only: Among resource record sets that have\nthe same combination of DNS name and type, a value that determines the proportion\nof DNS queries that Amazon Route 53 responds to using the current resource\nrecord set. Route 53 calculates the sum of the weights for the resource record\nsets that have the same combination of DNS name and type. Route 53 then responds\nto queries based on the ratio of a resource's weight to the total. Note the\nfollowing:\n\n  - You must specify a value for the Weight element for every weighted resource\n    record set.\n\n  - You can only specify one ResourceRecord per weighted resource record\n    set.\n\n  - You can't create latency, failover, or geolocation resource record sets\n    that have the same values for the Name and Type elements as weighted resource\n    record sets.\n\n  - You can create a maximum of 100 weighted resource record sets that have\n    the same values for the Name and Type elements.\n\n  - For weighted (but not weighted alias) resource record sets, if you set\n    Weight to 0 for a resource record set, Route 53 never responds to queries\n    with the applicable value for that resource record set. However, if you\n    set Weight to 0 for all resource record sets that have the same combination\n    of DNS name and type, traffic is routed to all resources with equal probability.\n    The effect of setting Weight to 0 is different when you associate health\n    checks with weighted resource record sets. For more information, see Options\n    for Configuring Route 53 Active-Active and Active-Passive Failover (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html)\n    in the Amazon Route 53 Developer Guide.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "recordType"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "RecordSetStatus defines the observed state of RecordSet",
      "properties": {
        "ackResourceMetadata": {
          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
          "properties": {
            "arn": {
              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
              "type": "string"
            },
            "ownerAccountID": {
              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
              "type": "string"
            },
            "region": {
              "description": "Region is the AWS region in which the resource exists or will exist.",
              "type": "string"
            }
          },
          "required": [
            "ownerAccountID",
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "All CRs managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
          "items": {
            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A human readable message indicating details about the transition.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type is the type of the Condition",
                "type": "string"
              }
            },
            "required": [
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "id": {
          "description": "This element contains an ID that you use when performing a GetChange (https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetChange.html)\naction to get detailed information about the change.",
          "type": "string"
        },
        "status": {
          "description": "The current state of the request. PENDING indicates that this request has\nnot yet been applied to all Amazon Route 53 DNS servers.",
          "type": "string"
        },
        "submittedAt": {
          "description": "The date and time that the change request was submitted in ISO 8601 format\n(https://en.wikipedia.org/wiki/ISO_8601) and Coordinated Universal Time (UTC).\nFor example, the value 2017-03-27T17:48:16.751Z represents March 27, 2017\nat 17:48:16.751 UTC.",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
