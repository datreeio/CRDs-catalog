{
  "description": "BucketInventory is the Schema for the BucketInventorys API. Provides a S3 bucket inventory configuration resource.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "BucketInventorySpec defines the desired state of BucketInventory",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "bucket": {
              "description": "Name of the source bucket that inventory lists the objects for.",
              "type": "string"
            },
            "bucketRef": {
              "description": "Reference to a Bucket in s3 to populate bucket.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "bucketSelector": {
              "description": "Selector for a Bucket in s3 to populate bucket.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "destination": {
              "description": "Contains information about where to publish the inventory results (documented below).",
              "properties": {
                "bucket": {
                  "description": "Name of the source bucket that inventory lists the objects for.",
                  "properties": {
                    "accountId": {
                      "description": "ID of the account that owns the destination bucket. Recommended to be set to prevent problems if the destination bucket ownership changes.",
                      "type": "string"
                    },
                    "bucketArn": {
                      "description": "Amazon S3 bucket ARN of the destination.",
                      "type": "string"
                    },
                    "bucketArnRef": {
                      "description": "Reference to a Bucket in s3 to populate bucketArn.",
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "bucketArnSelector": {
                      "description": "Selector for a Bucket in s3 to populate bucketArn.",
                      "properties": {
                        "matchControllerRef": {
                          "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                          "type": "boolean"
                        },
                        "matchLabels": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "MatchLabels ensures an object with matching labels is selected.",
                          "type": "object"
                        },
                        "policy": {
                          "description": "Policies for selection.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "encryption": {
                      "description": "Contains the type of server-side encryption to use to encrypt the inventory (documented below).",
                      "properties": {
                        "sseKms": {
                          "description": "Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).",
                          "properties": {
                            "keyId": {
                              "description": "ARN of the KMS customer master key (CMK) used to encrypt the inventory file.",
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "sseS3": {
                          "description": "Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.",
                          "type": "object"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "format": {
                      "description": "Specifies the output format of the inventory results. Can be CSV, ORC or Parquet.",
                      "type": "string"
                    },
                    "prefix": {
                      "description": "Prefix that an object must have to be included in the inventory results.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "enabled": {
              "description": "Specifies whether the inventory is enabled or disabled.",
              "type": "boolean"
            },
            "filter": {
              "description": "Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).",
              "properties": {
                "prefix": {
                  "description": "Prefix that an object must have to be included in the inventory results.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "includedObjectVersions": {
              "description": "Object versions to include in the inventory list. Valid values: All, Current.",
              "type": "string"
            },
            "name": {
              "description": "Unique identifier of the inventory configuration for the bucket.",
              "type": "string"
            },
            "optionalFields": {
              "description": "List of optional fields that are included in the inventory results. Please refer to the S3 documentation for more details.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "schedule": {
              "description": "Specifies the schedule for generating inventory results (documented below).",
              "properties": {
                "frequency": {
                  "description": "Specifies how frequently inventory results are produced. Valid values: Daily, Weekly.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "properties": {
            "bucket": {
              "description": "Name of the source bucket that inventory lists the objects for.",
              "type": "string"
            },
            "bucketRef": {
              "description": "Reference to a Bucket in s3 to populate bucket.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "bucketSelector": {
              "description": "Selector for a Bucket in s3 to populate bucket.",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "destination": {
              "description": "Contains information about where to publish the inventory results (documented below).",
              "properties": {
                "bucket": {
                  "description": "Name of the source bucket that inventory lists the objects for.",
                  "properties": {
                    "accountId": {
                      "description": "ID of the account that owns the destination bucket. Recommended to be set to prevent problems if the destination bucket ownership changes.",
                      "type": "string"
                    },
                    "bucketArn": {
                      "description": "Amazon S3 bucket ARN of the destination.",
                      "type": "string"
                    },
                    "bucketArnRef": {
                      "description": "Reference to a Bucket in s3 to populate bucketArn.",
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "bucketArnSelector": {
                      "description": "Selector for a Bucket in s3 to populate bucketArn.",
                      "properties": {
                        "matchControllerRef": {
                          "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                          "type": "boolean"
                        },
                        "matchLabels": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "MatchLabels ensures an object with matching labels is selected.",
                          "type": "object"
                        },
                        "policy": {
                          "description": "Policies for selection.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "encryption": {
                      "description": "Contains the type of server-side encryption to use to encrypt the inventory (documented below).",
                      "properties": {
                        "sseKms": {
                          "description": "Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).",
                          "properties": {
                            "keyId": {
                              "description": "ARN of the KMS customer master key (CMK) used to encrypt the inventory file.",
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "sseS3": {
                          "description": "Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.",
                          "type": "object"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "format": {
                      "description": "Specifies the output format of the inventory results. Can be CSV, ORC or Parquet.",
                      "type": "string"
                    },
                    "prefix": {
                      "description": "Prefix that an object must have to be included in the inventory results.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "enabled": {
              "description": "Specifies whether the inventory is enabled or disabled.",
              "type": "boolean"
            },
            "filter": {
              "description": "Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).",
              "properties": {
                "prefix": {
                  "description": "Prefix that an object must have to be included in the inventory results.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "includedObjectVersions": {
              "description": "Object versions to include in the inventory list. Valid values: All, Current.",
              "type": "string"
            },
            "name": {
              "description": "Unique identifier of the inventory configuration for the bucket.",
              "type": "string"
            },
            "optionalFields": {
              "description": "List of optional fields that are included in the inventory results. Please refer to the S3 documentation for more details.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "schedule": {
              "description": "Specifies the schedule for generating inventory results (documented below).",
              "properties": {
                "frequency": {
                  "description": "Specifies how frequently inventory results are produced. Valid values: Daily, Weekly.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which\ncontains a name, metadata and a reference to secret store config to\nwhich any connection details for this managed resource should be written.\nConnection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used\nfor this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.annotations\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.labels\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret.\n- Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.\nThis field is planned to be replaced in a future release in favor of\nPublishConnectionDetailsTo. Currently, both could be set independently\nand connection details would be published to both without affecting\neach other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "spec.forProvider.destination is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destination) || (has(self.initProvider) && has(self.initProvider.destination))"
        },
        {
          "message": "spec.forProvider.includedObjectVersions is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.includedObjectVersions) || (has(self.initProvider) && has(self.initProvider.includedObjectVersions))"
        },
        {
          "message": "spec.forProvider.name is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))"
        },
        {
          "message": "spec.forProvider.schedule is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.schedule) || (has(self.initProvider) && has(self.initProvider.schedule))"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "BucketInventoryStatus defines the observed state of BucketInventory.",
      "properties": {
        "atProvider": {
          "properties": {
            "bucket": {
              "description": "Name of the source bucket that inventory lists the objects for.",
              "type": "string"
            },
            "destination": {
              "description": "Contains information about where to publish the inventory results (documented below).",
              "properties": {
                "bucket": {
                  "description": "Name of the source bucket that inventory lists the objects for.",
                  "properties": {
                    "accountId": {
                      "description": "ID of the account that owns the destination bucket. Recommended to be set to prevent problems if the destination bucket ownership changes.",
                      "type": "string"
                    },
                    "bucketArn": {
                      "description": "Amazon S3 bucket ARN of the destination.",
                      "type": "string"
                    },
                    "encryption": {
                      "description": "Contains the type of server-side encryption to use to encrypt the inventory (documented below).",
                      "properties": {
                        "sseKms": {
                          "description": "Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).",
                          "properties": {
                            "keyId": {
                              "description": "ARN of the KMS customer master key (CMK) used to encrypt the inventory file.",
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "sseS3": {
                          "description": "Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.",
                          "type": "object"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "format": {
                      "description": "Specifies the output format of the inventory results. Can be CSV, ORC or Parquet.",
                      "type": "string"
                    },
                    "prefix": {
                      "description": "Prefix that an object must have to be included in the inventory results.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "enabled": {
              "description": "Specifies whether the inventory is enabled or disabled.",
              "type": "boolean"
            },
            "filter": {
              "description": "Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).",
              "properties": {
                "prefix": {
                  "description": "Prefix that an object must have to be included in the inventory results.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "id": {
              "type": "string"
            },
            "includedObjectVersions": {
              "description": "Object versions to include in the inventory list. Valid values: All, Current.",
              "type": "string"
            },
            "name": {
              "description": "Unique identifier of the inventory configuration for the bucket.",
              "type": "string"
            },
            "optionalFields": {
              "description": "List of optional fields that are included in the inventory results. Please refer to the S3 documentation for more details.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "schedule": {
              "description": "Specifies the schedule for generating inventory results (documented below).",
              "properties": {
                "frequency": {
                  "description": "Specifies how frequently inventory results are produced. Valid values: Daily, Weekly.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
