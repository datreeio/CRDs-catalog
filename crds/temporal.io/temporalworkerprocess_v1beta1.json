{
  "description": "TemporalWorkerProcess is the Schema for the temporalworkerprocesses API.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "TemporalWorkerProcessSpec defines the desired state of TemporalWorkerProcess.",
      "properties": {
        "builder": {
          "description": "Builder is the configuration for building a TemporalWorkerProcess. THIS FEATURE IS HIGHLY EXPERIMENTAL.",
          "properties": {
            "attempt": {
              "description": "BuildAttempt is the build attempt number of a given version",
              "format": "int32",
              "type": "integer"
            },
            "buildDir": {
              "description": "BuildDir is the location of where the sources will be built.",
              "type": "string"
            },
            "buildRegistry": {
              "description": "BuildRegistry specifies how to connect to container registry.",
              "properties": {
                "passwordSecretRef": {
                  "description": "PasswordSecret is the reference to the secret holding the docker repo password.",
                  "properties": {
                    "key": {
                      "description": "Key in the Secret.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the Secret.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "repository": {
                  "description": "Repository is the fqdn to the image repo.",
                  "type": "string"
                },
                "username": {
                  "description": "Username is the username for the container repo.",
                  "type": "string"
                }
              },
              "required": [
                "passwordSecretRef",
                "repository",
                "username"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "enabled": {
              "description": "Enabled defines if the operator should build the temporal worker process.",
              "type": "boolean"
            },
            "gitRepository": {
              "description": "GitRepository specifies how to connect to Git source control.",
              "properties": {
                "reference": {
                  "description": "Reference specifies the Git reference to resolve and monitor for changes, defaults to the 'master' branch.",
                  "properties": {
                    "branch": {
                      "description": "Branch to check out, defaults to 'main' if no other field is defined.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "url": {
                  "description": "URL specifies the Git repository URL, it can be an HTTP/S or SSH address.",
                  "pattern": "^(http|https|ssh)://.*$",
                  "type": "string"
                }
              },
              "required": [
                "url"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "image": {
              "description": "Image is the image that will be used to build worker image.",
              "type": "string"
            },
            "version": {
              "description": "Version is the version of the image that will be used to build worker image.",
              "type": "string"
            }
          },
          "required": [
            "enabled"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "clusterRef": {
          "description": "Reference to the temporal cluster the worker will connect to.",
          "properties": {
            "name": {
              "description": "The name of the TemporalCluster to reference.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace of the TemporalCluster to reference. Defaults to the namespace of the requested resource if omitted.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "image": {
          "description": "Image defines the temporal worker docker image the instance should run.",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "An optional list of references to secrets in the same namespace to use for pulling temporal images from registries.",
          "items": {
            "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
            "properties": {
              "name": {
                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                "type": "string"
              }
            },
            "type": "object",
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
          },
          "type": "array"
        },
        "jobTtlSecondsAfterFinished": {
          "default": 300,
          "description": "JobTTLSecondsAfterFinished is amount of time to keep job pods after jobs are completed. Defaults to 300 seconds.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "pullPolicy": {
          "description": "Image pull policy for determining how to pull worker process images.",
          "type": "string"
        },
        "replicas": {
          "description": "Number of desired replicas. Default to 1.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "temporalNamespace": {
          "description": "TemporalNamespace that worker will poll.",
          "type": "string"
        },
        "version": {
          "description": "Version defines the worker process version.",
          "type": "string"
        }
      },
      "required": [
        "clusterRef",
        "image",
        "temporalNamespace"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "TemporalWorkerProcessStatus defines the observed state of TemporalWorkerProcess.",
      "properties": {
        "attempt": {
          "description": "BuildAttempt is the build attempt number of a given version",
          "format": "int32",
          "type": "integer"
        },
        "conditions": {
          "description": "Conditions represent the latest available observations of the worker process state.",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "created": {
          "description": "Created indicates if the worker process image was created.",
          "type": "boolean"
        },
        "ready": {
          "description": "Ready defines if the worker process is ready.",
          "type": "boolean"
        },
        "version": {
          "description": "Version is the version of the image that will be used to build worker image.",
          "type": "string"
        }
      },
      "required": [
        "conditions"
      ],
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
