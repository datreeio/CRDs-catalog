{
  "description": "Service is the Schema for the Services API. Manages an App Runner Service.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ServiceSpec defines the desired state of Service",
      "properties": {
        "deletionPolicy": {
          "default": "Delete",
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "enum": [
            "Orphan",
            "Delete"
          ],
          "type": "string"
        },
        "forProvider": {
          "properties": {
            "autoScalingConfigurationArn": {
              "description": "ARN of an App Runner automatic scaling configuration resource that you want to associate with your service. If not provided, App Runner associates the latest revision of a default auto scaling configuration.",
              "type": "string"
            },
            "encryptionConfiguration": {
              "description": "(Forces new resource) An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed CMK. See Encryption Configuration below for more details.",
              "properties": {
                "kmsKey": {
                  "description": "ARN of the KMS key used for encryption.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "healthCheckConfiguration": {
              "description": "Settings of the health check that AWS App Runner performs to monitor the health of your service. See Health Check Configuration below for more details.",
              "properties": {
                "healthyThreshold": {
                  "description": "Number of consecutive checks that must succeed before App Runner decides that the service is healthy. Defaults to 1. Minimum value of 1. Maximum value of 20.",
                  "type": "number"
                },
                "interval": {
                  "description": "Time interval, in seconds, between health checks. Defaults to 5. Minimum value of 1. Maximum value of 20.",
                  "type": "number"
                },
                "path": {
                  "description": "URL to send requests to for health checks. Defaults to /. Minimum length of 0. Maximum length of 51200.",
                  "type": "string"
                },
                "protocol": {
                  "description": "IP protocol that App Runner uses to perform health checks for your service. Valid values: TCP, HTTP. Defaults to TCP. If you set protocol to HTTP, App Runner sends health check requests to the HTTP path specified by path.",
                  "type": "string"
                },
                "timeout": {
                  "description": "Time, in seconds, to wait for a health check response before deciding it failed. Defaults to 2. Minimum value of  1. Maximum value of 20.",
                  "type": "number"
                },
                "unhealthyThreshold": {
                  "description": "Number of consecutive checks that must fail before App Runner decides that the service is unhealthy. Defaults to 5. Minimum value of  1. Maximum value of 20.",
                  "type": "number"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "instanceConfiguration": {
              "description": "The runtime configuration of instances (scaling units) of the App Runner service. See Instance Configuration below for more details.",
              "properties": {
                "cpu": {
                  "description": "Number of CPU units reserved for each instance of your App Runner service represented as a String. Defaults to 1024. Valid values: 256|512|1024|2048|4096|(0.25|0.5|1|2|4) vCPU.",
                  "type": "string"
                },
                "instanceRoleArn": {
                  "description": "ARN of an IAM role that provides permissions to your App Runner service. These are permissions that your code needs when it calls any AWS APIs.",
                  "type": "string"
                },
                "memory": {
                  "description": "Amount of memory, in MB or GB, reserved for each instance of your App Runner service. Defaults to 2048. Valid values: 512|1024|2048|3072|4096|6144|8192|10240|12288|(0.5|1|2|3|4|6|8|10|12) GB.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "networkConfiguration": {
              "description": "Configuration settings related to network traffic of the web application that the App Runner service runs. See Network Configuration below for more details.",
              "properties": {
                "egressConfiguration": {
                  "description": "Network configuration settings for outbound message traffic. See Egress Configuration below for more details.",
                  "properties": {
                    "egressType": {
                      "description": "The type of egress configuration. Valid values are: DEFAULT and VPC.",
                      "type": "string"
                    },
                    "vpcConnectorArn": {
                      "description": "The Amazon Resource Name (ARN) of the App Runner VPC connector that you want to associate with your App Runner service. Only valid when EgressType = VPC.",
                      "type": "string"
                    },
                    "vpcConnectorArnRef": {
                      "description": "Reference to a VPCConnector in apprunner to populate vpcConnectorArn.",
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "vpcConnectorArnSelector": {
                      "description": "Selector for a VPCConnector in apprunner to populate vpcConnectorArn.",
                      "properties": {
                        "matchControllerRef": {
                          "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                          "type": "boolean"
                        },
                        "matchLabels": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "MatchLabels ensures an object with matching labels is selected.",
                          "type": "object"
                        },
                        "policy": {
                          "description": "Policies for selection.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "ingressConfiguration": {
                  "description": "Network configuration settings for inbound network traffic. See Ingress Configuration below for more details.",
                  "properties": {
                    "isPubliclyAccessible": {
                      "description": "Specifies whether your App Runner service is publicly accessible. To make the service publicly accessible set it to True. To make the service privately accessible, from only within an Amazon VPC set it to False.",
                      "type": "boolean"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "ipAddressType": {
                  "description": "App Runner provides you with the option to choose between Internet Protocol version 4 (IPv4) and dual stack (IPv4 and IPv6) for your incoming public network configuration. Valid values: IPV4, DUAL_STACK. Default: IPV4.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "observabilityConfiguration": {
              "description": "The observability configuration of your service. See Observability Configuration below for more details.",
              "properties": {
                "observabilityConfigurationArn": {
                  "description": "ARN of the observability configuration that is associated with the service. Specified only when observability_enabled is true.",
                  "type": "string"
                },
                "observabilityConfigurationArnRef": {
                  "description": "Reference to a ObservabilityConfiguration in apprunner to populate observabilityConfigurationArn.",
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "properties": {
                        "resolution": {
                          "default": "Required",
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "enum": [
                            "Required",
                            "Optional"
                          ],
                          "type": "string"
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "observabilityConfigurationArnSelector": {
                  "description": "Selector for a ObservabilityConfiguration in apprunner to populate observabilityConfigurationArn.",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "properties": {
                        "resolution": {
                          "default": "Required",
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "enum": [
                            "Required",
                            "Optional"
                          ],
                          "type": "string"
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "observabilityEnabled": {
                  "description": "When true, an observability configuration resource is associated with the service.",
                  "type": "boolean"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "region": {
              "description": "Region is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "serviceName": {
              "description": "(Forces new resource) Name of the service.",
              "type": "string"
            },
            "sourceConfiguration": {
              "description": "The source to deploy to the App Runner service. Can be a code or an image repository. See Source Configuration below for more details.",
              "properties": {
                "authenticationConfiguration": {
                  "description": "Describes resources needed to authenticate access to some source repositories. See Authentication Configuration below for more details.",
                  "properties": {
                    "accessRoleArn": {
                      "description": "ARN of the IAM role that grants the App Runner service access to a source repository. Required for ECR image repositories (but not for ECR Public)",
                      "type": "string"
                    },
                    "connectionArn": {
                      "description": "ARN of the App Runner connection that enables the App Runner service to connect to a source repository. Required for GitHub code repositories.",
                      "type": "string"
                    },
                    "connectionArnRef": {
                      "description": "Reference to a Connection in apprunner to populate connectionArn.",
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "connectionArnSelector": {
                      "description": "Selector for a Connection in apprunner to populate connectionArn.",
                      "properties": {
                        "matchControllerRef": {
                          "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                          "type": "boolean"
                        },
                        "matchLabels": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "MatchLabels ensures an object with matching labels is selected.",
                          "type": "object"
                        },
                        "policy": {
                          "description": "Policies for selection.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "autoDeploymentsEnabled": {
                  "description": "Whether continuous integration from the source repository is enabled for the App Runner service. If set to true, each repository change (source code commit or new image version) starts a deployment. Defaults to true.",
                  "type": "boolean"
                },
                "codeRepository": {
                  "description": "Description of a source code repository. See Code Repository below for more details.",
                  "properties": {
                    "codeConfiguration": {
                      "description": "Configuration for building and running the service from a source code repository. See Code Configuration below for more details.",
                      "properties": {
                        "codeConfigurationValues": {
                          "description": "Basic configuration for building and running the App Runner service. Use this parameter to quickly launch an App Runner service without providing an apprunner.yaml file in the source code repository (or ignoring the file if it exists). See Code Configuration Values below for more details.",
                          "properties": {
                            "buildCommand": {
                              "description": "Command App Runner runs to build your application.",
                              "type": "string"
                            },
                            "port": {
                              "description": "Port that your application listens to in the container. Defaults to \"8080\".",
                              "type": "string"
                            },
                            "runtime": {
                              "description": "Runtime environment type for building and running an App Runner service. Represents a programming language runtime. Valid values: PYTHON_3, NODEJS_12, NODEJS_14, NODEJS_16, CORRETTO_8, CORRETTO_11, GO_1, DOTNET_6, PHP_81, RUBY_31.",
                              "type": "string"
                            },
                            "runtimeEnvironmentSecrets": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.",
                              "type": "object",
                              "x-kubernetes-map-type": "granular"
                            },
                            "runtimeEnvironmentVariables": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of AWSAPPRUNNER are reserved for system use and aren't valid.",
                              "type": "object",
                              "x-kubernetes-map-type": "granular"
                            },
                            "startCommand": {
                              "description": "Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image\u2019s default start command.",
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "configurationSource": {
                          "description": "Source of the App Runner configuration. Valid values: REPOSITORY, API. Values are interpreted as follows:",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "repositoryUrl": {
                      "description": "Location of the repository that contains the source code.",
                      "type": "string"
                    },
                    "sourceCodeVersion": {
                      "description": "Version that should be used within the source code repository. See Source Code Version below for more details.",
                      "properties": {
                        "type": {
                          "description": "Type of version identifier. For a git-based repository, branches represent versions. Valid values: BRANCH.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Source code version. For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "sourceDirectory": {
                      "description": "The path of the directory that stores source code and configuration files. The build and start commands also execute from here. The path is absolute from root and, if not specified, defaults to the repository root.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "imageRepository": {
                  "description": "Description of a source image repository. See Image Repository below for more details.",
                  "properties": {
                    "imageConfiguration": {
                      "description": "Configuration for running the identified image. See Image Configuration below for more details.",
                      "properties": {
                        "port": {
                          "description": "Port that your application listens to in the container. Defaults to \"8080\".",
                          "type": "string"
                        },
                        "runtimeEnvironmentSecrets": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.",
                          "type": "object",
                          "x-kubernetes-map-type": "granular"
                        },
                        "runtimeEnvironmentVariables": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of AWSAPPRUNNER are reserved for system use and aren't valid.",
                          "type": "object",
                          "x-kubernetes-map-type": "granular"
                        },
                        "startCommand": {
                          "description": "Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image\u2019s default start command.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "imageIdentifier": {
                      "description": "Identifier of an image. For an image in Amazon Elastic Container Registry (Amazon ECR), this is an image name. For the\nimage name format, see Pulling an image in the Amazon ECR User Guide.",
                      "type": "string"
                    },
                    "imageRepositoryType": {
                      "description": "Type of the image repository. This reflects the repository provider and whether the repository is private or public. Valid values: ECR , ECR_PUBLIC.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            }
          },
          "required": [
            "region"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "properties": {
            "autoScalingConfigurationArn": {
              "description": "ARN of an App Runner automatic scaling configuration resource that you want to associate with your service. If not provided, App Runner associates the latest revision of a default auto scaling configuration.",
              "type": "string"
            },
            "encryptionConfiguration": {
              "description": "(Forces new resource) An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed CMK. See Encryption Configuration below for more details.",
              "properties": {
                "kmsKey": {
                  "description": "ARN of the KMS key used for encryption.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "healthCheckConfiguration": {
              "description": "Settings of the health check that AWS App Runner performs to monitor the health of your service. See Health Check Configuration below for more details.",
              "properties": {
                "healthyThreshold": {
                  "description": "Number of consecutive checks that must succeed before App Runner decides that the service is healthy. Defaults to 1. Minimum value of 1. Maximum value of 20.",
                  "type": "number"
                },
                "interval": {
                  "description": "Time interval, in seconds, between health checks. Defaults to 5. Minimum value of 1. Maximum value of 20.",
                  "type": "number"
                },
                "path": {
                  "description": "URL to send requests to for health checks. Defaults to /. Minimum length of 0. Maximum length of 51200.",
                  "type": "string"
                },
                "protocol": {
                  "description": "IP protocol that App Runner uses to perform health checks for your service. Valid values: TCP, HTTP. Defaults to TCP. If you set protocol to HTTP, App Runner sends health check requests to the HTTP path specified by path.",
                  "type": "string"
                },
                "timeout": {
                  "description": "Time, in seconds, to wait for a health check response before deciding it failed. Defaults to 2. Minimum value of  1. Maximum value of 20.",
                  "type": "number"
                },
                "unhealthyThreshold": {
                  "description": "Number of consecutive checks that must fail before App Runner decides that the service is unhealthy. Defaults to 5. Minimum value of  1. Maximum value of 20.",
                  "type": "number"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "instanceConfiguration": {
              "description": "The runtime configuration of instances (scaling units) of the App Runner service. See Instance Configuration below for more details.",
              "properties": {
                "cpu": {
                  "description": "Number of CPU units reserved for each instance of your App Runner service represented as a String. Defaults to 1024. Valid values: 256|512|1024|2048|4096|(0.25|0.5|1|2|4) vCPU.",
                  "type": "string"
                },
                "instanceRoleArn": {
                  "description": "ARN of an IAM role that provides permissions to your App Runner service. These are permissions that your code needs when it calls any AWS APIs.",
                  "type": "string"
                },
                "memory": {
                  "description": "Amount of memory, in MB or GB, reserved for each instance of your App Runner service. Defaults to 2048. Valid values: 512|1024|2048|3072|4096|6144|8192|10240|12288|(0.5|1|2|3|4|6|8|10|12) GB.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "networkConfiguration": {
              "description": "Configuration settings related to network traffic of the web application that the App Runner service runs. See Network Configuration below for more details.",
              "properties": {
                "egressConfiguration": {
                  "description": "Network configuration settings for outbound message traffic. See Egress Configuration below for more details.",
                  "properties": {
                    "egressType": {
                      "description": "The type of egress configuration. Valid values are: DEFAULT and VPC.",
                      "type": "string"
                    },
                    "vpcConnectorArn": {
                      "description": "The Amazon Resource Name (ARN) of the App Runner VPC connector that you want to associate with your App Runner service. Only valid when EgressType = VPC.",
                      "type": "string"
                    },
                    "vpcConnectorArnRef": {
                      "description": "Reference to a VPCConnector in apprunner to populate vpcConnectorArn.",
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "vpcConnectorArnSelector": {
                      "description": "Selector for a VPCConnector in apprunner to populate vpcConnectorArn.",
                      "properties": {
                        "matchControllerRef": {
                          "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                          "type": "boolean"
                        },
                        "matchLabels": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "MatchLabels ensures an object with matching labels is selected.",
                          "type": "object"
                        },
                        "policy": {
                          "description": "Policies for selection.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "ingressConfiguration": {
                  "description": "Network configuration settings for inbound network traffic. See Ingress Configuration below for more details.",
                  "properties": {
                    "isPubliclyAccessible": {
                      "description": "Specifies whether your App Runner service is publicly accessible. To make the service publicly accessible set it to True. To make the service privately accessible, from only within an Amazon VPC set it to False.",
                      "type": "boolean"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "ipAddressType": {
                  "description": "App Runner provides you with the option to choose between Internet Protocol version 4 (IPv4) and dual stack (IPv4 and IPv6) for your incoming public network configuration. Valid values: IPV4, DUAL_STACK. Default: IPV4.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "observabilityConfiguration": {
              "description": "The observability configuration of your service. See Observability Configuration below for more details.",
              "properties": {
                "observabilityConfigurationArn": {
                  "description": "ARN of the observability configuration that is associated with the service. Specified only when observability_enabled is true.",
                  "type": "string"
                },
                "observabilityConfigurationArnRef": {
                  "description": "Reference to a ObservabilityConfiguration in apprunner to populate observabilityConfigurationArn.",
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "properties": {
                        "resolution": {
                          "default": "Required",
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "enum": [
                            "Required",
                            "Optional"
                          ],
                          "type": "string"
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "observabilityConfigurationArnSelector": {
                  "description": "Selector for a ObservabilityConfiguration in apprunner to populate observabilityConfigurationArn.",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "properties": {
                        "resolution": {
                          "default": "Required",
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "enum": [
                            "Required",
                            "Optional"
                          ],
                          "type": "string"
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "observabilityEnabled": {
                  "description": "When true, an observability configuration resource is associated with the service.",
                  "type": "boolean"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "serviceName": {
              "description": "(Forces new resource) Name of the service.",
              "type": "string"
            },
            "sourceConfiguration": {
              "description": "The source to deploy to the App Runner service. Can be a code or an image repository. See Source Configuration below for more details.",
              "properties": {
                "authenticationConfiguration": {
                  "description": "Describes resources needed to authenticate access to some source repositories. See Authentication Configuration below for more details.",
                  "properties": {
                    "accessRoleArn": {
                      "description": "ARN of the IAM role that grants the App Runner service access to a source repository. Required for ECR image repositories (but not for ECR Public)",
                      "type": "string"
                    },
                    "connectionArn": {
                      "description": "ARN of the App Runner connection that enables the App Runner service to connect to a source repository. Required for GitHub code repositories.",
                      "type": "string"
                    },
                    "connectionArnRef": {
                      "description": "Reference to a Connection in apprunner to populate connectionArn.",
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "connectionArnSelector": {
                      "description": "Selector for a Connection in apprunner to populate connectionArn.",
                      "properties": {
                        "matchControllerRef": {
                          "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                          "type": "boolean"
                        },
                        "matchLabels": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "MatchLabels ensures an object with matching labels is selected.",
                          "type": "object"
                        },
                        "policy": {
                          "description": "Policies for selection.",
                          "properties": {
                            "resolution": {
                              "default": "Required",
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "enum": [
                                "Required",
                                "Optional"
                              ],
                              "type": "string"
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "autoDeploymentsEnabled": {
                  "description": "Whether continuous integration from the source repository is enabled for the App Runner service. If set to true, each repository change (source code commit or new image version) starts a deployment. Defaults to true.",
                  "type": "boolean"
                },
                "codeRepository": {
                  "description": "Description of a source code repository. See Code Repository below for more details.",
                  "properties": {
                    "codeConfiguration": {
                      "description": "Configuration for building and running the service from a source code repository. See Code Configuration below for more details.",
                      "properties": {
                        "codeConfigurationValues": {
                          "description": "Basic configuration for building and running the App Runner service. Use this parameter to quickly launch an App Runner service without providing an apprunner.yaml file in the source code repository (or ignoring the file if it exists). See Code Configuration Values below for more details.",
                          "properties": {
                            "buildCommand": {
                              "description": "Command App Runner runs to build your application.",
                              "type": "string"
                            },
                            "port": {
                              "description": "Port that your application listens to in the container. Defaults to \"8080\".",
                              "type": "string"
                            },
                            "runtime": {
                              "description": "Runtime environment type for building and running an App Runner service. Represents a programming language runtime. Valid values: PYTHON_3, NODEJS_12, NODEJS_14, NODEJS_16, CORRETTO_8, CORRETTO_11, GO_1, DOTNET_6, PHP_81, RUBY_31.",
                              "type": "string"
                            },
                            "runtimeEnvironmentSecrets": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.",
                              "type": "object",
                              "x-kubernetes-map-type": "granular"
                            },
                            "runtimeEnvironmentVariables": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of AWSAPPRUNNER are reserved for system use and aren't valid.",
                              "type": "object",
                              "x-kubernetes-map-type": "granular"
                            },
                            "startCommand": {
                              "description": "Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image\u2019s default start command.",
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "configurationSource": {
                          "description": "Source of the App Runner configuration. Valid values: REPOSITORY, API. Values are interpreted as follows:",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "repositoryUrl": {
                      "description": "Location of the repository that contains the source code.",
                      "type": "string"
                    },
                    "sourceCodeVersion": {
                      "description": "Version that should be used within the source code repository. See Source Code Version below for more details.",
                      "properties": {
                        "type": {
                          "description": "Type of version identifier. For a git-based repository, branches represent versions. Valid values: BRANCH.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Source code version. For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "sourceDirectory": {
                      "description": "The path of the directory that stores source code and configuration files. The build and start commands also execute from here. The path is absolute from root and, if not specified, defaults to the repository root.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "imageRepository": {
                  "description": "Description of a source image repository. See Image Repository below for more details.",
                  "properties": {
                    "imageConfiguration": {
                      "description": "Configuration for running the identified image. See Image Configuration below for more details.",
                      "properties": {
                        "port": {
                          "description": "Port that your application listens to in the container. Defaults to \"8080\".",
                          "type": "string"
                        },
                        "runtimeEnvironmentSecrets": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.",
                          "type": "object",
                          "x-kubernetes-map-type": "granular"
                        },
                        "runtimeEnvironmentVariables": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of AWSAPPRUNNER are reserved for system use and aren't valid.",
                          "type": "object",
                          "x-kubernetes-map-type": "granular"
                        },
                        "startCommand": {
                          "description": "Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image\u2019s default start command.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "imageIdentifier": {
                      "description": "Identifier of an image. For an image in Amazon Elastic Container Registry (Amazon ECR), this is an image name. For the\nimage name format, see Pulling an image in the Amazon ECR User Guide.",
                      "type": "string"
                    },
                    "imageRepositoryType": {
                      "description": "Type of the image repository. This reflects the repository provider and whether the repository is private or public. Valid values: ECR , ECR_PUBLIC.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managementPolicies": {
          "default": [
            "*"
          ],
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "providerConfigRef": {
          "default": {
            "name": "default"
          },
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "properties": {
                "resolution": {
                  "default": "Required",
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "type": "string"
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which\ncontains a name, metadata and a reference to secret store config to\nwhich any connection details for this managed resource should be written.\nConnection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "properties": {
            "configRef": {
              "default": {
                "name": "default"
              },
              "description": "SecretStoreConfigRef specifies which secret store config should be used\nfor this ConnectionSecret.",
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "properties": {
                    "resolution": {
                      "default": "Required",
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "enum": [
                        "Required",
                        "Optional"
                      ],
                      "type": "string"
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Annotations are the annotations to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.annotations\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Labels are the labels/tags to be added to connection secret.\n- For Kubernetes secrets, this will be used as \"metadata.labels\".\n- It is up to Secret Store implementation for others store types.",
                  "type": "object"
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret.\n- Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.\nThis field is planned to be replaced in a future release in favor of\nPublishConnectionDetailsTo. Currently, both could be set independently\nand connection details would be published to both without affecting\neach other.",
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "forProvider"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "spec.forProvider.serviceName is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))"
        },
        {
          "message": "spec.forProvider.sourceConfiguration is a required parameter",
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sourceConfiguration) || (has(self.initProvider) && has(self.initProvider.sourceConfiguration))"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "ServiceStatus defines the observed state of Service.",
      "properties": {
        "atProvider": {
          "properties": {
            "arn": {
              "description": "ARN of the App Runner service.",
              "type": "string"
            },
            "autoScalingConfigurationArn": {
              "description": "ARN of an App Runner automatic scaling configuration resource that you want to associate with your service. If not provided, App Runner associates the latest revision of a default auto scaling configuration.",
              "type": "string"
            },
            "encryptionConfiguration": {
              "description": "(Forces new resource) An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed CMK. See Encryption Configuration below for more details.",
              "properties": {
                "kmsKey": {
                  "description": "ARN of the KMS key used for encryption.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "healthCheckConfiguration": {
              "description": "Settings of the health check that AWS App Runner performs to monitor the health of your service. See Health Check Configuration below for more details.",
              "properties": {
                "healthyThreshold": {
                  "description": "Number of consecutive checks that must succeed before App Runner decides that the service is healthy. Defaults to 1. Minimum value of 1. Maximum value of 20.",
                  "type": "number"
                },
                "interval": {
                  "description": "Time interval, in seconds, between health checks. Defaults to 5. Minimum value of 1. Maximum value of 20.",
                  "type": "number"
                },
                "path": {
                  "description": "URL to send requests to for health checks. Defaults to /. Minimum length of 0. Maximum length of 51200.",
                  "type": "string"
                },
                "protocol": {
                  "description": "IP protocol that App Runner uses to perform health checks for your service. Valid values: TCP, HTTP. Defaults to TCP. If you set protocol to HTTP, App Runner sends health check requests to the HTTP path specified by path.",
                  "type": "string"
                },
                "timeout": {
                  "description": "Time, in seconds, to wait for a health check response before deciding it failed. Defaults to 2. Minimum value of  1. Maximum value of 20.",
                  "type": "number"
                },
                "unhealthyThreshold": {
                  "description": "Number of consecutive checks that must fail before App Runner decides that the service is unhealthy. Defaults to 5. Minimum value of  1. Maximum value of 20.",
                  "type": "number"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "id": {
              "type": "string"
            },
            "instanceConfiguration": {
              "description": "The runtime configuration of instances (scaling units) of the App Runner service. See Instance Configuration below for more details.",
              "properties": {
                "cpu": {
                  "description": "Number of CPU units reserved for each instance of your App Runner service represented as a String. Defaults to 1024. Valid values: 256|512|1024|2048|4096|(0.25|0.5|1|2|4) vCPU.",
                  "type": "string"
                },
                "instanceRoleArn": {
                  "description": "ARN of an IAM role that provides permissions to your App Runner service. These are permissions that your code needs when it calls any AWS APIs.",
                  "type": "string"
                },
                "memory": {
                  "description": "Amount of memory, in MB or GB, reserved for each instance of your App Runner service. Defaults to 2048. Valid values: 512|1024|2048|3072|4096|6144|8192|10240|12288|(0.5|1|2|3|4|6|8|10|12) GB.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "networkConfiguration": {
              "description": "Configuration settings related to network traffic of the web application that the App Runner service runs. See Network Configuration below for more details.",
              "properties": {
                "egressConfiguration": {
                  "description": "Network configuration settings for outbound message traffic. See Egress Configuration below for more details.",
                  "properties": {
                    "egressType": {
                      "description": "The type of egress configuration. Valid values are: DEFAULT and VPC.",
                      "type": "string"
                    },
                    "vpcConnectorArn": {
                      "description": "The Amazon Resource Name (ARN) of the App Runner VPC connector that you want to associate with your App Runner service. Only valid when EgressType = VPC.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "ingressConfiguration": {
                  "description": "Network configuration settings for inbound network traffic. See Ingress Configuration below for more details.",
                  "properties": {
                    "isPubliclyAccessible": {
                      "description": "Specifies whether your App Runner service is publicly accessible. To make the service publicly accessible set it to True. To make the service privately accessible, from only within an Amazon VPC set it to False.",
                      "type": "boolean"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "ipAddressType": {
                  "description": "App Runner provides you with the option to choose between Internet Protocol version 4 (IPv4) and dual stack (IPv4 and IPv6) for your incoming public network configuration. Valid values: IPV4, DUAL_STACK. Default: IPV4.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "observabilityConfiguration": {
              "description": "The observability configuration of your service. See Observability Configuration below for more details.",
              "properties": {
                "observabilityConfigurationArn": {
                  "description": "ARN of the observability configuration that is associated with the service. Specified only when observability_enabled is true.",
                  "type": "string"
                },
                "observabilityEnabled": {
                  "description": "When true, an observability configuration resource is associated with the service.",
                  "type": "boolean"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "serviceId": {
              "description": "An alphanumeric ID that App Runner generated for this service. Unique within the AWS Region.",
              "type": "string"
            },
            "serviceName": {
              "description": "(Forces new resource) Name of the service.",
              "type": "string"
            },
            "serviceUrl": {
              "description": "Subdomain URL that App Runner generated for this service. You can use this URL to access your service web application.",
              "type": "string"
            },
            "sourceConfiguration": {
              "description": "The source to deploy to the App Runner service. Can be a code or an image repository. See Source Configuration below for more details.",
              "properties": {
                "authenticationConfiguration": {
                  "description": "Describes resources needed to authenticate access to some source repositories. See Authentication Configuration below for more details.",
                  "properties": {
                    "accessRoleArn": {
                      "description": "ARN of the IAM role that grants the App Runner service access to a source repository. Required for ECR image repositories (but not for ECR Public)",
                      "type": "string"
                    },
                    "connectionArn": {
                      "description": "ARN of the App Runner connection that enables the App Runner service to connect to a source repository. Required for GitHub code repositories.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "autoDeploymentsEnabled": {
                  "description": "Whether continuous integration from the source repository is enabled for the App Runner service. If set to true, each repository change (source code commit or new image version) starts a deployment. Defaults to true.",
                  "type": "boolean"
                },
                "codeRepository": {
                  "description": "Description of a source code repository. See Code Repository below for more details.",
                  "properties": {
                    "codeConfiguration": {
                      "description": "Configuration for building and running the service from a source code repository. See Code Configuration below for more details.",
                      "properties": {
                        "codeConfigurationValues": {
                          "description": "Basic configuration for building and running the App Runner service. Use this parameter to quickly launch an App Runner service without providing an apprunner.yaml file in the source code repository (or ignoring the file if it exists). See Code Configuration Values below for more details.",
                          "properties": {
                            "buildCommand": {
                              "description": "Command App Runner runs to build your application.",
                              "type": "string"
                            },
                            "port": {
                              "description": "Port that your application listens to in the container. Defaults to \"8080\".",
                              "type": "string"
                            },
                            "runtime": {
                              "description": "Runtime environment type for building and running an App Runner service. Represents a programming language runtime. Valid values: PYTHON_3, NODEJS_12, NODEJS_14, NODEJS_16, CORRETTO_8, CORRETTO_11, GO_1, DOTNET_6, PHP_81, RUBY_31.",
                              "type": "string"
                            },
                            "runtimeEnvironmentSecrets": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.",
                              "type": "object",
                              "x-kubernetes-map-type": "granular"
                            },
                            "runtimeEnvironmentVariables": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of AWSAPPRUNNER are reserved for system use and aren't valid.",
                              "type": "object",
                              "x-kubernetes-map-type": "granular"
                            },
                            "startCommand": {
                              "description": "Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image\u2019s default start command.",
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "configurationSource": {
                          "description": "Source of the App Runner configuration. Valid values: REPOSITORY, API. Values are interpreted as follows:",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "repositoryUrl": {
                      "description": "Location of the repository that contains the source code.",
                      "type": "string"
                    },
                    "sourceCodeVersion": {
                      "description": "Version that should be used within the source code repository. See Source Code Version below for more details.",
                      "properties": {
                        "type": {
                          "description": "Type of version identifier. For a git-based repository, branches represent versions. Valid values: BRANCH.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Source code version. For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "sourceDirectory": {
                      "description": "The path of the directory that stores source code and configuration files. The build and start commands also execute from here. The path is absolute from root and, if not specified, defaults to the repository root.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "imageRepository": {
                  "description": "Description of a source image repository. See Image Repository below for more details.",
                  "properties": {
                    "imageConfiguration": {
                      "description": "Configuration for running the identified image. See Image Configuration below for more details.",
                      "properties": {
                        "port": {
                          "description": "Port that your application listens to in the container. Defaults to \"8080\".",
                          "type": "string"
                        },
                        "runtimeEnvironmentSecrets": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.",
                          "type": "object",
                          "x-kubernetes-map-type": "granular"
                        },
                        "runtimeEnvironmentVariables": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of AWSAPPRUNNER are reserved for system use and aren't valid.",
                          "type": "object",
                          "x-kubernetes-map-type": "granular"
                        },
                        "startCommand": {
                          "description": "Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image\u2019s default start command.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "imageIdentifier": {
                      "description": "Identifier of an image. For an image in Amazon Elastic Container Registry (Amazon ECR), this is an image name. For the\nimage name format, see Pulling an image in the Amazon ECR User Guide.",
                      "type": "string"
                    },
                    "imageRepositoryType": {
                      "description": "Type of the image repository. This reflects the repository provider and whether the repository is private or public. Valid values: ECR , ECR_PUBLIC.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "status": {
              "description": "Current state of the App Runner service.",
              "type": "string"
            },
            "tags": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Key-value map of resource tags.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "x-kubernetes-map-type": "granular"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
